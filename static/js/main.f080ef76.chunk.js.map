{"version":3,"sources":["assets/imgs/new_worklog_button.svg","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg","Components/WorkLogs/WorkLog.module.css","Components/Calendar/Calendar.module.css","assets/imgs/settings.svg","assets/imgs/door.svg","assets/imgs/avatar.svg","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/TT-stop-button.svg","assets/imgs/TT-pause-button.svg","assets/imgs/calendar.svg","Components/TimeTracking/TimeTracking.module.css","Components/ModalWindow/ModalWindow.module.css","Components/NavBar/NavBar.module.css","Components/Favorites/Favorites.module.css","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","Components/Tooltip/Tooltip.module.css","App.module.css","serviceWorker.ts","API/requests.ts","assets/secondary/GetCurrentDate.ts","Data/WorkLogsReducer.ts","Data/CalendarReducer.ts","Data/IssuesReducer.ts","Data/redux-store.ts","Components/NavBar/NavBar.tsx","assets/secondary/DifferenceInTime.js","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/secondary/CalculateTime.js","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/Favorites/FavoritesPage.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/All/All.tsx","Components/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/ModalWindow/TimeSlider/SliderValueLeftLabel.tsx","Components/ModalWindow/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ModalWindow/TimeSlider/TimeSlider.tsx","Components/ModalWindow/ChangeWorklogModal.tsx","Components/ModalWindow/ChangeWorklogModalContainer.tsx","Components/LoginPage/LoginModal.tsx","Components/Tooltip/Tooltip.tsx","Components/Issues/CustomListInput.tsx","Components/Issues/IssueListItem.tsx","Components/Issues/IssuesList.tsx","Components/Issues/Issues.tsx","App.tsx","index.tsx","Components/ModalWindow/TimeSlider/TimeSlider.module.css","Components/Timer/Timer.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css","Components/LoginPage/LoginModal.module.css","Components/DeleteConfirmModal/DeleteConfirm.module.css","Components/All/All.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","API","WorklogData","post","response","data","days","months","GetCurrentDate","date","Date","CurrentYear","getFullYear","CurrentMonth","getMonth","CurrentDay","getDate","DayName","getDay","DEL_WORKLOG","CurrentDate","randomInteger","min","max","rand","Math","random","floor","DefaultState","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","id","Worklogs","StartTime","EndTime","TaskField","status","IsNesting","NestingItems","TimerValue","Issue","PlayingWorklog","WorklogToChange","FavoritesWorklogs","AddWorklog","NewWorklog","IsFavorites","type","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","WorkLogId","SetWorklogToChange","undefined","AddToFavorite","WorklogId","WorklogsReducer","state","action","GetWorklogsBlockCopy","JSON","parse","stringify","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","map","WorklogBlock","Index","Worklog","WLIndex","length","NestingItem","NestingIndex","EmptyWorklog","ParentId","WorklogToCreate","some","WBL","unshift","WB","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","DelParentId","push","filter","DelWorklogId","WL","WBLtrue","console","log","options","target","FavoritesWorklog","FavoritesWorklogsCopy","Nest","RandomStatus","arr","RangeError","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","Signature","DayNumber","DayStatus","n","p","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CalendarReducer","Day","Issues","CompletedIssues","IssuesReducer","GetIssuesCopy","From","CompletedIssue","IssuesCopy","findIndex","value","OldIssue","NewIssue","reducers","combineReducers","form","formReducer","CalendarData","WorklogsData","WorkLogsReducer","IssuesData","store","createStore","applyMiddleware","thunkMiddleWare","NavBar","props","className","HS","navContainer","navLinksContainer","NavLinksPosition","NavLinks","item","to","NavIconsContainer","NavIcons","SmallIcons","src","settings","alt","LogOutIcon","AvatarIcons","AvatarIcon","DifferenceInTime","differentRes","hours","minuts","TimesArr","firstDate","secondDate","string","split","different","round","abs","LineStroke","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","onClick","ContentContainer","ComponentToDraw","CurrentWorklog","ContainerEl","e","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","DeleteWorklogConfirmModal","isOpen","DS","modal","ModalTextContainer","NewWorklogControlButtonsContainer","NewWorklogControlButtons","DeleteModalParams","DeleteWorklog","DeleteFromFavorites","onClose","style","color","green","cursor","fontSize","marginLeft","MS","bg","NestingWorkLog","key","WorkLog","useState","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","ProgressBar","Fragment","width","height","borderRadius","Bar","now","WorklogInfo","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","showTooltip","text","SetWorklogStatus","every","ObjToSend","SendWorklogBlockThunk","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","toString","WorklogInfoContainer","el","WorkLogsContainer","this","WorklogsBlocks","paddingTop","React","Component","compose","connect","WorklogBlockData","dispatch","a","ToFullTime","Numbered","Number","parseInt","CalculateNewStartTime","CurrentTime","minutes","CurrentHours","CurrentMinutes","Timer","substr","seconds","setSeconds","setMinutes","setHours","isActive","setIsActive","WorklogInputValue","SetWorklogInputValue","IssueInputValue","SetIssueInputValue","useEffect","interval","clearInterval","setInterval","TS","TimeRContainer","TimerWorklogName","placeholder","defaultValue","onChange","TimerIssueName","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","TTStopButton","TTPauseButton","TimeTracking","TTS","TTLayout","strokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","FavoritesPage","NoFavoritesIssuesContainer","FavoritesText","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","MonthName","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","StateCopy","getState","WorklogsBlockToBeScrolled","Month","document","getElementById","SearchWorklogBlock","SetClickedMonthDay","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","paddingLeft","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","marginTop","DropDownProgressStatus","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","Calendar","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","FavoritesTextContainer","OnFavoritesClick","pink","CalendarAndControlButtons","AS","CalendarAndButtons","RightLabel","LeftLabel","display","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","querySelectorAll","SliderWidth","getComputedStyle","SliderPoseStart","SliderPoseEnd","LeftMargin","RightMargin","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","step","ChangeWorklogModal","ModalNewWorklogName","SetModalNewWorklogName","ModalNewIssueName","SetModalNewIssueName","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","EmptyWorklogTimerEndHours","getHours","getMinutes","EmptyWorklogTimeValues","close","preventDefault","closeWorklogChangeModal","WorklogChangeModalIsOpen","ModalTitle","ModalSlider","ModalTextFields","NewWorklogContentContainer","NewWorklogContentTitle","marginCheck","currentTarget","NewWorklogContentInput","ModalInputError","Obj","NewWL","ChangeFavoritesWorklog","CloseButtonMargin","ChangeWorklogModalContainer","useStyles","makeStyles","theme","root","margin","spacing","LoginModal","classes","LoginFieldValue","SetLoginFieldValue","PasswordFieldValue","SetPasswordFieldValue","ErrorText","SetErrorText","autoComplete","InputsContainer","LoginContainer","TextField","error","label","helperText","PasswordContainer","Button","localStorage","setItem","reload","variant","Tooltip","TooltipIsShowed","TooltipContainer","TooltipContent","StatusAndCloseButtonContainer","TooltipInfo","TooltipStatusOk","TooltipStatusWarning","TooltipStatusDanger","hideTooltil","TooltipCloseButtonContainer","TooltipTextContainer","CustomListInput","AddIssueInput","multiline","handler","Grid","container","onSubmit","size","SubmitButtonText","onCancel","CancelButtonText","IssueListItem","EditInputIsShowing","SetEditInputIsShowing","EditInputValue","SetEditInputValue","labelId","ChangeIssue","event","xs","sm","ListItem","role","button","handleToggle","ListItemIcon","Checkbox","checked","indexOf","tabIndex","disableRipple","inputProps","ListItemText","primary","title","arrow","placement","blue","DeleteIssue","blueGrey","IssuesList","items","AddIssueOpened","SetAddIssueOpened","AddNewIssueInputValue","SetAddNewIssueInputValue","not","b","currentIndex","newChecked","splice","setChecked","numberOfChecked","Card","CardHeader","cardHeader","avatar","indeterminate","subheader","startIcon","AddIssue","Divider","List","list","dense","component","createStyles","padding","innerWidth","innerHeight","backgroundColor","palette","background","paper","overflow","paddingBottom","intersection","IssuesChecked","CompletedIssuesChecked","alignItems","direction","SetCompletedIssues","concat","SetIssues","aria-label","SetWorklogChangeModalIsOpen","SetFavoritesIsClicked","SetTooltipIsShowed","SetTooltipInfo","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","TImeTracking_and_Calendar","ReactDOM","basename","process","AppContainer","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f080ef76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"Issue\":\"WorkLog_Issue__34BO9\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/settings.6677f6c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/door.ffe979f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.462c6cf4.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/TT-stop-button.3d2bae0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/TT-pause-button.8e7efc77.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__fVvss\",\"bg\":\"ModalWindow_bg__1aHSY\",\"ModalTitle\":\"ModalWindow_ModalTitle__1JK9n\",\"ModalSlider\":\"ModalWindow_ModalSlider__21VHJ\",\"ModalTextFields\":\"ModalWindow_ModalTextFields__1xPvH\",\"NewWorklogContentContainer\":\"ModalWindow_NewWorklogContentContainer__3XnfK\",\"NewWorklogContentTitle\":\"ModalWindow_NewWorklogContentTitle__3V0FN\",\"ModalInputError\":\"ModalWindow_ModalInputError__2UZpA\",\"NewWorklogContentInput\":\"ModalWindow_NewWorklogContentInput__3GqOw\",\"marginCheck\":\"ModalWindow_marginCheck__2Ndhx\",\"NewWorklogControlButtonsContainer\":\"ModalWindow_NewWorklogControlButtonsContainer__308FZ\",\"NewWorklogControlButtons\":\"ModalWindow_NewWorklogControlButtons__2T_1s\",\"NewWorklogControlButton\":\"ModalWindow_NewWorklogControlButton__3fYoB\",\"CloseButtonMargin\":\"ModalWindow_CloseButtonMargin__DWcBR\",\"NewWorklogSubmitButton\":\"ModalWindow_NewWorklogSubmitButton__r5R_e\",\"Err\":\"ModalWindow_Err__1uJOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"NavBar_navContainer__3sKle\",\"navLinksContainer\":\"NavBar_navLinksContainer__3UvKn\",\"NavLinksPosition\":\"NavBar_NavLinksPosition__2Jq8r\",\"NavLinks\":\"NavBar_NavLinks__22adz\",\"NavLinksItem\":\"NavBar_NavLinksItem__jDCJP\",\"ActiveLink\":\"NavBar_ActiveLink__2agTU\",\"NavIconsContainer\":\"NavBar_NavIconsContainer__2r9Fj\",\"NavIcons\":\"NavBar_NavIcons__1XxNH\",\"SmallIcons\":\"NavBar_SmallIcons__atSWj\",\"AvatarIcons\":\"NavBar_AvatarIcons__yrk4o\",\"item\":\"NavBar_item__fYm3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__3VELL\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__dnGPa\",\"item\":\"Favorites_item__1W2Lk\",\"ActiveItem\":\"Favorites_ActiveItem__3T7aT\",\"FavoritesText\":\"Favorites_FavoritesText__2x9PR\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3tIde\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__BfuKk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TooltipContainer\":\"Tooltip_TooltipContainer__1GAZV\",\"TooltipContent\":\"Tooltip_TooltipContent__3cqtU\",\"StatusAndCloseButtonContainer\":\"Tooltip_StatusAndCloseButtonContainer__3sV8b\",\"TooltipCloseButtonContainer\":\"Tooltip_TooltipCloseButtonContainer__XoffU\",\"TooltipStatusWarning\":\"Tooltip_TooltipStatusWarning__1X3_l\",\"TooltipStatusDanger\":\"Tooltip_TooltipStatusDanger__3M61h\",\"TooltipStatusOk\":\"Tooltip_TooltipStatusOk__3odhk\",\"TooltipTextContainer\":\"Tooltip_TooltipTextContainer__QJNFQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {TSendWorklogsData} from \"../Data/WorkLogsReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://localhost:5000/api/1.0/'\r\n})\r\n\r\n\r\nexport type TDefRes = {\r\n    resultCode : number\r\n    messages: Array<string>\r\n    data : any\r\n}\r\n\r\nexport const API = {\r\n    async SendWorklogBlock(WorklogData : TSendWorklogsData) {\r\n        const response = await instance.post<TDefRes>(`Worklogs`,WorklogData)\r\n        return response.data\r\n    }\r\n}\r\n\r\n","import {TCurrentDate} from \"../../Data/CalendarReducer\";\r\nconst days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = (): TCurrentDate => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    let CurrentDate: TCurrentDate = {\r\n        DayName,\r\n        CurrentYear,\r\n        //@ts-ignore\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n    return CurrentDate\r\n\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {API} from \"../API/requests\"\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            IsNesting: false,\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241,\r\n            Issue : \"Meeting\"\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            IsNesting: false,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122,\r\n            Issue: \"QA\"\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            IsNesting: false,\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null,\r\n            Issue: \"Branding\"\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                IsNesting: false,\r\n                Issue: \"Profit increase\"\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                IsNesting: false,\r\n                Issue: \"Project Design\"\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246,\r\n                Issue : \"Meeting\"\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                IsNesting: false,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127,\r\n                Issue: \"Project Design\"\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                IsNesting: true,\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                Issue: \"Profit increase\",\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                    Issue : \"Profit increase\"\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                    Issue : \"Profit increase\"\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n                Issue: \"Meeting\"\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n                Issue : \"Amendment\"\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                IsNesting: false,\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\"\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\"\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\"\r\n                }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Sun,October 4\",\r\n                SummaryStatus: \"danger\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 4\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412416,\r\n                Issue: \"Meeting\"\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"12:30\",\r\n                TaskField: \"Create request by API\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"02:30:00\",\r\n                id: 2131241241251217,\r\n                Issue: \"API Middleware\"\r\n            }, {\r\n                StartTime: \"12:20\",\r\n                EndTime: \"13:40\",\r\n                TaskField: \"Fixed buttons positions\",\r\n                status: \"warning\",\r\n                IsNesting: false,\r\n                TimerValue: \"01:20:00\",\r\n                id: 21312412551418,\r\n                NestingItems: null,\r\n                Issue: \"Amendment\"\r\n            },\r\n                {\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 1232132132419,\r\n                    TimerValue: \"01:30:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    Issue: \"Profit increase\"\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512420,\r\n                    TimerValue: \"03:20:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    Issue: \"Branding\"\r\n                }]\r\n        }, {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Set,October 3\",\r\n                SummaryStatus: \"ok\",\r\n                SummaryTime: \"08:00:00\",\r\n                id: 5\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                NestingItems: null,\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                TimerValue: \"01:00:00\",\r\n                id: 31232175895321,\r\n                Issue: \"Meeting\"\r\n            },\r\n                {\r\n                    StartTime: \"10:30\",\r\n                    EndTime: \"11:30\",\r\n                    TaskField: \"Meeting with QA\",\r\n                    status: \"ok\",\r\n                    NestingItems: null,\r\n                    IsNesting: false,\r\n                    TimerValue: \"01:00:00\",\r\n                    id: 76967845623522,\r\n                    Issue: \"QA\"\r\n                }, {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:55\",\r\n                    TaskField: \"Meeting with costumer\",\r\n                    status: \"danger\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:55:00\",\r\n                    id: 12312434256623,\r\n                    Issue: \"Customer\"\r\n                }\r\n            ]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el => {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                status: \"danger\",\r\n                IsNesting: false,\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                // if (Worklog.Issue === action.NewWorklog.Issue) {\r\n                //     console.log(Worklog)\r\n                // }\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0) {\r\n                    Worklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorkLogId) {\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                        }\r\n\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === action.WorkLogId) {\r\n                        Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                        Worklog.Issue = action.NewWorklog.Issue\r\n                        Worklog.TaskField = action.NewWorklog.TaskField\r\n                        Worklog.StartTime = action.NewWorklog.StartTime\r\n                        Worklog.EndTime = action.NewWorklog.EndTime\r\n                        Worklog.status = action.NewWorklog.status\r\n                    }\r\n                }\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog, ...Indexes} = FindWorklogById(action.WorklogId)\r\n            console.log(SoughtWorklog)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId) {\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                        }\r\n                    })\r\n                } else {\r\n                    FavoritesWorklog.TaskField = action.NewWorklog.TaskField\r\n                    FavoritesWorklog.Issue = action.NewWorklog.Issue\r\n                    FavoritesWorklog.StartTime = action.NewWorklog.StartTime\r\n                    FavoritesWorklog.EndTime = action.NewWorklog.EndTime\r\n                    FavoritesWorklog.TimerValue = action.NewWorklog.TimerValue\r\n                }\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId) {\r\n                                    NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                    NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                    NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                    NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                    NestingItem.Issue = action.NewWorklog.Issue\r\n                                }\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId) {\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                            }\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (WorkLogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG, WorkLogId, NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\nexport const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n    console.log(WorklogBlockData)\r\n    const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n    // if (SendNewMessageResult.resultCode === 0) {\r\n    //     dispatch(GetWorklogs(WorklogBlockId))\r\n    // }\r\n}\r\nexport type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport type TCalendars = {\r\n    January: TCalendar\r\n    February: TCalendar\r\n    March: TCalendar\r\n    April: TCalendar\r\n    May: TCalendar\r\n    June: TCalendar\r\n    July: TCalendar\r\n    August: TCalendar\r\n    September: TCalendar\r\n    October: TCalendar\r\n    November: TCalendar\r\n    December: TCalendar\r\n}\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\nexport type TCurrentDate = {\r\n    DayName : string\r\n    CurrentYear: number | string\r\n    CurrentMonth: keyof typeof DefaultState.Calendars\r\n    CurrentDay: number | string\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\nconst SET_ISSUES = \"ISSUES/SET_ISSUES\"\r\nconst SET_COMPLETED_ISSUES = \"ISSUES/SET_COMPLETED_ISSUES\"\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Meeting\", \"QA\",\r\n        \"API Middleware\", \"Amendment\", \"Branding\", \"Profit increase\", \"Project Design\",\"Customer\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue>\r\n    | ReturnType<TChangeIssue> | ReturnType<TSetIssues> | ReturnType<TSetCompletedIssues>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SET_ISSUES :{\r\n            return {\r\n                ...state,\r\n                Issues: action.Issues\r\n            }\r\n        }\r\n        case SET_COMPLETED_ISSUES :{\r\n            return {\r\n                ...state,\r\n                CompletedIssues: action.CompletedIssues\r\n            }\r\n        }\r\n\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issue\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssue\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  SetIssues = (Issues : string[]) =>{\r\n    return{type : SET_ISSUES, Issues } as const\r\n}\r\nexport type TSetIssues = typeof SetIssues\r\n\r\nexport const  SetCompletedIssues = (CompletedIssues : string[]) =>{\r\n    return{type : SET_COMPLETED_ISSUES, CompletedIssues } as const\r\n}\r\nexport type TSetCompletedIssues = typeof SetCompletedIssues\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport HS from \"./NavBar.module.css\"\r\nimport settings from \"../../assets/imgs/settings.svg\"\r\nimport FAQ from \"../../assets/imgs/second_icon.svg\"\r\nimport LogOutIcon from \"../../assets/imgs/door.svg\"\r\nimport AvatarIcon from \"../../assets/imgs/avatar.svg\"\r\n\r\n\r\nexport type TNavBarProps = {}\r\n\r\nconst NavBar: React.FC<TNavBarProps> = (props) => {\r\n    return (<div className={HS.navContainer}>\r\n        <div className={HS.navLinksContainer}>\r\n            <div className={HS.NavLinksPosition}>\r\n                <div className={HS.NavLinks}>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Home/All\">\r\n                            Home\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Issues/\">\r\n                            Issues\r\n                        </NavLink>\r\n                    </div>\r\n                  {/*  <div className={HS.item}>\r\n                        <NavLink to=\"/Filter/\">\r\n                            Filter\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Projects/\">\r\n                            Projects\r\n                        </NavLink>\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={HS.NavIconsContainer}>\r\n            <div className={HS.NavIcons}>\r\n                <div className={HS.SmallIcons}>\r\n                    <img src={settings} alt=\"settings\"/>\r\n                </div>\r\n             {/*   <div className={HS.SmallIcons}>\r\n                    <img src={FAQ} alt=\"info\"/>\r\n                </div>*/}\r\n                <div className={HS.SmallIcons}>\r\n                    <img src={LogOutIcon} alt=\"door1\"/>\r\n                </div>\r\n                <div className={HS.AvatarIcons}>\r\n                    <img className=\"\" src={AvatarIcon} alt=\"avatar_icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n\r\n}\r\n\r\n\r\nexport default NavBar","export const DifferenceInTime = (TimesArr = []) => {\r\n    let firstDate = TimesArr[0];\r\n    let secondDate = TimesArr[1];\r\n    let getDate = (string) => new Date(0, 0, 0, string.split(':')[0], string.split(':')[1]);\r\n    let different = (getDate(secondDate) - getDate(firstDate));\r\n    let differentRes, hours, minuts;\r\n    if (different > 0) {\r\n        differentRes = different;\r\n        hours = Math.floor((differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(((differentRes % 86400000) % 3600000) / 60000);\r\n    } else {\r\n        differentRes = Math.abs((getDate(firstDate) - getDate(secondDate)));\r\n        hours = Math.floor(24 - (differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(60 - ((differentRes % 86400000) % 3600000) / 60000);\r\n    }\r\n    if(minuts < 10 ){\r\n        minuts =  minuts + \"0\"\r\n    }\r\n    if (hours < 10) {\r\n        return \"0\" + hours + ':' + minuts + \":00\";\r\n    } else {\r\n        return hours + ':' + minuts + \":00\";\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    onHideMenu : ()=> void\r\n    OnDeleteModalOpen : (e : React.MouseEvent<HTMLElement>)=> void\r\n    SetDeleteModalParams : Dispatch<any>\r\n    ParentId ? : number\r\n    PlayingWorklog: TWorkLog | null\r\n    AddToFavorite : TAddToFavorite\r\n    WorklogId : number\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    Issue?: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    NestingIsShowing: boolean\r\n    BlockInfo?: TBlockInfo\r\n}\r\n\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e : React.MouseEvent<HTMLElement>)=>{\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog )\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)){\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId : props.WorklogId,\r\n                ParentId : props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () =>{\r\n        if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\"){\r\n            if(props.ParentId)  props.AddToFavorite(props.WorklogId)\r\n            else props.AddToFavorite(props.WorklogId)\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () =>{\r\n   if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\" ) {\r\n            let CurrentWorklog : TWorkLog = {\r\n                id: randomInteger(0, 10000),\r\n                TaskField: props.TaskField,\r\n                Issue: props.Issue,\r\n                StartTime: props.StartTime,\r\n                EndTime: props.EndTime,\r\n                NestingItems: props.NestingItems,\r\n                IsNesting: props.IsNesting,\r\n                status: props.status,\r\n                TimerValue: \"00:00:00\",\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from \"react\";\r\nimport DS from \"./DeleteConfirm.module.css\"\r\nimport ConfirmButton from \"../../assets/imgs/confirmButton.svg\"\r\nimport DeclineButton from \"../../assets/imgs/declineButton.svg\"\r\nimport MS from \"../ModalWindow/ModalWindow.module.css\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { green } from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen : boolean\r\n    onClose: ()=> void\r\n    WorkLogToDeleteId : number\r\n    DeleteWorklog : TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams : TDeleteModalParams | undefined\r\n    ComponentToDraw : TComponentToDraw\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal : React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = (e: React.MouseEvent<HTMLElement>) => {\r\n        if(props.DeleteModalParams){\r\n           props.ComponentToDraw === \"Worklogs\"\r\n               ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId,props.DeleteModalParams.ParentId)\r\n               : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n        if (!props.isOpen) return null\r\n\r\n        return (\r\n            <div className=\"DeleteConfirmModal\">\r\n                <div className={DS.modal}>\r\n                    <div className={DS.ModalTextContainer}>\r\n                        Are you sure you want to delete the worklog?\r\n                    </div>\r\n                    <div className={DS.NewWorklogControlButtonsContainer}>\r\n                        <div className={DS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor : \"pointer\"}}  fontSize=\"large\" />\r\n                               {/* <img className={DS.NewWorklogSubmitButtonSize}\r\n                                     src={ConfirmButton} alt={\"submit\"}/>*/}\r\n                            </div>\r\n                            <div className=\"modal-close\">\r\n                                <ClearIcon onClick={props.onClose}  style={{cursor : \"pointer\", marginLeft : \"50px\"}}  fontSize=\"large\" color=\"action\" />\r\n                        {/*        <img onClick={props.onClose} className={DS.NewWorklogControlButton}\r\n                                     src={DeclineButton} alt={\"decline\"}/>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={MS.bg} onClick={e => props.onClose}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog, TDeleteFromFavorites, TDeleteWorklog, TNestingItem,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange, TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\n\r\n\r\nexport type TNestingWorkLogProps = {\r\n    NestingItems?: Array<TNestingItem> | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    ParentId?: number\r\n    id : number\r\n    SetDeleteModalParams: any\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst NestingWorkLog: React.FC<TNestingWorkLogProps> = (props) => {\r\n\r\n    return (<div className=\"NestedItem\">\r\n        {props.NestingItems?.map(NestingItem=>{\r\n            return(\r\n                <WorkLog {...props}\r\n                        key={NestingItem.id}\r\n                         StartTime={NestingItem.StartTime}\r\n                         EndTime={NestingItem.EndTime}\r\n                         TaskField={NestingItem.TaskField}\r\n                         TimerValue={NestingItem.TimerValue}\r\n                         status={NestingItem.status}\r\n                         id={NestingItem.id}\r\n                         IsNesting={false}\r\n                         ParentId={props.id}\r\n                         Issue={NestingItem.Issue}\r\n                         DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n            )})\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {\r\n    TSetIsPlayingWorklogById,\r\n    TNestingItem,\r\n    TWorkLog,\r\n    TDeleteWorklog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TAddWorklog, TBlockInfo, TDeleteFromFavorites, CurrentDate\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogProps = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    Issue?: string | null\r\n    id: number\r\n    IsFavorites? : boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    ParentId?: number\r\n\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    SetDeleteModalParams: Dispatch<any>\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => {\r\n        SetNestingIsShowing(true)\r\n    }\r\n\r\n    const OnHideNestingWorklogs = () => {\r\n        SetNestingIsShowing(false)\r\n    }\r\n    const OnShowMenu = () => {\r\n        SetShowMenu(true)\r\n    }\r\n    const OnHideMenu = () => {\r\n        SetShowMenu(false)\r\n    }\r\n\r\n    const onPlayButtonClicked = () => {\r\n    if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n        || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n        props.SetIsPlayingWorklogById(true, props.id,props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    }\r\n    const onStopButtonClicked = () => {\r\n        props.SetIsPlayingWorklogById(false, props.id)\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"IsNesting\", \"NestingItems\", \"Issue\", \"ParentId\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return  (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                {\r\n                     <img className={props.PlayingWorklog?.id === props.id || ShowMenu? WLS.WorklogActiveBG :WLS.WorklogBG}\r\n                          src={WorklogActiveBG} alt=\"\"/>\r\n                }\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {props.IsNesting\r\n                            ? <div className={WLS.NestingButtonPose}>\r\n                                {NestingIsShowing\r\n                                    ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                        className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                    </div>\r\n\r\n                                    : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}> <span\r\n                                        className={WLS.TwwContentText}>\r\n                                {props.NestingItems?.length}\r\n                            </span>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            : props.StartTime && props.EndTime ? <div className={WLS.WorkTime}>\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.StartTime}\r\n                                    </div>\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.EndTime}\r\n                                    </div>\r\n                                </div>\r\n                                : <div> </div>}\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img src={props.status === \"ok\"\r\n                                ? CP_ok : props.status === \"warning\"\r\n                                    ? CP_warning : props.status === \"danger\"\r\n                                        ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.Issue}>\r\n                                {props.Issue}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div  className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu} className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreVerticalActive\r\n                                :WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       WorkLogToDeleteId={props.id} isOpen={props.DeleteModalIsOpen}\r\n                                       onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {ShowMenu && <WorkLogDropDown {...props}\r\n                                      onHideMenu={OnHideMenu}\r\n                                      WorklogId={props.id}\r\n                                      NestingIsShowing={NestingIsShowing}\r\n\r\n        />}\r\n\r\n        {NestingIsShowing &&  <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ProgressBar","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\n//import DownloadIcon from \"../../../assets/imgs/download.svg\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate,\r\n    TBlockInfo,\r\n    TSendWorklogBlockThunk,\r\n    TSendWorklogsData,\r\n    TSetWorklogStatus,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowTooltip} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    showTooltip: TShowTooltip\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n\r\n    const OnSendWorklogData = () : void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.showTooltip({\r\n                    text: \"Issue does not exist.\",\r\n                    status: \"danger\"\r\n                })\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.showTooltip({\r\n                    text: \"Please, enter the worklog name.\",\r\n                    status: \"warning\"\r\n                })\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.showTooltip({text: \"Something goes wrong\", status: \"danger\"})\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.showTooltip({text: \"your worklog successfully logged.\", status: \"ok\"})\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            let ObjToSend: TSendWorklogsData = {\r\n                WorkLogsBlocks: {\r\n                    BlockInfo: props.BlockInfo,\r\n                    Worklogs: props.Worklogs\r\n                }\r\n            }\r\n            props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.showTooltip({text: \"your worklog successfully logged.\", status: \"ok\"})\r\n        }\r\n        else {\r\n            props.showTooltip({text: \"Issue does not exist.\", status: \"danger\"})\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n                <div className={FS.DateTime}>\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n                </div>\r\n                {props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                    ? <BackupIcon style={{cursor : \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                onClick={OnSendWorklogData}\r\n                                className={FS.DownloadIcon}>\r\n                    </BackupIcon>\r\n\r\n                    : <BackupIcon color={\"disabled\"} fontSize={\"large\"}\r\n                                         className={FS.DownloadIcon}>\r\n                     </BackupIcon>\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {DifferenceInTime} from \"../../assets/secondary/DifferenceInTime\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo, TDeleteFromFavorites,\r\n    TDeleteWorklog,\r\n    TSendWorklogBlockThunk,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogStatus,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport {TShowTooltip} from \"../../App\";\r\n//import WorkLogTimeLine from \"./TimePicker/WorkLogTimeLine\";\r\n\r\nexport type TWorklogsBlockProps = {\r\n    BlockInfo?: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    AddToFavorite: TAddToFavorite\r\n    AddWorklog: TAddWorklog\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    showTooltip: TShowTooltip\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = (e: React.MouseEvent<HTMLElement>) => {\r\n        SetDeleteModalIsOpen(true)\r\n    }\r\n    const OnDeleteModalClose = () => {\r\n        SetDeleteModalIsOpen(false)\r\n    }\r\n\r\n    return (<>\r\n        {props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n        <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n            <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                         SummaryTime={props.BlockInfo.SummaryTime}\r\n                         SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                         Worklogs={props.Worklogs}\r\n                         SendWorklogBlockThunk={props.SendWorklogBlockThunk}\r\n                         BlockInfo={props.BlockInfo}\r\n                         showTooltip={props.showTooltip}\r\n                         SetWorklogStatus={props.SetWorklogStatus}\r\n            />\r\n        </div>\r\n        }\r\n\r\n        {\r\n                props[props.ComponentToDraw].map(el => {\r\n                    return <div key={el.id} className=\"worklog\">\r\n                        <WorkLog\r\n                            {...el}\r\n                            {...props}\r\n                            TimerValue={el.TimerValue\r\n                                ? el.TimerValue\r\n                                : el.StartTime && el.EndTime\r\n                                    ? DifferenceInTime([el.StartTime, el.EndTime])\r\n                                    : null}\r\n                            DeleteModalIsOpen={DeleteModalIsOpen}\r\n                            OnDeleteModalClose={OnDeleteModalClose}\r\n                            OnDeleteModalOpen={OnDeleteModalOpen}\r\n                            SetDeleteModalParams={SetDeleteModalParams}\r\n                            DeleteModalParams={DeleteModalParams}\r\n                            AddWorklog={props.AddWorklog}\r\n                            DeleteWorklog={props.DeleteWorklog }\r\n                            DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n                    </div>\r\n                })\r\n        }\r\n\r\n    </>)\r\n}\r\n\r\nexport default WorkLogsBlock","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite, SendWorklogBlockThunk,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TSendWorklogBlockThunk, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TShowTooltip} from \"../../App\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\nexport type TWorkLogsContainerOwnProps = {\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    showTooltip: TShowTooltip\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\ntype TDialogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorkLogsContainerOwnProps\r\n\r\nclass WorkLogsContainer extends React.Component<TDialogsContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {this.props.ComponentToDraw === \"Worklogs\"\r\n                    ? this.props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...this.props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...this.props}\r\n                            Worklogs={this.props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default compose(connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorkLogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog,\r\n    SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SendWorklogBlockThunk,SetWorklogStatus,DeleteFromFavorites\r\n}))\r\n    //@ts-ignore\r\n    (WorkLogsContainer)","\r\n\r\nexport const ToFullTime = (value) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n        let StartTime = ToFullTime(CurrentHours - hours) + \":\" + ToFullTime(CurrentMinutes - minutes)\r\n         return StartTime\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport TTStopButton from \"../../assets/imgs/TT-stop-button.svg\"\r\nimport TTPauseButton from \"../../assets/imgs/TT-pause-button.svg\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\n\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [WorklogInputValue,SetWorklogInputValue] = useState()\r\n    const [IssueInputValue,SetIssueInputValue] = useState()\r\n\r\n    const OnWorklogInputValueChange = (e) =>{\r\n        SetWorklogInputValue(e.target.value)\r\n    }\r\n    const OnIssueInputValueChange = (e) =>{\r\n        SetIssueInputValue(e.target.value)\r\n    }\r\n\r\n\r\n    const  toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer =() =>{\r\n        props.openWorklogChangeModal()\r\n        setIsActive(!isActive)\r\n        let TimerData = {\r\n            TimerValue : ToFullTime(hours) + \":\"+ ToFullTime(minutes) + \":\" +ToFullTime(seconds),\r\n            TimerIssue  : IssueInputValue ? IssueInputValue : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInputValue ? WorklogInputValue : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <input className={TS.TimerWorklogName}\r\n                   placeholder={\"add worklog\"}\r\n                   defaultValue={props.PlayingWorklog.TaskField}\r\n                   value={WorklogInputValue}\r\n                   onChange={OnWorklogInputValueChange}\r\n                   type=\"text\"/>\r\n\r\n            <input className={TS.TimerIssueName}\r\n                   placeholder={\"add issue\"}\r\n                  defaultValue={props.PlayingWorklog.Issue && props.PlayingWorklog.Issue}\r\n                   value={IssueInputValue}\r\n                   onChange={OnIssueInputValueChange}\r\n                   type=\"text\"/>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <img src={TTStopButton} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"controlButtons\" onClick={toggle}>\r\n                        {!isActive ?\r\n                            <img src={TTPauseButton} alt=\"\"/>\r\n                            : <PlayButton style={{width: \"50px\", height: \"50px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport StrokeVert from \"../../assets/imgs/stroke_vert.svg\"\r\nimport StrokeHoriz from \"../../assets/imgs/stroke_horiz.svg\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\n//import LongMenu from \"../DropDownMenu/DropDownMenu\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>{\r\n        props.AddWorklog()\r\n    }\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n            <div className={TTS.strokeVert}>\r\n                {/*<img src={StrokeVert} alt=\"stroke-vert\"/>*/}\r\n            </div>\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}>\r\n                            {/*<img src={StrokeHoriz} alt=\"\"/>*/}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React from \"react\";\r\nimport TTS from \"../TimeTracking/TimeTracking.module.css\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\";\r\nimport {TAddWorklog, TTimerData, TWorkLog, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsContainer from \"../WorkLogs/WorkLogsContainer\";\r\n\r\nexport type TFavoritesPageProps = {\r\n    FavoritesIsClicked: boolean\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    TimerData: TTimerData | undefined\r\n    openWorklogChangeModal: () => void\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog : TWorkLog | null\r\n    FavoritesWorklog : Array<TWorkLog>\r\n}\r\n\r\nconst FavoritesPage: React.FC<TFavoritesPageProps> = (props) => {\r\n    const AddNewFavoritesWorklog = () =>{\r\n       !props.PlayingWorklog &&  props.AddWorklog(undefined,true)\r\n    }\r\n    return (<div>\r\n        {\r\n            props.FavoritesWorklog.length > 0\r\n                    ? <div className=\"Favorites-Worklogs\">\r\n                        <WorkLogsContainer TimerData={props.TimerData}\r\n                                           openWorklogChangeModal={props.openWorklogChangeModal}\r\n                                           ComponentToDraw={\"FavoritesWorklogs\"}/>\r\n                    </div>\r\n\r\n                    : <div className={FS.NoFavoritesIssuesContainer}>\r\n\r\n                        <div className={FS.FavoritesText}>\r\n                            There is no favorites issues yet\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"60px\"}} className={TTS.NewWorklog}>\r\n                            <div  className={TTS.NewWorklogButtonPose}>\r\n                                <img onClick={AddNewFavoritesWorklog} className={TTS.NewWorklogButtonSize}\r\n                                     src={NewWorklogButton}\r\n                                     alt=\"new_worklog_button\"/>\r\n                            </div>\r\n\r\n                            <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n\r\n                                <div className={TTS.NewWorklogButtonDescription}>\r\n                                    new favorite\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n    </div>)\r\n}\r\n\r\nexport default FavoritesPage","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"../WorkLogs/WorkLogsBlock\";\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = {\r\n    CurrentDate: TCurrentDate\r\n}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(true)\r\n    }\r\n    const onHideDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(false)\r\n    }\r\n\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n            <div className={CS.CalendarContent}>\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {ShowDropDownCalendar && <>\r\n            <div className={CS.bg}\r\n                 onClick={onHideDropDownCalendar}/>\r\n            <DropDownCalendarContainer/>\r\n        </>}\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Calendar","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} >\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n                    <div>\r\n                        <NavLink onClick={props.OnFavoritesClick}  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"../All/All\";\r\nimport FavoritesButton from \"../Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n\r\n    return (<div className={AS.CalendarAndButtons}>\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +75 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +15 + \"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n       {/* <SliderLabels  value={value}  SetValue={SetValue} UpdateLabelsValue={UpdateLabelsValue}/>*/}\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect, Dispatch, SetStateAction} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport ConfirmButton from \"../../assets/imgs/confirmButton.svg\"\r\nimport DeclineButton from \"../../assets/imgs/declineButton.svg\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {\r\n    TChangeFavoritesWorklog,\r\n    TChangeWorklog,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { green } from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\n\r\nexport type TModalWindowProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    TimerData: TTimerData | undefined\r\n    ChangeWorklog: TChangeWorklog\r\n    WorklogToChange: TWorkLog | null\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n}\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowProps> = (props) => {\r\n\r\n    let [ModalNewWorklogName, SetModalNewWorklogName] = useState(\"\")\r\n    let [ModalNewIssueName, SetModalNewIssueName] = useState(\"\")\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n\r\n\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let date = new Date()\r\n    let CurrentTime = ToFullTime(date.getHours()) + \":\" + ToFullTime(date.getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && SetModalNewWorklogName(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && SetModalNewIssueName(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && SetModalNewWorklogName(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && SetModalNewIssueName(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalNewWorklogName.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalNewIssueName.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalNewWorklogName && ModalNewWorklogName.length > 0\r\n            && ModalNewIssueName\r\n            && ModalNewIssueName.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalNewWorklogName,\r\n                Issue: ModalNewIssueName,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if(NewWL.IsFavorites ){\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            SetModalNewWorklogName(\"\")\r\n            SetModalNewIssueName(\"\")\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n    const OnNewWorklogNameType = (e: React.FormEvent<HTMLInputElement>) => {\r\n        SetModalNewWorklogName(e.currentTarget.value)\r\n    }\r\n    const OnNewIssueNameType = (e: React.FormEvent<HTMLInputElement>) => {\r\n        SetModalNewIssueName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal();\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n    }\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n\r\n    return (\r\n        <div className=\"timer-modal\">\r\n            <div className={MS.modal}>\r\n                <div className={MS.ModalTitle}>New worklog</div>\r\n                <div className={MS.ModalSlider}>\r\n\r\n                    {ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                    <TimeSlider value={ModalTimeLineValues}\r\n                                disabled={false}\r\n                                step={10}\r\n                                SetTimerValue={SetModalTimeLineValues}\r\n                    />\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                <form name=\"NewWorklogContent\" action=\"\">\r\n                    <div className={MS.ModalTextFields}>\r\n                        <div className={MS.NewWorklogContentContainer}>\r\n\r\n                            <div className={MS.NewWorklogContentTitle}>Worklog name</div>\r\n\r\n                            <div className={MS.marginCheck}>\r\n                                <input\r\n                                    onChange={OnNewWorklogNameType}\r\n                                    value={ModalNewWorklogName}\r\n                                    className={MS.NewWorklogContentInput}\r\n                                    placeholder=\"Enter the worklog name\"\r\n                                    type=\"text\"/>\r\n                            </div>\r\n\r\n                            {NewWorklogNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog name</div>\r\n                            }\r\n\r\n                            <div style={{marginTop: \"37px\"}}>\r\n                                <div className={MS.NewWorklogContentTitle}>Issue</div>\r\n                                <div className={MS.marginCheck}>\r\n                                    <input\r\n                                        onChange={OnNewIssueNameType}\r\n                                        value={ModalNewIssueName}\r\n                                        className={MS.NewWorklogContentInput}\r\n                                        placeholder=\"Enter the issue name\"\r\n                                        type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n                            {NewIssueNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue name</div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={MS.NewWorklogControlButtonsContainer}>\r\n                        <div className={MS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor : \"pointer\"}}  fontSize=\"large\" />\r\n                               {/* <img className={MS.NewWorklogSubmitButtonSize}\r\n                                     src={ConfirmButton} alt={\"submit\"}/>*/}\r\n                            </div>\r\n                            <div className={MS.CloseButtonMargin}>\r\n                                <ClearIcon  style={{cursor : \"pointer\"}}  fontSize=\"large\" onClick={close} color=\"action\" />\r\n                                {/*<img onClick={close} className={MS.NewWorklogControlButton}*/}\r\n                                {/*     src={DeclineButton} alt={\"decline\"}/>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeWorklogModal\r\n\r\n","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n// import {withRouter} from 'react-router-dom'\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange,ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog : TChangeFavoritesWorklog\r\n}\r\ntype TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nclass ChangeWorklogModalContainer extends React.Component<TModalWindowContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ChangeWorklogModal closeWorklogChangeModal={this.props.closeWorklogChangeModal}\r\n                                WorklogChangeModalIsOpen={this.props.WorklogChangeModalIsOpen}\r\n                                SetIsPlayingWorklogById={this.props.SetIsPlayingWorklogById}\r\n                                PlayingWorklog={this.props.PlayingWorklog}\r\n                                TimerData={this.props.TimerData}\r\n                                WorklogToChange={this.props.WorklogToChange}\r\n                                ChangeWorklog={this.props.ChangeWorklog}\r\n                                SetTimerData={this.props.SetTimerData}\r\n                                SetWorklogToChange={this.props.SetWorklogToChange}\r\n                                ChangeFavoritesWorklog={this.props.ChangeFavoritesWorklog}\r\n\r\n            />\r\n            )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default compose(connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog,ChangeFavoritesWorklog\r\n}))(ChangeWorklogModalContainer)","import React, {useState} from \"react\";\r\nimport LS from \"./LoginModal.module.css\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 300,\r\n        },\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst LoginModal = () => {\r\n    const classes = useStyles();\r\n    let [LoginFieldValue, SetLoginFieldValue] = useState(\"\")\r\n    let [PasswordFieldValue, SetPasswordFieldValue] = useState(\"\")\r\n    let [ErrorText,SetErrorText] = useState<string>()\r\n\r\n    const onLoginInputChange = (e: any) => {\r\n            SetLoginFieldValue(e.target.value)\r\n    }\r\n\r\n    const onPasswordInputChange = (e: any) => {\r\n            SetPasswordFieldValue(e.target.value)\r\n    }\r\n\r\n    const LoginHandler = () => {\r\n        if(LoginFieldValue === \"test\" && PasswordFieldValue === \"test\"){\r\n            localStorage.setItem(\"IsAuth\",\"true\")\r\n            SetErrorText(undefined)\r\n            SetLoginFieldValue(\"\")\r\n            SetPasswordFieldValue(\"\")\r\n            window.location.reload()\r\n        }\r\n        else {\r\n            SetErrorText(\"Incorrect login or password \")\r\n\r\n        }\r\n    }\r\n\r\n    return (<div className=\"login-modal\">\r\n            <div className={LS.modal}>\r\n                <form className={classes.root} autoComplete=\"off\">\r\n                    <div className={LS.InputsContainer}>\r\n                        <div className={LS.LoginContainer}>\r\n\r\n                            <TextField\r\n                                onChange={onLoginInputChange}\r\n                                error={!!ErrorText}\r\n                                id=\"standard-error-helper-text\"\r\n                                label=\"login\"\r\n                                value={LoginFieldValue}\r\n                                placeholder=\"Please, enter the login\"\r\n                                helperText={ErrorText}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <div className={LS.PasswordContainer}>\r\n\r\n                            <TextField\r\n                                onChange={onPasswordInputChange}\r\n                                error={!!ErrorText}\r\n                                type={\"password\"}\r\n                                id=\"standard-error-helper-text\"\r\n                                label=\"password\"\r\n                                value={PasswordFieldValue}\r\n                                placeholder=\"Please, enter the password\"\r\n                                helperText={ErrorText}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"45px\", paddingLeft: \"110px\"}}>\r\n                            <Button style={{width : \"120px\"}} onClick={LoginHandler} variant=\"outlined\" color=\"secondary\">\r\n                                Login\r\n                            </Button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={LS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginModal","import React from \"react\";\r\nimport TS from \"./Tooltip.module.css\"\r\n//import TooltipCloseButton from \"../../assets/imgs/Tooltip_Close_button.svg\"\r\nimport {TTooltipInfo} from \"../../App\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport type TTooltipProps = {\r\n    TooltipInfo : TTooltipInfo| undefined\r\n    hideTooltil : () => void\r\n    TooltipIsShowed : boolean\r\n}\r\n\r\nconst Tooltip: React.FC<TTooltipProps> = (props) => {\r\n\r\n    return <>\r\n        {props.TooltipIsShowed\r\n            ? <div className={TS.TooltipContainer}>\r\n                <div className={TS.TooltipContent}>\r\n                    <div className={TS.StatusAndCloseButtonContainer}>\r\n                        <div className={props.TooltipInfo?.status === \"ok\"\r\n                            ? TS.TooltipStatusOk\r\n                            : props.TooltipInfo?.status === \"warning\"\r\n                                ? TS.TooltipStatusWarning\r\n                                : props.TooltipInfo?.status === \"danger\"\r\n                                    ? TS.TooltipStatusDanger\r\n                                    : undefined}>\r\n\r\n                        </div>\r\n\r\n                        <div onClick={props.hideTooltil} className={TS.TooltipCloseButtonContainer}>\r\n                            <CloseIcon fontSize={\"inherit\"} color={\"inherit\"} > </CloseIcon>\r\n                            {/*<img src={TooltipCloseButton} alt=\"tooltip-close\"/>*/}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={TS.TooltipTextContainer}>\r\n                        {props.TooltipInfo?.text}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            : undefined\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Tooltip","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value : string\r\n    classes : {AddIssueInput : string}\r\n    handler : (event: React.ChangeEvent<HTMLInputElement>)=>void\r\n    onSubmit : ()=> void\r\n    onCancel : () => void\r\n    SubmitButtonText : string\r\n    CancelButtonText : string\r\n}\r\n\r\nconst CustomListInput : React.FC<TCustonListInputProps> = (props) =>{\r\n    return <div className={props.classes.AddIssueInput}>\r\n        <TextField\r\n            id=\"filled-multiline-flexible\"\r\n            label=\"New issue\"\r\n            multiline\r\n            value={props.value}\r\n            onChange={props.handler}\r\n            placeholder=\"Please enter the new issue\"\r\n        />\r\n        <Grid style={{paddingTop : \"10px\",paddingLeft :\"15%\"}} container>\r\n            <Grid item >\r\n                <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.SubmitButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n                <Button onClick={props.onCancel} style={{marginLeft : \"33%\"}} color={\"inherit\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.CancelButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default CustomListInput","import React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CustomListInput from \"./CustomListInput\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    classes :any\r\n}\r\n\r\nconst IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const [EditInputIsShowing, SetEditInputIsShowing] = useState(false)\r\n    const [EditInputValue, SetEditInputValue] = useState(\"\")\r\n\r\n    const OnEditInoutValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        SetEditInputValue(event.target.value)\r\n    }\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue)\r\n        SetEditInputIsShowing(false)\r\n        SetEditInputValue(\"\")\r\n    }\r\n    const onCancelInput = () =>{\r\n        SetEditInputIsShowing(false)\r\n    }\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputIsShowing\r\n                    ? <CustomListInput classes={props.classes} value={EditInputValue} onSubmit={OnSaveNewValue}\r\n                                        handler={OnEditInoutValueChange} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container>\r\n\r\n                        <Grid item xs={12} sm={10}>\r\n                            <ListItem role=\"listitem\" button\r\n                                //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} sm={2}>\r\n\r\n                            <Grid style={{marginTop: \"11px\"}} container>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item sm={4}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => SetEditInputIsShowing(true)}\r\n                                                      style={{color: blue[400], cursor: \"pointer\", marginLeft: \"40%\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid item sm={4}>\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"40%\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"90%\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IssueListItem","import React, {Dispatch, useState} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport IssueListItem from \"./IssueListItem\";\r\nimport CustomListInput from \"./CustomListInput\";\r\n\r\n\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    classes : any\r\n    checked : string[]\r\n    setChecked : Dispatch<any>\r\n    AddIssue : TAddIssue\r\n    DeleteIssue : TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nconst IssuesList : React.FC<TIssuesListProps> = (props) =>{\r\n\r\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\r\n    const [AddNewIssueInputValue, SetAddNewIssueInputValue] = useState<string>(\"\")\r\n\r\n\r\n\r\n     const not = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) === -1);\r\n    }\r\n\r\n    const  intersection = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) !== -1);\r\n    }\r\n\r\n\r\n    const  union = (a: string[], b: string[]) => {\r\n        return [...a, ...not(b, a)];\r\n    }\r\n\r\n    const handleToggle = (value: string) => () => {\r\n        const currentIndex = props.checked.indexOf(value);\r\n        const newChecked = [...props.checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        props.setChecked(newChecked);\r\n    }\r\n\r\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length;\r\n\r\n    const handleToggleAll = (items: string[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            props.setChecked(not(props.checked, items));\r\n        } else {\r\n            props.setChecked(union(props.checked, items));\r\n        }\r\n    }\r\n\r\n    const onShowAddIssueInput = () => {\r\n        SetAddIssueOpened(true)\r\n    }\r\n\r\n    const onAddNewIssueInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        SetAddNewIssueInputValue(event.target.value)\r\n    }\r\n\r\n    const OnConfirmAddNewIssue = () => {\r\n        SetAddNewIssueInputValue(\"\")\r\n        SetAddIssueOpened(false)\r\n        props.AddIssue(AddNewIssueInputValue)\r\n    }\r\n    const OnCancelAddNewIssue = () => {\r\n        SetAddNewIssueInputValue(\"\")\r\n        SetAddIssueOpened(false)\r\n    }\r\n\r\n    return  <Card>\r\n        <Grid container>\r\n            <Grid item sm={9}>\r\n                <CardHeader\r\n                    className={props.classes.cardHeader}\r\n                    avatar={\r\n                        <Checkbox\r\n                            onClick={handleToggleAll(props.items)}\r\n                            checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\r\n                            indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\r\n                            disabled={props.items.length === 0}\r\n                            inputProps={{'aria-label': 'all items selected'}}\r\n                        />\r\n                    }\r\n                    title={props.title}\r\n                    subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\r\n                />\r\n            </Grid>\r\n            <Grid item sm={3}>\r\n                {\r\n                    props.el === \"Issue\"\r\n                    && <div style={{paddingLeft: \"35%\", paddingTop: \"7%\"}}>\r\n                        <Tooltip title=\"Create new issue\" arrow placement=\"top\">\r\n                            <Button onClick={onShowAddIssueInput} size=\"small\" color=\"secondary\"\r\n                                    variant={\"outlined\"} startIcon={<AddOutlinedIcon/>}>\r\n                                add issue\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                }\r\n            </Grid>\r\n\r\n        </Grid>\r\n        {\r\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput value={AddNewIssueInputValue} classes={props.classes}\r\n                                                                       handler={onAddNewIssueInputChange} onSubmit={OnConfirmAddNewIssue}\r\n                                                                       onCancel={OnCancelAddNewIssue} SubmitButtonText={\"Add\"}\r\n                                                                       CancelButtonText={\"cancel\"}/>\r\n        }\r\n\r\n        <Divider/>\r\n\r\n        <List className={props.classes.list} dense component=\"div\" role=\"list\">\r\n            {props.items.map((value: string) => {\r\n                return  (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\r\n                                        handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\r\n                                        ChangeIssue={props.ChangeIssue} classes={props.classes}/>)\r\n\r\n            })}\r\n            <ListItem/>\r\n\r\n        </List>\r\n    </Card>\r\n}\r\n\r\nexport default IssuesList","import React, {useState} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Data/IssuesReducer\";\r\nimport IssuesList from \"./IssuesList\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"6%\",\r\n           // backgroundColor: \"#dadeea\"\r\n        },\r\n        cardHeader: {\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        list: {\r\n            width: window.innerWidth / 2 - 80 - window.innerWidth * 0.03,\r\n            height: window.innerHeight - 300 - window.innerHeight * 0.04,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        },\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n                width: '40ch'\r\n            },\r\n            paddingLeft: \"30%\",\r\n            paddingBottom: \"10px\"\r\n        }\r\n    }),\r\n);\r\n\r\nfunction not(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues : TSetIssues\r\n    SetCompletedIssues : TSetCompletedIssues\r\n}\r\n\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState<string[]>([]);\r\n\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked));\r\n        props.SetIssues(not(props.Issues, IssuesChecked));\r\n        setChecked(not(checked, IssuesChecked));\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked));\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked));\r\n        setChecked(not(checked, CompletedIssuesChecked));\r\n    }\r\n\r\n    return (\r\n        <div style={{height : window.innerHeight - 83}}>\r\n            <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n                <Grid item>\r\n                    <IssuesList title={\"Issues\"} items={props.Issues}\r\n                                el={\"Issue\"} classes={classes}\r\n                                DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                                checked={checked} setChecked={setChecked}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedIssues}\r\n                            disabled={IssuesChecked.length === 0}\r\n                            aria-label=\"move selected right\"\r\n                            color={\"secondary\"}\r\n                        >\r\n                            &gt;\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedCompletedIssues}\r\n                            disabled={CompletedIssuesChecked.length === 0}\r\n                            aria-label=\"move selected left\"\r\n                            color={\"primary\"}\r\n                        >\r\n                            &lt;\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                                el={\"CompletedIssue\"} setChecked={setChecked}\r\n                                checked={checked} AddIssue={props.AddIssue}\r\n                                DeleteIssue={props.DeleteIssue} classes={classes}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Issues","import React, {useState} from 'react';\nimport AS from \"./App.module.css\"\nimport NavBar from \"./Components/NavBar/NavBar\";\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport GoogleCalendar from \"./Components/GoogleCalendar/GoogleCalendar\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport FavoritesPage from \"./Components/Favorites/FavoritesPage\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport ChangeWorklogModalContainer from \"./Components/ModalWindow/ChangeWorklogModalContainer\";\nimport LoginModal from \"./Components/LoginPage/LoginModal\";\nimport Tooltip from \"./Components/Tooltip/Tooltip\";\nimport {\n    ChangeIssue,\n    AddIssue,\n    DeleteIssue,\n    SetIssues,\n    SetCompletedIssues,\n    TAddIssue,\n    TChangeIssue,\n    TDeleteIssue,\n    TSetIssues, TSetCompletedIssues\n} from \"./Data/IssuesReducer\";\nimport Issues from \"./Components/Issues/Issues\";\n\n\nexport type TAppOwnProps = {}\n\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    Issues : Array<string>\n    CompletedIssues : Array<string>\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue : TAddIssue\n    DeleteIssue : TDeleteIssue\n    ChangeIssue : TChangeIssue\n    SetIssues : TSetIssues\n    SetCompletedIssues : TSetCompletedIssues\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\nexport type TTooltipInfo = {\n    text: string\n    status: \"ok\" | \"warning\" | \"danger\"\n}\nexport type TShowTooltip = (TooltipInfo: TTooltipInfo) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n\n    let [WorklogChangeModalIsOpen, SetWorklogChangeModalIsOpen] = useState(false)\n    let [FavoritesIsClicked, SetFavoritesIsClicked] = useState(false)\n    let [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    let [TooltipIsShowed, SetTooltipIsShowed] = useState(false)\n    let [TooltipInfo, SetTooltipInfo] = useState<TTooltipInfo>()\n\n    const OnSetTimerData = (TimerData: TTimerData) => {\n        SetTimerData(TimerData)\n    }\n\n    const OnFavoritesClick = () => {\n        SetFavoritesIsClicked(true)\n    }\n    const OnAllClicked = () => {\n        SetFavoritesIsClicked(false)\n    }\n\n    const openWorklogChangeModal = () => {\n        SetWorklogChangeModalIsOpen(true)\n    }\n\n    const closeWorklogChangeModal = () => {\n        SetWorklogChangeModalIsOpen(false)\n    }\n\n    const showTooltip = (TooltipInfo: TTooltipInfo) => {\n        TooltipIsShowed && SetTooltipIsShowed(false)\n        SetTooltipInfo(TooltipInfo)\n        SetTooltipIsShowed(true)\n    }\n\n    const hideTooltip = () => [\n        SetTooltipIsShowed(false)\n    ]\n\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                    <div className=\"MainAppWrapper\">\n                        <NavBar/>\n\n                        <Route exact path='/Issues'\n                               render={() => <Issues Issues={props.Issues}\n                                                     AddIssue={props.AddIssue}\n                                                     ChangeIssue={props.ChangeIssue}\n                                                     DeleteIssue={props.DeleteIssue}\n                                                     CompletedIssues={props.CompletedIssues}\n                                                     SetIssues={props.SetIssues}\n                                                     SetCompletedIssues={props.SetCompletedIssues}\n                               />}/>\n\n                        <Route  path='/Home'\n                               render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                   <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked}\n                                                              OnAllClicked={OnAllClicked}\n                                                              OnFavoritesClick={OnFavoritesClick}\n                                                              CurrentDate={props.CurrentDate}\n                                   />\n                               </div>}/>\n\n\n                        <div className={AS.MainWrapper}>\n                            <div className=\"WorklogsLayout\">\n\n                                <Route exact path='/Home/All'\n                                       render={() => <div className=\"WorkLogBlock\">\n                                           <div className=\"Worklogs\">\n                                               <WorkLogsContainer TimerData={TimerData}\n                                                                  openWorklogChangeModal={openWorklogChangeModal}\n                                                                  ComponentToDraw={\"Worklogs\"}\n                                                                  showTooltip={showTooltip}\n                                                                  closeWorklogChangeModal={closeWorklogChangeModal}\n                                                                  SetTimerData={SetTimerData}\n                                                                  WorklogChangeModalIsOpen={WorklogChangeModalIsOpen}\n                                               />\n                                           </div>\n                                       </div>\n                                       }/>\n\n                                <Route exact path='/Home/Favorites'\n                                       render={() => <FavoritesPage FavoritesIsClicked={FavoritesIsClicked}\n                                                                    WorklogsBlocks={props.WorklogsBlocks}\n                                                                    openWorklogChangeModal={openWorklogChangeModal}\n                                                                    TimerData={TimerData}\n                                                                    AddWorklog={props.AddWorklog}\n                                                                    PlayingWorklog={props.PlayingWorklog}\n                                                                    FavoritesWorklog={props.FavoritesWorklog}\n                                       />}/>\n\n                            </div>\n                            <Route  path='/Home'\n                                   render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                       <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                     FavoritesIsClicked={FavoritesIsClicked}\n                                                     SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                     AddWorklog={props.AddWorklog}\n                                                     SetTimerData={OnSetTimerData}\n                                                     openWorklogChangeModal={openWorklogChangeModal}\n                                                     ChangeWorklog={props.ChangeWorklog}/>\n                                       {/*   <div className=\"GoogleCalendar\">\n                                    <GoogleCalendar/>\n                                </div>*/}\n                                   </div>}/>\n                        </div>\n                        <ChangeWorklogModalContainer\n                            SetTimerData={SetTimerData}\n                            WorklogChangeModalIsOpen={WorklogChangeModalIsOpen}\n                            closeWorklogChangeModal={() => closeWorklogChangeModal()}\n                            TimerData={TimerData}\n                        />\n\n                        <Tooltip TooltipIsShowed={TooltipIsShowed} hideTooltil={hideTooltip} TooltipInfo={TooltipInfo}/>\n                    </div>\n\n                </>\n\n                : <LoginModal/>\n\n            }\n        </div>\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues : state.IssuesData.Issues,\n    CompletedIssues : state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById,\n        ChangeWorklog, AddWorklog, AddToFavorite,\n        ChangeIssue,AddIssue,DeleteIssue,SetCompletedIssues,SetIssues\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__1cFI_\",\"RightLabel\":\"TimeSlider_RightLabel__itdny\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__1Hskt\",\"LabelValue\":\"TimeSlider_LabelValue__3snvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"LoginModal_modal__xh2O6\",\"bg\":\"LoginModal_bg__2rem_\",\"InputsContainer\":\"LoginModal_InputsContainer__BSJ44\",\"LoginContainer\":\"LoginModal_LoginContainer__3G6Hk\",\"PasswordContainer\":\"LoginModal_PasswordContainer__2mRxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"DeleteConfirm_modal__NP0te\",\"bg\":\"DeleteConfirm_bg__2icmH\",\"ModalTextContainer\":\"DeleteConfirm_ModalTextContainer__2-EVO\",\"NewWorklogControlButtonsContainer\":\"DeleteConfirm_NewWorklogControlButtonsContainer__2Rt5s\",\"NewWorklogControlButtons\":\"DeleteConfirm_NewWorklogControlButtons__2JHii\",\"NewWorklogSubmitButtonSize\":\"DeleteConfirm_NewWorklogSubmitButtonSize__1d3dd\",\"NewWorklogControlButton\":\"DeleteConfirm_NewWorklogControlButton__3JXRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__2raAa\",\"AllButtonBg\":\"All_AllButtonBg__18uYw\",\"item\":\"All_item__2aEna\",\"ActiveItem\":\"All_ActiveItem__129Oh\"};"],"sourceRoot":""}