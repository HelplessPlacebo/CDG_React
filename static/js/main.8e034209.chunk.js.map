{"version":3,"sources":["assets/imgs/avatar.jpg","Components/DeleteConfirmModal/DeleteConfirm.module.css","Components/Timer/Timer.module.css","Components/CalendarAndControllButtons/All/All.module.css","assets/imgs/new_worklog_button.svg","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg","Components/NavBar/NavBar.module.css","Components/WorkLogs/WorkLog.module.css","assets/utils/ValidartorsComponents/ElementsValidators.module.css","Components/Calendar/Calendar.module.css","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","Components/TimeTracking/TimeTracking.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/calendar.svg","Components/Auth/AuthModal.module.css","Components/ChangeWorklogModal/ModalWindow.module.css","Components/CalendarAndControllButtons/Favorites/Favorites.module.css","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","assets/secondary/GetCurrentDate.js","Data/WorkLogsReducer.ts","Data/CalendarReducer.ts","Data/IssuesReducer.ts","Data/redux-store.ts","Components/NavBar/MaterialNavBar.tsx","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/CustomizedButton/CustomizedButton.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","assets/secondary/CreateSnackbarOptions.ts","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/secondary/CalculateTime.js","Components/ChangeWorklogModal/CustomInput.tsx","Components/Issues/IssuesSelectInput.tsx","Components/hooks/useInput.ts","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/CalendarAndControllButtons/Favorites/FavoritesPage.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/CalendarAndControllButtons/All/All.tsx","Components/CalendarAndControllButtons/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueLeftLabel.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ChangeWorklogModal/TimeSlider/TimeSlider.tsx","Components/ChangeWorklogModal/ChangeWorklogModal.tsx","Components/ChangeWorklogModal/ChangeWorklogModalContainer.tsx","Components/Issues/CustomListInput.tsx","Components/Issues/IssueListItem.tsx","Components/Issues/IssuesList.tsx","Components/Issues/Issues.tsx","Components/hooks/useBooleanState.ts","assets/utils/ValidartorsComponents/ElementsValidators.js","assets/utils/validators.js","Components/Auth/SignIn/SignInForm.tsx","Components/Auth/SignIn/SignIn.tsx","Components/Auth/SignUp/SignUpForm.tsx","Components/Auth/SignUp/SignUp.tsx","Components/Auth/AuthPage.tsx","Components/SnackBar/SnackBar.tsx","Components/UserProfile/UserProfileForm.tsx","Components/UserProfile/ModalUserProfile.tsx","App.tsx","index.tsx","App.module.css","Components/ChangeWorklogModal/TimeSlider/TimeSlider.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css"],"names":["module","exports","days","months","GetCurrentDate","date","Date","CurrentYear","getFullYear","CurrentMonth","getMonth","CurrentDay","getDate","DayName","getDay","DEL_WORKLOG","CurrentDate","randomInteger","min","max","rand","Math","random","floor","DefaultState","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","id","Worklogs","StartTime","EndTime","TaskField","status","NestingItems","TimerValue","Issue","IsFavorites","PlayingWorklog","WorklogToChange","FavoritesWorklogs","AddWorklog","NewWorklog","type","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","SetWorklogToChange","undefined","AddToFavorite","WorklogId","WorklogsReducer","state","action","GetWorklogsBlockCopy","JSON","parse","stringify","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","map","WorklogBlock","Index","Worklog","WLIndex","length","NestingItem","NestingIndex","EmptyWorklog","ParentId","WorklogToCreate","some","WBL","unshift","WB","filter","FWorklog","Object","assign","push","CNestingItem","FNestingItem","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","DelParentId","DelWorklogId","WL","WBLtrue","options","target","FavoritesWorklog","FavoritesWorklogsCopy","Nest","RandomStatus","arr","RangeError","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","Signature","DayNumber","DayStatus","n","p","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CalendarReducer","Day","Issues","CompletedIssues","IssuesReducer","GetIssuesCopy","From","CompletedIssue","IssuesCopy","findIndex","value","OldIssue","NewIssue","reducers","combineReducers","form","formReducer","CalendarData","WorklogsData","WorkLogsReducer","IssuesData","store","createStore","applyMiddleware","thunkMiddleWare","window","useStyles","makeStyles","theme","createStyles","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","sectionDesktop","sectionMobile","React","memo","props","classes","useState","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMobileMenuOpen","Boolean","LogOut","localStorage","setItem","onUnAuth","renderMobileMenu","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","IconButton","color","onClick","OpenUserProfile","aria-label","aria-controls","aria-haspopup","Avatar","alt","src","avatar","className","AppBar","position","Toolbar","HS","NavLinks","item","to","Tooltip","arrow","placement","edge","event","currentTarget","LineStroke","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","ContentContainer","ComponentToDraw","CurrentWorklog","WorklogInfo","ContainerEl","ShowSnackBar","message","severity","e","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","findColorObject","colorName","green","purple","grey","red","blue","teal","common","yellow","deepOrange","orange","blueGrey","cyan","indigo","CustomizedButton","margin","width","bgColor","ColorButton","withStyles","root","fontColor","palette","getContrastText","backgroundColor","fontSize","borderRadius","Button","disabled","startIcon","variant","text","DeleteWorklogConfirmModal","isOpen","DS","modal","ModalTextContainer","NewWorklogControlButtonsContainer","NewWorklogControlButtons","DeleteModalParams","DeleteWorklog","DeleteFromFavorites","MS","bg","NestingWorkLog","key","WorkLog","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","style","transitionTimingFunction","transitionDuration","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","Fragment","height","Bar","now","CreateSnackBarOptions","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","cursor","SetWorklogStatus","every","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","toString","WorklogInfoContainer","el","connect","WorklogsBlocks","paddingTop","ToFullTime","hours","Numbered","Number","parseInt","CalculateNewStartTime","CurrentTime","minutes","split","CurrentHours","CurrentMinutes","CustomInput","TextField","onChange","label","placeholder","multiline","IssuesSelectInput","formControl","minWidth","Item","FormControl","InputLabel","htmlFor","Select","native","defaultValue","useInput","initialValue","setValue","bind","clear","forceUpdate","val","Timer","substr","seconds","setSeconds","setMinutes","setHours","isActive","setIsActive","WorklogInput","IssueInput","useEffect","interval","clearInterval","setInterval","TS","TimeRContainer","marginTop","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","paddingLeft","TimeTracking","TTS","TTLayout","strokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","FavoritesPage","closeWorklogChangeModal","WorklogChangeModalIsOpen","NoFavoritesIssuesContainer","FavoritesText","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","MonthName","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","StateCopy","getState","WorklogsBlockToBeScrolled","Month","document","getElementById","SearchWorklogBlock","SetClickedMonthDay","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","DropDownProgressStatus","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","this","Component","compose","Calendar","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","FavoritesTextContainer","OnFavoritesClick","pink","CalendarAndControlButtons","AS","CalendarAndButtons","RightLabel","LeftLabel","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","querySelectorAll","SliderWidth","getComputedStyle","SliderPoseStart","SliderPoseEnd","LeftMargin","RightMargin","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","step","ChangeWorklogModal","ModalWorklogInput","ModalIssueInput","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","EmptyWorklogTimerEndHours","getHours","getMinutes","EmptyWorklogTimeValues","close","preventDefault","ModalTitle","ModalSlider","ModalTextFields","NewWorklogContentContainer","ModalInputError","Obj","NewWL","ChangeFavoritesWorklog","CloseButtonMargin","CustomListInput","AddIssueInput","Grid","innerWidth","container","onSubmit","size","SubmitButtonText","onCancel","marginLeft","CancelButtonText","IssueListItem","EditInputIsShowing","SetEditInputIsShowing","EditInputValue","labelId","ChangeIssue","sm","ListItem","role","button","handleToggle","ListItemIcon","Checkbox","checked","indexOf","tabIndex","disableRipple","inputProps","ListItemText","primary","DeleteIssue","IssuesList","items","AddIssueOpened","SetAddIssueOpened","AddNewIssueInput","not","a","b","currentIndex","newChecked","splice","setChecked","numberOfChecked","Card","CardHeader","cardHeader","indeterminate","subheader","AddIssue","Divider","List","list","dense","component","padding","background","paper","overflow","paddingBottom","intersection","IssuesChecked","CompletedIssuesChecked","alignItems","direction","SetCompletedIssues","concat","SetIssues","useBooleanState","isDisplayed","SetIsOpen","Show","Hide","FormInput","input","meta","error","touched","EVS","CreateField","validators","Field","validate","required","Email","test","PassMinLength","SignInFormRedux","reduxForm","paddingRight","handleSubmit","fontWeight","fullWidth","helperText","justify","ComponentIsSignUp","SignIn","history","useHistory","formData","email","password","onAuth","replace","SignUpFormRedux","ComponentIsSignIn","SignUp","console","log","AuthPage","SetComponentToDraw","Alert","elevation","SnackBar","Snackbar","isShowing","autoHideDuration","HideDuration","onHide","maxWidth","FileInput","GridItem","UserProfileForm","NewUserNameInput","NewUserKLastNameInput","accept","multiple","Transition","forwardRef","ref","Slide","ModalUserProfile","Dialog","IsOpen","TransitionComponent","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","setIsAuth","UserProfileIsShowing","SnackBarIsShowing","SetSnackBarIsShowing","SnackBarOptions","SetSnackBarOptions","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","TImeTracking_and_Calendar","reason","ReactDOM","basename","process","AppContainer"],"mappings":"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","file":"static/js/main.8e034209.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.ca981f53.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"DeleteConfirm_modal__NP0te\",\"bg\":\"DeleteConfirm_bg__2icmH\",\"ModalTextContainer\":\"DeleteConfirm_ModalTextContainer__2-EVO\",\"NewWorklogControlButtonsContainer\":\"DeleteConfirm_NewWorklogControlButtonsContainer__2Rt5s\",\"NewWorklogControlButtons\":\"DeleteConfirm_NewWorklogControlButtons__2JHii\",\"NewWorklogSubmitButtonSize\":\"DeleteConfirm_NewWorklogSubmitButtonSize__1d3dd\",\"NewWorklogControlButton\":\"DeleteConfirm_NewWorklogControlButton__3JXRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__1N-3-\",\"AllButtonBg\":\"All_AllButtonBg__3aUhh\",\"item\":\"All_item__IH3JR\",\"ActiveItem\":\"All_ActiveItem__2XSWr\"};","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLinks\":\"NavBar_NavLinks__22adz\",\"item\":\"NavBar_item__fYm3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"Issue\":\"WorkLog_Issue__34BO9\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"ElementsValidators_formControl__wFZV5\",\"error\":\"ElementsValidators_error__1Akph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"AuthModal_modal__2EZbn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__2RI0C\",\"bg\":\"ModalWindow_bg__8X2Z5\",\"ModalTitle\":\"ModalWindow_ModalTitle__3-dof\",\"ModalSlider\":\"ModalWindow_ModalSlider__3oV3v\",\"ModalTextFields\":\"ModalWindow_ModalTextFields__3ZTaV\",\"NewWorklogContentContainer\":\"ModalWindow_NewWorklogContentContainer__2fUp5\",\"NewWorklogContentTitle\":\"ModalWindow_NewWorklogContentTitle__3PjFx\",\"ModalInputError\":\"ModalWindow_ModalInputError__2Aqa5\",\"NewWorklogContentInput\":\"ModalWindow_NewWorklogContentInput__35xPA\",\"NewWorklogControlButtonsContainer\":\"ModalWindow_NewWorklogControlButtonsContainer__2gc4P\",\"NewWorklogControlButtons\":\"ModalWindow_NewWorklogControlButtons__1dXL9\",\"NewWorklogControlButton\":\"ModalWindow_NewWorklogControlButton__2ig_v\",\"CloseButtonMargin\":\"ModalWindow_CloseButtonMargin__zOi3Y\",\"NewWorklogSubmitButton\":\"ModalWindow_NewWorklogSubmitButton__RioTJ\",\"Err\":\"ModalWindow_Err__UprFu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__CZPxc\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__2CwNk\",\"item\":\"Favorites_item__3AZR3\",\"ActiveItem\":\"Favorites_ActiveItem__1WRgW\",\"FavoritesText\":\"Favorites_FavoritesText__3YH1W\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3vOLp\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__2099c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","const days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = () => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    return {\r\n        DayName,\r\n        CurrentYear,\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241,\r\n            Issue: \"Meeting\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122,\r\n            Issue: \"QA\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null,\r\n            Issue: \"Branding\",\r\n            IsFavorites: false\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false,\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el => {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                status: \"danger\",\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n\r\n                if (WB.BlockInfo.BlockCreatedDate === CurrentDate) {\r\n\r\n                    if(Worklog.Issue === action.NewWorklog.Issue){\r\n\r\n                        if(Worklog.id !== action.NewWorklog.id){\r\n                            WB.Worklogs = WB.Worklogs.filter(FWorklog=>FWorklog.id !== action.NewWorklog.id)\r\n                            if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                                Worklog.NestingItems.map(NestingItem=>{\r\n                                    if(NestingItem.id === action.NewWorklog.id){\r\n                                        if(NestingItem.Issue === action.NewWorklog.Issue)\r\n                                            Object.assign(NestingItem,action.NewWorklog)\r\n\r\n                                    } else Worklog.NestingItems?.push(action.NewWorklog)\r\n                                })\r\n                            } else Worklog.NestingItems = [action.NewWorklog]\r\n\r\n\r\n                        }else Object.assign(Worklog,action.NewWorklog)\r\n\r\n                    }else {\r\n                        if(Worklog.id === action.NewWorklog.id) Object.assign(Worklog,action.NewWorklog)\r\n\r\n                        else if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                            Worklog.NestingItems.map(CNestingItem => {\r\n                                if(CNestingItem.id === action.NewWorklog.id && CNestingItem.Issue !== action.NewWorklog.Issue){\r\n                                    Worklog.NestingItems = Worklog.NestingItems?.filter(FNestingItem=>FNestingItem.id !== action.NewWorklog.id)\r\n                                    WB.Worklogs.push(action.NewWorklog)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog} = FindWorklogById(action.WorklogId)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId)\r\n                            Object.assign(NestingItem, action.NewWorklog)\r\n                    })\r\n                } else Object.assign(FavoritesWorklog, action.NewWorklog)\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId)\r\n                                    Object.assign(NestingItem, action.NewWorklog)\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId)\r\n                                Object.assign(Worklog, action.NewWorklog)\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG,  NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\n// export const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n//\r\n//     const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n//     // if (SendNewMessageResult.resultCode === 0) {\r\n//     //     dispatch(GetWorklogs(WorklogBlockId))\r\n//     // }\r\n// }\r\n// export type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport interface TCalendars {\r\n    [key: string]: TCalendar\r\n}\r\n\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\n\r\nexport type TCurrentDate = {\r\n    DayName: string\r\n    CurrentYear: number | string\r\n    CurrentMonth: string\r\n    CurrentDay: number | string\r\n}\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\nconst SET_ISSUES = \"ISSUES/SET_ISSUES\"\r\nconst SET_COMPLETED_ISSUES = \"ISSUES/SET_COMPLETED_ISSUES\"\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Meeting\", \"QA\",\r\n        \"API Middleware\", \"Amendment\", \"Branding\", \"Profit increase\", \"Project Design\",\"Customer\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue>\r\n    | ReturnType<TChangeIssue> | ReturnType<TSetIssues> | ReturnType<TSetCompletedIssues>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SET_ISSUES :{\r\n            return {\r\n                ...state,\r\n                Issues: action.Issues\r\n            }\r\n        }\r\n        case SET_COMPLETED_ISSUES :{\r\n            return {\r\n                ...state,\r\n                CompletedIssues: action.CompletedIssues\r\n            }\r\n        }\r\n\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issue\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssue\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  SetIssues = (Issues : string[]) =>{\r\n    return{type : SET_ISSUES, Issues } as const\r\n}\r\nexport type TSetIssues = typeof SetIssues\r\n\r\nexport const  SetCompletedIssues = (CompletedIssues : string[]) =>{\r\n    return{type : SET_COMPLETED_ISSUES, CompletedIssues } as const\r\n}\r\nexport type TSetCompletedIssues = typeof SetCompletedIssues\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport HS from \"./NavBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport avatar from \"../../assets/imgs/avatar.jpg\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n            marginLeft: \"5%\",\r\n            color: \"#FFFFFF\",\r\n            cursor: \"pointer\"\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\ntype TMaterialNavProps = {\r\n    OpenUserProfile : ()=> void\r\n    onUnAuth : ()=>void\r\n}\r\n const MaterialNav : React.FC<TMaterialNavProps> = (props) =>{\r\n    const classes = useStyles();\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n    const handleMobileMenuClose = () => setMobileMoreAnchorEl(null)\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => setMobileMoreAnchorEl(event.currentTarget)\r\n    const LogOut = ()=>{\r\n        localStorage.setItem(\"IsAuth\",\"false\")\r\n        props.onUnAuth()\r\n    }\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <SettingsIcon/>\r\n                </IconButton>\r\n\r\n                Settings\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <InfoIcon/>\r\n                </IconButton>\r\n                Info\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton onClick={LogOut} color=\"primary\">\r\n                    <ExitToAppIcon/>\r\n                </IconButton>\r\n                Logout\r\n            </MenuItem>\r\n            <MenuItem     onClick={props.OpenUserProfile} >\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"primary-search-account-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"primary\"\r\n                >\r\n                    <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                </IconButton>\r\n                Profile\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <div className={HS.NavLinks}>\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Home/All\">\r\n                                Worklogs\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Issues/\">\r\n                                Issues\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className={classes.grow}/>\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Tooltip title=\"Settings\" arrow placement=\"bottom\">\r\n                            <IconButton  color=\"inherit\">\r\n                                <SettingsIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                            <Tooltip title=\"Info\" arrow placement=\"bottom\">\r\n                                <IconButton color=\"inherit\">\r\n                                    <InfoIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        <Tooltip title=\"Logout\" arrow placement=\"bottom\">\r\n                            <IconButton onClick={LogOut} color=\"inherit\">\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Profile\" arrow placement=\"bottom\">\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"account of current user\"\r\n                                aria-haspopup=\"true\"\r\n                                color=\"inherit\"\r\n                                onClick={props.OpenUserProfile}\r\n                            >\r\n                                <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n        </div>\r\n    );\r\n}\r\nexport default  React.memo(MaterialNav)","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetDeleteModalParams: Dispatch<any>\r\n    ParentId?: number\r\n    AddToFavorite: TAddToFavorite\r\n    PlayingWorklog: TWorkLog | null\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    ShowSnackBar: TShowSnackBar\r\n\r\n    onHideMenu: () => void\r\n    WorklogInfo : TWorkLog\r\n    NestingIsShowing : boolean\r\n}\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e: React.MouseEvent<HTMLElement>) => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)) {\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId: props.WorklogInfo.id,\r\n                ParentId: props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () => {\r\n        if (!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\") {\r\n            if (props.ParentId) props.AddToFavorite(props.WorklogInfo.id)\r\n            else props.AddToFavorite(props.WorklogInfo.id)\r\n            props.ShowSnackBar({\r\n                message: \"worklog added to favorites\", position: {horizontal: \"center\", vertical: \"top\"},\r\n                severity: \"success\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () => {\r\n        if (!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\") {\r\n            let CurrentWorklog: TWorkLog = {\r\n                ...props.WorklogInfo,\r\n                TimerValue: \"00:00:00\",\r\n                id: randomInteger(0, 10000),\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from 'react';\r\nimport {\r\n    createStyles,\r\n    withStyles,\r\n    makeStyles,\r\n} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { green, purple,blue,grey,red,common,teal,yellow,deepOrange,orange,blueGrey,cyan,indigo} from '@material-ui/core/colors'\r\n\r\ninterface ColorType {\r\n    [key : string] : string\r\n}\r\ntype color = \"green\" | \"purple\" | \"grey\" | \"red\" | \"blue\" | \"common\"\r\n    | \"teal\" | \"yellow\"| \"white\" | \"indigo\" |\"cyan\" |\"blueGrey\" | \"orange\" | \"deepOrange\"\r\n\r\ntype TCustomizedButtonProps = {\r\n    bgColor : color\r\n    text : string\r\n    variant  : \"outlined\" | \"contained\" | \"text\"\r\n    fontSize : number | string\r\n    fontColor ? : color\r\n    startIcon ? : JSX.Element\r\n    width ?: number\r\n    disabled ?: boolean\r\n    onClick?: (data : any)=>void\r\n}\r\n\r\nconst findColorObject = (colorName:string) : ColorType  =>{\r\n    switch (colorName) {\r\n        case \"green\" : return green\r\n        case \"purple\" : return purple\r\n        case \"grey\" : return grey\r\n        case \"red\" : return red\r\n        case \"blue\" : return blue\r\n        case \"teal\" : return teal\r\n        case \"common\" : return common\r\n        case \"yellow\" : return yellow\r\n        case \"deepOrange\" : return deepOrange\r\n        case \"orange\" : return orange\r\n        case \"blueGrey\" : return blueGrey\r\n        case \"cyan\" : return cyan\r\n        case \"indigo\" : return indigo\r\n        default : return common\r\n    }\r\n\r\n}\r\n\r\nconst  CustomizedButton : React.FC<TCustomizedButtonProps>  = (props) => {\r\n\r\n    const useStyles = makeStyles((theme) =>\r\n        createStyles({\r\n            margin: {\r\n                margin: theme.spacing(1),\r\n                width : props.width && props.width\r\n            },\r\n        }),\r\n    )\r\n\r\n    const color = findColorObject(props.bgColor)\r\n    const ColorButton = withStyles((theme) => ({\r\n        root: {\r\n            color: props.fontColor\r\n                ? props.fontColor === \"white\" ? red[50] :findColorObject(props.fontColor)[500]\r\n                :theme.palette.getContrastText(color[500]),\r\n            backgroundColor: color[500],\r\n            fontSize : props.fontSize,\r\n            '&:hover': {\r\n                backgroundColor: color[700],\r\n            },\r\n            borderRadius : \"0.6rem\"\r\n        },\r\n    }))(Button)\r\n\r\n    const classes = useStyles();\r\n    return <ColorButton  disabled={props.disabled} onClick={props.onClick}\r\n                         color={\"inherit\"} startIcon={props.startIcon ? props.startIcon : undefined} variant={props.variant}\r\n                         className={classes.margin}>\r\n        {props.text}\r\n    </ColorButton>\r\n}\r\nexport default CustomizedButton","import React from \"react\";\r\nimport DS from \"./DeleteConfirm.module.css\"\r\nimport MS from \"../ChangeWorklogModal/ModalWindow.module.css\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen: boolean\r\n    onClose: () => void\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    ComponentToDraw: TComponentToDraw\r\n    DeleteFromFavorites: TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal: React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = () => {\r\n        if (props.DeleteModalParams) {\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId, props.DeleteModalParams.ParentId)\r\n                : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n    if (!props.isOpen) return null\r\n\r\n    return (\r\n        <div className=\"DeleteConfirmModal\">\r\n            <div className={DS.modal}>\r\n\r\n                <div className={DS.ModalTextContainer}>\r\n                    Are you sure you want to delete the worklog?\r\n                </div>\r\n\r\n                <div className={DS.NewWorklogControlButtonsContainer}>\r\n                    <div className={DS.NewWorklogControlButtons}>\r\n\r\n                        <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                            <CustomizedButton bgColor={\"teal\"} text={\"delete\"} startIcon={<DeleteIcon/>}\r\n                                              variant={\"contained\"} fontSize={14}/>\r\n                        </div>\r\n\r\n                        <div onClick={props.onClose} className=\"modal-close\">\r\n                            <CustomizedButton bgColor={\"blueGrey\"} text={\"go back\"}\r\n                                              variant={\"contained\"} fontSize={14} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React from \"react\";\r\nimport WorkLog, {TWorklogProps} from \"./WorkLog\";\r\n\r\nconst NestingWorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    return <div className=\"NestedItem\">\r\n\r\n        {\r\n            props.WorklogInfo.NestingItems?.map(NestingItem =>\r\n                <div key={NestingItem.id}>\r\n                    <WorkLog {...props}\r\n                             WorklogInfo={NestingItem}\r\n                             ParentId={props.WorklogInfo.id}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {TWorkLog, CurrentDate} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams, TWorklogsBlockProps} from \"./WorkLogsBlock\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogOwnProps = {\r\n    DeleteModalIsOpen: boolean\r\n    OnDeleteModalOpen: () => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetDeleteModalParams: Dispatch<SetStateAction<TDeleteModalParams | undefined>>\r\n    WorklogInfo: TWorkLog\r\n    ParentId?: number\r\n}\r\nexport type TWorklogProps = TWorklogsBlockProps & TWorklogOwnProps\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => SetNestingIsShowing(true)\r\n    const OnHideNestingWorklogs = () => SetNestingIsShowing(false)\r\n    const OnShowMenu = () => SetShowMenu(true)\r\n    const OnHideMenu = () => SetShowMenu(false)\r\n    const onStopButtonClicked = () => props.SetIsPlayingWorklogById(false, props.WorklogInfo.id)\r\n\r\n    const onPlayButtonClicked = () => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog))\r\n\r\n            props.SetIsPlayingWorklogById(true, props.WorklogInfo.id, props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"NestingItems\", \"Issue\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props.WorklogInfo[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                <img\r\n                    className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu ? WLS.WorklogActiveBG : WLS.WorklogBG}\r\n                    src={WorklogActiveBG} alt=\"\"/>\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {\r\n                            props.WorklogInfo.NestingItems && props.WorklogInfo.NestingItems.length > 0\r\n                                ? <div className={WLS.NestingButtonPose}>\r\n                                    {\r\n                                        NestingIsShowing\r\n                                            ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                                className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                            </div>\r\n\r\n                                            : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}>\r\n                                            <span\r\n                                                className={WLS.TwwContentText}>\r\n                                                    {props.WorklogInfo.NestingItems.length}\r\n                                            </span>\r\n                                            </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                : props.WorklogInfo.StartTime && props.WorklogInfo.EndTime\r\n                                ? <div className={WLS.WorkTime}>\r\n\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.WorklogInfo.StartTime}\r\n                                    </div>\r\n\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.WorklogInfo.EndTime}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                : <div></div>\r\n                        }\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img style={{transitionTimingFunction: \"ease-out\", transitionDuration: \"0.3s\"}}\r\n                                 src={props.WorklogInfo.status === \"ok\"\r\n                                     ? CP_ok : props.WorklogInfo.status === \"warning\"\r\n                                         ? CP_warning : props.WorklogInfo.status === \"danger\"\r\n                                             ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.Issue}>\r\n                                {props.WorklogInfo.Issue}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.WorklogInfo.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.WorklogInfo.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.WorklogInfo.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu}\r\n                                 className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                                     ? WLS.WorklogMoreVerticalActive\r\n                                     : WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       isOpen={props.DeleteModalIsOpen} onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.WorklogInfo.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {\r\n            ShowMenu && <WorkLogDropDown {...props}\r\n                                         onHideMenu={OnHideMenu}\r\n                                         NestingIsShowing={NestingIsShowing}\r\n                                         ShowSnackBar={props.ShowSnackBar}\r\n            />}\r\n\r\n        {\r\n\r\n            NestingIsShowing && <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default React.memo(ProgressBar)","import {TSnackBarOptions} from \"../../Components/SnackBar/SnackBar\";\n\nconst CreateSnackBarOptions =(severity : \"error\" | \"info\" | \"warning\" | \"success\",message : string)=>(\n    {\n        message,\n        severity,\n        position : {\n            vertical : \"bottom\",\n            horizontal : \"right\"\n        }\n    } as TSnackBarOptions\n)\nexport default CreateSnackBarOptions","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate, TBlockInfo, TSendWorklogsData, TSetWorklogStatus, TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport CreateSnackBarOptions from \"../../../assets/secondary/CreateSnackbarOptions\";\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n\r\n    const OnSendWorklogData = (): void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"Issue does not exist\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"warning\", \"Please, enter the worklog name\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"something goes wrong\"))\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"success\", \"your worklog successfully logged\"))\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            let ObjToSend: TSendWorklogsData = {\r\n                WorkLogsBlocks: {\r\n                    BlockInfo: props.BlockInfo,\r\n                    Worklogs: props.Worklogs\r\n                }\r\n            }\r\n            //props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"success\", \"your worklog successfully logged\"))\r\n        } else {\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"Issue does not exist\"))\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={FS.DateTime}>\r\n\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {\r\n                    props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                        ? <BackupIcon style={{cursor: \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                      onClick={OnSendWorklogData}\r\n                                      className={FS.DownloadIcon}/>\r\n\r\n                        : <BackupIcon color={\"disabled\"} fontSize={\"large\"} className={FS.DownloadIcon}/>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {useState} from \"react\";\r\nimport {DifferenceInTime} from \"../../assets/secondary/DifferenceInTime\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {TBlockInfo, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\nimport {TWorklogsContainerProps} from \"./WorkLogsContainer\";\r\n\r\nexport type TWorklogsBlockOwnProps={\r\n    Worklogs: TWorkLog[]\r\n    BlockInfo?: TBlockInfo\r\n}\r\nexport type TWorklogsBlockProps = TWorklogsContainerProps & TWorklogsBlockOwnProps\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = () => SetDeleteModalIsOpen(true)\r\n    const OnDeleteModalClose = () => SetDeleteModalIsOpen(false)\r\n\r\n\r\n    return <>\r\n        {\r\n            props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n            <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n\r\n                <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                             SummaryTime={props.BlockInfo.SummaryTime}\r\n                             SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                             Worklogs={props.Worklogs}\r\n                             BlockInfo={props.BlockInfo}\r\n                             ShowSnackBar={props.ShowSnackBar}\r\n                             SetWorklogStatus={props.SetWorklogStatus}/>\r\n            </div>\r\n        }\r\n\r\n        {\r\n            props[props.ComponentToDraw].map(el =>\r\n                <div key={el.id} className=\"worklog\">\r\n                    <WorkLog\r\n                        WorklogInfo={el}\r\n                        {...props}\r\n                        DeleteModalIsOpen={DeleteModalIsOpen}\r\n                        OnDeleteModalClose={OnDeleteModalClose}\r\n                        OnDeleteModalOpen={OnDeleteModalOpen}\r\n                        SetDeleteModalParams={SetDeleteModalParams}\r\n                        DeleteModalParams={DeleteModalParams}\r\n                        />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    </>\r\n}\r\n\r\nexport default WorkLogsBlock","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TAddToFavorite, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TWorklogsContainerOwnProps} from \"../../globalTypes/Types\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\n\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\nexport type TWorklogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorklogsContainerOwnProps\r\n\r\nconst WorkLogsContainer:React.FC<TWorklogsContainerProps> =(props)=>{\r\n\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {props.ComponentToDraw === \"Worklogs\"\r\n                    ? props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...props}\r\n                            Worklogs={props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\nconst StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorklogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog, SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SetWorklogStatus,DeleteFromFavorites\r\n})(WorkLogsContainer)","\r\n\r\nexport const ToFullTime = (value,hours) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n\r\n         return  `${ToFullTime(CurrentHours - hours) === 24? \"00\" : ToFullTime(CurrentHours - hours)}:${ToFullTime(CurrentMinutes - minutes)}`\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport type TCustomInputProps = {\r\n    value : string\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>) =>void\r\n    placeholder : string\r\n    label : string\r\n    width : number\r\n}\r\n\r\nconst CustomInput: React.FC<TCustomInputProps> = (props) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                '& .MuiTextField-root': {\r\n                    margin: theme.spacing(1),\r\n                    width: props.width,\r\n                },\r\n            },\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n    return <div className={classes.root}>\r\n        <TextField\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            id=\"standard-textarea\"\r\n            label={props.label}\r\n            placeholder={props.placeholder}\r\n            multiline\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default CustomInput","import React, {ChangeEvent} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport type TIssuesSelectInputProps = {\r\n    Issues : string[]\r\n    onChange : (event:  React.ChangeEvent<{  value: unknown; }>  ) =>void\r\n    value? : string\r\n    width : number\r\n}\r\n\r\nconst IssuesSelectInput : React.FC<TIssuesSelectInputProps> = (props) =>{\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: props.width,\r\n            },\r\n            Item : {\r\n                color : \"#393a3a\",\r\n            }\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"grouped-native-select\">Issues</InputLabel>\r\n                <Select  value={props.value} onChange={props.onChange} native defaultValue=\"\" id=\"grouped-native-select\">\r\n                    <option value={\"no issue\"}> no issue </option>\r\n                    <optgroup label=\"Issues\">\r\n                        {props.Issues.map(Issue=>      <option key={Issue} className={classes.Item} value={Issue}>{Issue}</option>)}\r\n                    </optgroup>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IssuesSelectInput","import {useState, ChangeEvent} from \"react\"\r\n\r\ntype defFunc = () => void\r\n\r\nexport const useInput = (initialValue: string): {\r\n    bind: {\r\n        value: string,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    },\r\n    value: string,\r\n    clear: defFunc,\r\n    forceUpdate: (val: string) => void\r\n} => {\r\n\r\n    let [value, setValue] = useState(initialValue)\r\n\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const clear = () => {\r\n        setValue(\"\")\r\n    }\r\n\r\n    const forceUpdate = (val: string) => {\r\n        setValue(val)\r\n    }\r\n    return {\r\n        bind: {value, onChange},\r\n        value,\r\n        clear,\r\n        forceUpdate\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport {red} from \"@material-ui/core/colors\"\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(false);\r\n    const WorklogInput= useInput(props.PlayingWorklog.TaskField ? props.PlayingWorklog.TaskField : \"\")\r\n    const IssueInput = useInput(props.PlayingWorklog.Issue ? props.PlayingWorklog.Issue : \"\")\r\n    const toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer = () => {\r\n        props.openWorklogChangeModal()\r\n        setIsActive(!isActive)\r\n        let TimerData = {\r\n            TimerValue: ToFullTime(hours) + \":\" + ToFullTime(minutes) + \":\" + ToFullTime(seconds),\r\n            TimerIssue: IssueInput.value ? IssueInput.value : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInput.value ? WorklogInput.value : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <CustomInput {...WorklogInput.bind}\r\n                         label={\"Task Field\"}\r\n                         placeholder={\"Please, enter the task\"}\r\n                         width={250}\r\n            />\r\n\r\n            <div style={{marginTop : \" 10px\"}} className={\"IssuesSelectinput\"}>\r\n                <IssuesSelectInput  Issues={props.Issues}\r\n                                    {...IssueInput.bind}\r\n                                    width={250}\r\n                />\r\n            </div>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <StopIcon style={{marginTop : \"5px\", width: \"50px\",\r\n                            height: \"50px\",backgroundColor : red[400],borderRadius : \"100%\",color : red[50]}} />\r\n                    </div>\r\n                    <div style={{paddingLeft : \"5px\"}} className=\"controlButtons\" onClick={toggle}>\r\n                        {!isActive ?\r\n                            <PauseCircleFilledIcon style={{width: \"60px\", height: \"60px\"}} color={\"primary\"} />\r\n                            : <PlayButton style={{width: \"60px\", height: \"60px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n    Issues : string[]\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>props.AddWorklog()\r\n\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n\r\n            <div className={TTS.strokeVert}> </div>\r\n\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                             Issues={props.Issues}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}> </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React from \"react\";\r\nimport TTS from \"../../TimeTracking/TimeTracking.module.css\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport NewWorklogButton from \"../../../assets/imgs/new_worklog_button.svg\";\r\nimport {TAddWorklog, TWorkLog, TWorklogBlock} from \"../../../Data/WorkLogsReducer\";\r\nimport WorkLogsContainer from \"../../WorkLogs/WorkLogsContainer\";\r\nimport {TWorklogsContainerOwnProps} from \"../../../globalTypes/Types\";\r\n\r\nexport type TFavoritesPageProps = TWorklogsContainerOwnProps &{\r\n    FavoritesIsClicked: boolean\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog : TWorkLog | null\r\n    FavoritesWorklog : Array<TWorkLog>\r\n\r\n}\r\n\r\nconst FavoritesPage: React.FC<TFavoritesPageProps> = (props) => {\r\n    const AddNewFavoritesWorklog = () => !props.PlayingWorklog &&  props.AddWorklog(undefined,true)\r\n\r\n    return (<div>\r\n        {\r\n            props.FavoritesWorklog.length > 0\r\n                    ? <div className=\"Favorites-Worklogs\">\r\n                        <WorkLogsContainer TimerData={props.TimerData}\r\n                                           openWorklogChangeModal={props.openWorklogChangeModal}\r\n                                           ComponentToDraw={props.ComponentToDraw}\r\n                                           SetTimerData={props.SetTimerData}\r\n                                           ShowSnackBar={props.ShowSnackBar}\r\n                                           closeWorklogChangeModal={props.closeWorklogChangeModal}\r\n                                           WorklogChangeModalIsOpen={props.WorklogChangeModalIsOpen}\r\n\r\n                        />\r\n                    </div>\r\n\r\n                    : <div className={FS.NoFavoritesIssuesContainer}>\r\n\r\n                        <div className={FS.FavoritesText}>\r\n                            There is no favorites issues yet\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"60px\"}} className={TTS.NewWorklog}>\r\n                            <div  className={TTS.NewWorklogButtonPose}>\r\n                                <img onClick={AddNewFavoritesWorklog} className={TTS.NewWorklogButtonSize}\r\n                                     src={NewWorklogButton}\r\n                                     alt=\"new_worklog_button\"/>\r\n                            </div>\r\n\r\n                            <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n\r\n                                <div className={TTS.NewWorklogButtonDescription}>\r\n                                    new favorite\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n    </div>)\r\n}\r\n\r\nexport default FavoritesPage","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {\r\n                    //@ts-ignore\r\n                    props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = { CurrentDate: TCurrentDate}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => SetShowDropDownCalendar(true)\r\n    const onHideDropDownCalendar = () => SetShowDropDownCalendar(false)\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n\r\n            <div className={CS.CalendarContent}>\r\n\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        {\r\n            ShowDropDownCalendar &&\r\n            <>\r\n                <div className={CS.bg} onClick={onHideDropDownCalendar}/>\r\n\r\n                <DropDownCalendarContainer/>\r\n            </>\r\n        }\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Calendar","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} >\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n\r\n                    <div>\r\n                        <NavLink onClick={props.OnFavoritesClick}  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n\r\n                    <div style={{paddingLeft:\".5rem\"}}>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"./All/All\";\r\nimport FavoritesButton from \"./Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n    return (<div className={AS.CalendarAndButtons}>\r\n\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +75 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +15 + \"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect,} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\nimport {TModalWindowContainerProps} from \"./ChangeWorklogModalContainer\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowContainerProps> = (props) => {\r\n\r\n    let ModalWorklogInput = useInput(props.WorklogToChange && props.WorklogToChange.TaskField ? props.WorklogToChange.TaskField : \"\")\r\n    let ModalIssueInput = useInput(props.WorklogToChange && props.WorklogToChange.Issue ? props.WorklogToChange.Issue : \"\")\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let CurrentTime = ToFullTime(new Date().getHours()) + \":\" + ToFullTime(new Date().getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && ModalWorklogInput.forceUpdate(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && ModalIssueInput.forceUpdate(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && ModalWorklogInput.forceUpdate(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && ModalIssueInput.forceUpdate(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalWorklogInput.value.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalIssueInput.value.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalWorklogInput.value.length > 0\r\n            && ModalIssueInput.value.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalWorklogInput.value,\r\n                Issue: ModalIssueInput.value,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if (NewWL.IsFavorites) {\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            } else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            debugger\r\n            ModalWorklogInput.clear()\r\n            ModalIssueInput.clear()\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal()\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n        ModalWorklogInput.clear()\r\n        ModalIssueInput.clear()\r\n    }\r\n\r\n\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n    return (\r\n        <div className=\"timer-modal\">\r\n            <div className={MS.modal}>\r\n                <div className={MS.ModalTitle}>New worklog</div>\r\n                <div className={MS.ModalSlider}>\r\n\r\n                    {\r\n                        ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                        <TimeSlider value={ModalTimeLineValues}\r\n                                    disabled={false}\r\n                                    step={10}\r\n                                    SetTimerValue={SetModalTimeLineValues}\r\n\r\n                        />\r\n                    }\r\n                </div>\r\n\r\n                <form name=\"NewWorklogContent\" action=\"\">\r\n                    <div className={MS.ModalTextFields}>\r\n                        <div className={MS.NewWorklogContentContainer}>\r\n\r\n                            <CustomInput {...ModalWorklogInput.bind}\r\n                                         label={\"Task Field\"}\r\n                                         placeholder={\"Please, enter the task\"}\r\n                                         width={500}\r\n                            />\r\n\r\n                            {\r\n                                NewWorklogNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog name</div>\r\n                            }\r\n\r\n                            <div style={{marginTop: \"20px\"}} className=\"issue-select-input\">\r\n                                {\r\n                                    //@ts-ignore\r\n                                    <IssuesSelectInput Issues={props.Issues}\r\n                                                       {...ModalIssueInput.bind}\r\n                                                       width={500}\r\n\r\n                                    />\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            {\r\n                                NewIssueNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue name</div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={MS.NewWorklogControlButtonsContainer}>\r\n                        <div className={MS.NewWorklogControlButtons}>\r\n\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CustomizedButton fontColor={\"green\"} text={\"save\"} bgColor=\"white\"\r\n                                                  variant={\"outlined\"} fontSize={14} startIcon={<SaveIcon/>}/>\r\n                            </div>\r\n\r\n                            <div onClick={props.closeWorklogChangeModal} className={MS.CloseButtonMargin}>\r\n                                <CustomizedButton  text={\"go back\"} bgColor=\"white\"\r\n                                                  variant={\"outlined\"} fontSize={14} fontColor={\"deepOrange\"}/>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangeWorklogModal","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange, ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: (data :TTimerData | undefined) => void\r\n    Issues: string[]\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n}\r\n\r\nexport type TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nconst ChangeWorklogModalContainer: React.FC<TModalWindowContainerProps> = (props) => (\r\n\r\n    <ChangeWorklogModal {...props}/>\r\n)\r\n\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog, ChangeFavoritesWorklog\r\n})(ChangeWorklogModalContainer)","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value : string\r\n    classes : {AddIssueInput : string}\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>)=>void\r\n    onSubmit : ()=> void\r\n    onCancel : () => void\r\n    SubmitButtonText : string\r\n    CancelButtonText : string\r\n}\r\n\r\nconst CustomListInput : React.FC<TCustonListInputProps> = (props) =>{\r\n    return <div className={props.classes.AddIssueInput}>\r\n        <TextField\r\n            id=\"filled-multiline-flexible\"\r\n            label=\"New issue\"\r\n            multiline\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            placeholder=\"Please enter the new issue\"\r\n        />\r\n        <Grid style={window.innerWidth > 1400 ? {paddingTop : \"10px\",paddingLeft :\"15%\"}: {paddingTop : \"10px\"}} container>\r\n            <Grid item >\r\n                <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.SubmitButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n                <Button onClick={props.onCancel} style={{marginLeft : \"20%\"}} color={\"inherit\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.CancelButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default CustomListInput","import React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    classes :any\r\n}\r\n\r\nconst IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const [EditInputIsShowing, SetEditInputIsShowing] = useState(false)\r\n    const EditInputValue = useInput('')\r\n\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue.value)\r\n        SetEditInputIsShowing(false)\r\n        EditInputValue.clear()\r\n    }\r\n    const onCancelInput = () =>{\r\n        SetEditInputIsShowing(false)\r\n    }\r\n\r\n\r\n\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputIsShowing\r\n                    ? <CustomListInput classes={props.classes} onSubmit={OnSaveNewValue}\r\n                             {...EditInputValue.bind} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container>\r\n\r\n                        <Grid item  sm={10}>\r\n                            <ListItem role=\"listitem\" button\r\n                                        //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item  sm={2}>\r\n\r\n                            <Grid style={{marginTop: \"11px\"}} container>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item sm={4}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => SetEditInputIsShowing(true)}\r\n                                                      style={{color: blue[400], cursor: \"pointer\", marginLeft: \"40%\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid item sm={4}>\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"40%\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"90%\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IssueListItem","import React, {Dispatch, useState} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport IssueListItem from \"./IssueListItem\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\n\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    classes : any\r\n    checked : string[]\r\n    setChecked : Dispatch<any>\r\n    AddIssue : TAddIssue\r\n    DeleteIssue : TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nconst IssuesList : React.FC<TIssuesListProps> = (props) =>{\r\n\r\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\r\n    const AddNewIssueInput = useInput('')\r\n\r\n\r\n     const not = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) === -1);\r\n    }\r\n\r\n    const  intersection = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) !== -1);\r\n    }\r\n\r\n\r\n    const  union = (a: string[], b: string[]) => {\r\n        return [...a, ...not(b, a)];\r\n    }\r\n\r\n    const handleToggle = (value: string) => () => {\r\n        const currentIndex = props.checked.indexOf(value);\r\n        const newChecked = [...props.checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        props.setChecked(newChecked);\r\n    }\r\n\r\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length;\r\n\r\n    const handleToggleAll = (items: string[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            props.setChecked(not(props.checked, items));\r\n        } else {\r\n            props.setChecked(union(props.checked, items));\r\n        }\r\n    }\r\n\r\n    const onShowAddIssueInput = () => {\r\n        SetAddIssueOpened(true)\r\n    }\r\n\r\n\r\n    const OnConfirmAddNewIssue = () => {\r\n        props.AddIssue(AddNewIssueInput.value)\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n    const OnCancelAddNewIssue = () => {\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n\r\n    return  <Card>\r\n        <Grid container>\r\n            <Grid item sm={9}>\r\n                <CardHeader\r\n                    className={props.classes.cardHeader}\r\n                    avatar={\r\n                        <Checkbox\r\n                            onClick={handleToggleAll(props.items)}\r\n                            checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\r\n                            indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\r\n                            disabled={props.items.length === 0}\r\n                            inputProps={{'aria-label': 'all items selected'}}\r\n                        />\r\n                    }\r\n                    title={props.title}\r\n                    subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\r\n                />\r\n            </Grid>\r\n            <Grid item sm={3}>\r\n                {\r\n                    props.el === \"Issue\"\r\n                    && <div style={window.innerWidth < 1400 ?{paddingTop : \"10%\" }\r\n                    :window.innerWidth <1750 ?  {paddingTop : \"10%\",paddingLeft : \"15%\"}\r\n                    :{paddingTop : \"8%\",paddingLeft : \"30%\"}}>\r\n                        <Tooltip title=\"Create new issue\" arrow placement=\"top\">\r\n                            <Button onClick={onShowAddIssueInput} size=\"small\" color=\"secondary\"\r\n                                    variant={\"outlined\"} startIcon={<AddOutlinedIcon/>}>\r\n                                add issue\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                }\r\n            </Grid>\r\n\r\n        </Grid>\r\n        {\r\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput {...AddNewIssueInput.bind} classes={props.classes}\r\n                                                                       onSubmit={OnConfirmAddNewIssue}\r\n                                                                       onCancel={OnCancelAddNewIssue} SubmitButtonText={\"Add\"}\r\n                                                                       CancelButtonText={\"cancel\"}/>\r\n        }\r\n\r\n        <Divider/>\r\n\r\n        <List className={props.classes.list} dense component=\"div\" role=\"list\">\r\n            {props.items.map((value: string) => {\r\n                return  (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\r\n                                        handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\r\n                                        ChangeIssue={props.ChangeIssue} classes={props.classes}/>)\r\n\r\n            })}\r\n            <ListItem/>\r\n\r\n        </List>\r\n    </Card>\r\n}\r\n\r\nexport default IssuesList","import React, {useState} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Data/IssuesReducer\";\r\nimport IssuesList from \"./IssuesList\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"6%\",\r\n        },\r\n        cardHeader: {\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        list: {\r\n\r\n            width: window.innerWidth < 600 ? 300\r\n                : window.innerWidth < 900 ? 500\r\n                        :window.innerWidth < 1610 ? 600\r\n                        :window.innerWidth < 1800 ? 700\r\n                            : 800,\r\n            height : window.innerWidth < 600 ? 250\r\n                : window.innerWidth < 900 ? 400\r\n                    :window.innerWidth < 1200 ? 500\r\n                        :window.innerWidth < 1800 ? 650\r\n                            : 800\r\n            ,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        },\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n                width: window.innerWidth < 900 ? '15ch' : window.innerWidth < 1400 ? \"25ch\" : window.innerWidth < 1650\r\n                    ? \"30ch\" : \"45ch\"\r\n            },\r\n            paddingLeft: \"30%\",\r\n            paddingBottom: \"10px\"\r\n        }\r\n    }),\r\n)\r\n\r\nfunction not(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues : TSetIssues\r\n    SetCompletedIssues : TSetCompletedIssues\r\n}\r\n\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState<string[]>([]);\r\n\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked));\r\n        props.SetIssues(not(props.Issues, IssuesChecked));\r\n        setChecked(not(checked, IssuesChecked));\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked));\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked));\r\n        setChecked(not(checked, CompletedIssuesChecked));\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n                <Grid item>\r\n                    <IssuesList title={\"Issues\"} items={props.Issues}\r\n                                el={\"Issue\"} classes={classes}\r\n                                DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                                checked={checked} setChecked={setChecked}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedIssues}\r\n                            disabled={IssuesChecked.length === 0}\r\n                            aria-label=\"move selected right\"\r\n                            color={\"secondary\"}\r\n                        >\r\n                            &gt;\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedCompletedIssues}\r\n                            disabled={CompletedIssuesChecked.length === 0}\r\n                            aria-label=\"move selected left\"\r\n                            color={\"primary\"}\r\n                        >\r\n                            &lt;\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                                el={\"CompletedIssue\"} setChecked={setChecked}\r\n                                checked={checked} AddIssue={props.AddIssue}\r\n                                DeleteIssue={props.DeleteIssue} classes={classes}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Issues","import {useState} from \"react\"\r\n\r\ntype defFunc = ()=> void\r\n\r\nexport const useBooleanState = (initialValue : boolean) : {isDisplayed : boolean,Show : defFunc,Hide : defFunc}  => {\r\n    let [isDisplayed,SetIsOpen] =useState(initialValue)\r\n    const Show = ()=>{\r\n        SetIsOpen(true)\r\n    }\r\n    const Hide = ()=>{\r\n        SetIsOpen(false)\r\n    }\r\n    return{\r\n        isDisplayed,Show,Hide\r\n    }\r\n}\r\n","import React from 'react'\nimport EVS from \"./ElementsValidators.module.css\"\nimport {Field} from \"redux-form\";\nimport { makeStyles } from '@material-ui/core/styles/index';\nimport TextField from '@material-ui/core/TextField/index';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            color :\"#393939\"\n        }\n    },\n}));\n\nexport const FormInput = ({input,meta,...props}) =>{\n    const classes = useStyles();\n    return <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\n        <TextField  className={classes.root}  placeholder={props.placeholder}\n                    variant=\"outlined\" {...input} {...props}/>\n        {meta.error && meta.touched ?   <div style={{padding : \"1rem\",color : \"#b20400\"}}> {meta.error}</div> : \"\"}\n    </div>\n}\n\nexport const CreateField = (placeholder,name,validators,component,props ={},text =\"\") => {\n    return <div>\n        <Field placeholder={placeholder} name={name} validate={validators}\n               component={component}  {...props}/> {text}\n    </div>\n}","import React from \"react\"\n\nexport const required = (value) => {\n    if (value) {\n        return undefined\n    } else return <div>\n        This field is required\n    </div>\n}\n\nexport const PhoneNumber =(value)=>{\n    if(/^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/.test(value)) return undefined\n    else return <div>\n        Please,enter the correct phone number\n    </div>\n}\nexport const Email = (value)=>{\n    if(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]) |(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value)) return undefined\n    else return <div>Please,enter the correct email </div>\n}\nexport const PassMinLength = (value)=>{\n    if(value.length < 6) return <div> Password must be more then 6 symbols! </div>\n    else return undefined\n}\n\nexport const MaxLengthCreator = (MaxLengthValue) => (value) => {\n    if (value && value.length > MaxLengthValue) {\n        return `Maximal length is a ${MaxLengthValue} symbols`\n    } else return undefined\n}","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport CustomizedButton from \"../../CustomizedButton/CustomizedButton\"\nimport {CreateField, FormInput} from \"../../../assets/utils/ValidartorsComponents/ElementsValidators\"\nimport {required, Email} from \"../../../assets/utils/validators\"\nimport {reduxForm, InjectedFormProps} from \"redux-form\"\nimport {TLoginFormData} from \"./SignIn\";\n\nexport type TOwnProps = {\n    ComponentIsSignUp: () => void\n}\n\nconst SignInForm: React.FC<InjectedFormProps<TLoginFormData, TOwnProps> & TOwnProps> = (props) => {\n    return <form style={{paddingTop: \"1.5rem\", paddingRight: \"2rem\", paddingLeft: \"2rem\"}} onSubmit={props.handleSubmit}\n                 className={\"SignInFormContainer\"}>\n\n        <div style={{fontSize: \"1.512rem\", fontWeight: 500}} className=\"SignInFormHeader\">\n            Sign in\n        </div>\n\n        <div className=\"SignInEmailInput\">\n            {CreateField(\"Enter your email\", \"email\", [required, Email],\n                FormInput, {label: \"email\", fullWidth: true, helperText: \"test@g.com - for tests\"})}\n        </div>\n\n        <div className=\"SignInPassWordInput\">\n            {CreateField(\"Enter your password\", \"password\", [required],\n                FormInput, {label: \"password\", type: \"password\", fullWidth: true, helperText: \"test - for tests\"})}\n        </div>\n\n        <div style={{paddingTop: \"1rem\"}} className=\"SignInControlButton\">\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\n\n                <Grid item>\n                    <CustomizedButton onClick={props.handleSubmit} text=\"enter\"\n                                      variant=\"contained\" bgColor=\"green\"\n                                      fontSize=\"1.11rem\"/>\n                </Grid>\n\n                <Grid item>\n                    <CustomizedButton onClick={props.ComponentIsSignUp} text=\"sign up\"\n                                      variant=\"contained\" bgColor=\"blue\" fontSize=\"1.11rem\"/>\n                </Grid>\n            </Grid>\n        </div>\n\n        {props.error\n            ?\n            <div style={{paddingTop: \"2rem\", paddingLeft: \"1.12rem\", fontSize: \"1.125rem\", color: \"#ea1f09\"}}>\n                {props.error}\n            </div>\n            : null\n        }\n    </form>\n}\n\nexport const SignInFormRedux = reduxForm<TLoginFormData, TOwnProps>({\n    form: 'loginForm',\n})(SignInForm);","import React from \"react\"\r\nimport {SignInFormRedux} from \"./SignInForm\"\r\nimport {useHistory} from 'react-router-dom'\r\n\r\ntype TSignInProps={\r\n    ComponentIsSignUp:()=>void\r\n    onAuth:()=>void\r\n}\r\nexport type TLoginFormData={\r\n    email:string,\r\n    password : string\r\n}\r\nconst SignIn:React.FC<TSignInProps> = props => {\r\n    const history=useHistory()\r\n    const handleSubmit = (formData : TLoginFormData) => {\r\n        if (formData.email === \"test@g.com\" && formData.password === \"test\") {\r\n            localStorage.setItem(\"IsAuth\", \"true\")\r\n            props.onAuth()\r\n            history.replace(\"/\")\r\n        }\r\n    }\r\n\r\n    return <div className=\"SignInContainer\">\r\n        <SignInFormRedux onSubmit={handleSubmit} ComponentIsSignUp={props.ComponentIsSignUp}/>\r\n    </div>\r\n}\r\n\r\nexport default SignIn","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport CustomizedButton from \"../../CustomizedButton/CustomizedButton\"\nimport {CreateField, FormInput} from \"../../../assets/utils/ValidartorsComponents/ElementsValidators\"\nimport {required, Email, PassMinLength} from \"../../../assets/utils/validators\"\nimport DoneIcon from '@material-ui/icons/Done'\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TSignUpFormData} from \"./SignUp\";\n\ntype TOwnProps={\n    ComponentIsSignIn :()=>void\n}\n\nconst SignUpForm: React.FC<InjectedFormProps<TSignUpFormData, TOwnProps> & TOwnProps> = (props) => {\n    return <form style={{paddingTop: \"1.5rem\",paddingRight:\"2rem\",paddingLeft:\"2rem\"}}  className=\"SignUpFormContainer\"\n                 onSubmit={props.handleSubmit}>\n\n        <div style={{fontSize: \"1.512rem\", fontWeight: 500}} className=\"SignUpFormHeader\">\n            Sign up\n        </div>\n\n        <div className=\"SignUpFormNameInput\">\n            {CreateField(\"Enter your name\", \"name\", [required],\n                FormInput, {label: \"name\", fullWidth: true})}\n        </div>\n\n        <div className=\"SignUpFormEmailInput\">\n            {CreateField(\"Enter your email\", \"email\", [required, Email],\n                FormInput, {label: \"email\", fullWidth: true})}\n        </div>\n\n        <div className=\"SignUpFormPassWordInput\">\n            {CreateField(\"Enter your password\", \"password\", [required, PassMinLength],\n                FormInput, {\n                    label: \"password\", fullWidth: true,\n                    type: \"password\", helperText: \"password must be more then 6 letters\"\n                })}\n        </div>\n\n        <div style={{paddingTop: \"1rem\"}} className=\"SignUpControlButtonsContainer\">\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\n                <Grid item>\n                    <CustomizedButton onClick={props.handleSubmit} text=\"complete\"\n                                      variant=\"contained\" bgColor=\"purple\"\n                                      fontSize=\"1.11rem\" startIcon={<DoneIcon/>}/>\n                </Grid>\n                <Grid item>\n                    <CustomizedButton onClick={props.ComponentIsSignIn} text=\"sign in\"\n                                      variant=\"contained\" bgColor=\"teal\"\n                                      fontSize=\"1.11rem\"/>\n                </Grid>\n            </Grid>\n        </div>\n\n        {props.error\n            ?\n            <div style={{paddingTop:\"2rem\",paddingLeft:\"1.12rem\", fontSize: \"1.125rem\", color: \"#ea1f09\"}}>\n                {props.error}\n            </div>\n            : null\n        }\n    </form>\n}\n\nexport const SignUpFormRedux = reduxForm<TSignUpFormData,TOwnProps>({form: 'SignUpForm'})(SignUpForm)\n","import React from \"react\"\r\nimport {SignUpFormRedux} from \"./SignUpForm\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\ntype TSignUpProps={\r\n    ComponentIsSignIn:()=>void\r\n    ShowSnackBar : TShowSnackBar\r\n}\r\nexport type TSignUpFormData={\r\n    email:string,\r\n    password : string\r\n    name : string\r\n}\r\n\r\nexport const SignUp : React.FC<TSignUpProps> = (props) => {\r\n    const handleSubmit = (formData: TSignUpFormData) => {\r\n        props.ShowSnackBar({message: \"Account was create. Check your email!\",severity:\"success\",position:{\r\n                vertical:\"top\",horizontal:\"center\"\r\n            }})\r\n        console.log(formData)\r\n    }\r\n\r\n    return <div   className=\"SignUpContainer\">\r\n        <SignUpFormRedux onSubmit={handleSubmit} ComponentIsSignIn={props.ComponentIsSignIn} />\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\nimport LS from \"./AuthModal.module.css\";\r\nimport {SignUp} from \"./SignUp/SignUp\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\ntype TAuthPageProps = {\r\n    ShowSnackBar: TShowSnackBar\r\n    onAuth: () => void\r\n    onUnAuth: () => void\r\n}\r\n\r\n\r\nconst AuthPage: React.FC<TAuthPageProps> = (props) => {\r\n    const [ComponentToDraw, SetComponentToDraw] = useState(\"login\")\r\n    const ComponentIsSignIn = () => SetComponentToDraw(\"login\")\r\n    const ComponentIsSignUp = () => SetComponentToDraw(\"registration\")\r\n    return <div className={LS.modal}>\r\n        {\r\n            ComponentToDraw === \"login\"\r\n                ? <SignIn ComponentIsSignUp={ComponentIsSignUp} onAuth={props.onAuth}/>\r\n                : <SignUp ComponentIsSignIn={ComponentIsSignIn} ShowSnackBar={props.ShowSnackBar}/>\r\n        }\r\n    </div>\r\n}\r\nexport default AuthPage\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport type TSnackBarOptions = {\r\n    HideDuration? : number\r\n    severity : \"error\" | \"info\" | \"warning\" | \"success\"\r\n    position : {\r\n        vertical : \"bottom\" | \"top\"\r\n        horizontal : \"left\" | \"right\" | \"center\"\r\n    }\r\n    message : string\r\n}\r\nexport type TSnackBarProps = {\r\n    isShowing : boolean\r\n    onHide : (event?: React.SyntheticEvent, reason?: string) => void\r\n    options : TSnackBarOptions\r\n}\r\nconst  SnackBar : React.FC<TSnackBarProps>= (props)=> {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar  open={props.isShowing} autoHideDuration={props.options.HideDuration ? props.options.HideDuration : 3000}\r\n                      onClose={props.onHide} anchorOrigin={props.options.position}>\r\n\r\n                <Alert onClose={props.onHide} severity={props.options.severity}>\r\n                    {props.options.message}\r\n                </Alert>\r\n\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default SnackBar","import React from 'react'\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport avatar from \"../../assets/imgs/avatar.jpg\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\"\r\nimport {useInput} from \"../hooks/useInput\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n            overflow: 'hidden',\r\n            padding: theme.spacing(0, 3),\r\n        },\r\n        list: {\r\n            maxWidth: 400,\r\n            margin: `${theme.spacing(1)}px auto`,\r\n            padding: theme.spacing(2),\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        FileInput: {\r\n            display: \"none\"\r\n        },\r\n        GridItem: {\r\n            paddingTop: 35\r\n        }\r\n    }),\r\n);\r\n\r\ntype TUserProfileFormProps = {}\r\n\r\nconst UserProfileForm: React.FC<TUserProfileFormProps> = (props) => {\r\n    const classes = useStyles();\r\n    const NewUserNameInput = useInput(\"\")\r\n    const NewUserKLastNameInput = useInput(\"\")\r\n\r\n    return <div className={classes.list}>\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Grid item>\r\n                <input\r\n                    accept=\"image/*\"\r\n                    className={classes.FileInput}\r\n                    id=\"contained-button-file\"\r\n                    multiple\r\n                    type=\"file\"\r\n                />\r\n                <label id=\"contained-img\" htmlFor=\"contained-button-file\">\r\n                    <img style={{width: 100, height: 100, borderRadius: \"50%\", cursor: \"pointer\"}}\r\n                         src={avatar} alt=\"user avatar\"/>\r\n                </label>\r\n            </Grid>\r\n            <Grid item className={classes.GridItem}>\r\n                <CustomInput {...NewUserNameInput.bind}\r\n                             label={\"name\"}\r\n                             placeholder={\"Please, enter your name\"}\r\n                             width={250}\r\n                />\r\n            </Grid>\r\n            <Grid item className={classes.GridItem}>\r\n                <CustomInput {...NewUserKLastNameInput.bind}\r\n                             label={\"last name\"}\r\n                             placeholder={\"Please, enter your last name\"}\r\n                             width={250}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default UserProfileForm","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport UserProfileForm from \"./UserProfileForm\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ntype TModalUserProfile = {\r\n    IsOpen : boolean\r\n    Hide : ()=>void\r\n}\r\nconst ModalUserProfile : React.FC<TModalUserProfile>=(props) =>{\r\n    const profileNameInput = useInput(\"user name\")\r\n    const profileStatusInput = useInput(\"user status\")\r\n    const SaveProfileChanges = ()=> {\r\n        // some logic with req on server, then await for response, check if res.status === 200 then\r\n        // save new profile data in reducer\r\n        props.Hide()\r\n    }\r\n\r\n    return <div>\r\n        <Dialog\r\n                open={props.IsOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={props.Hide}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Profile\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <UserProfileForm/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={SaveProfileChanges} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    <Button onClick={props.Hide} color=\"primary\">\r\n                        go back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </div>\r\n}\r\n\r\nexport default ModalUserProfile","import React, {useState} from 'react';\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport MaterialNav from \"./Components/NavBar/MaterialNavBar\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport AS from \"./App.module.css\"\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport FavoritesPage from \"./Components/CalendarAndControllButtons/Favorites/FavoritesPage\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport ChangeWorklogModalContainer from \"./Components/ChangeWorklogModal/ChangeWorklogModalContainer\";\n\nimport {\n    ChangeIssue, AddIssue, DeleteIssue, SetIssues, SetCompletedIssues,\n    TAddIssue, TChangeIssue, TDeleteIssue, TSetIssues, TSetCompletedIssues\n} from \"./Data/IssuesReducer\";\n\nimport Issues from \"./Components/Issues/Issues\";\nimport {useBooleanState} from \"./Components/hooks/useBooleanState\";\nimport AuthPage from \"./Components/Auth/AuthPage\";\nimport SnackBar, {TSnackBarOptions} from \"./Components/SnackBar/SnackBar\";\nimport ModalUserProfile from \"./Components/UserProfile/ModalUserProfile\";\n\nexport type TAppOwnProps = {}\n\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    CompletedIssues: Array<string>\n    Issues: string[]\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue: TAddIssue\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    SetIssues: TSetIssues\n    SetCompletedIssues: TSetCompletedIssues\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\n\nexport type TShowSnackBar = (SnackBarOptions: TSnackBarOptions) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n    const [isAuth, setIsAuth] = useState<boolean | null>(null)\n    const WorklogChangeModalIsOpen = useBooleanState(false)\n    const FavoritesIsClicked = useBooleanState(false)\n    const UserProfileIsShowing = useBooleanState(false)\n    const [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    const [SnackBarIsShowing, SetSnackBarIsShowing] = useState(false)\n    const [SnackBarOptions, SetSnackBarOptions] = useState<TSnackBarOptions>({\n        message: \"something goes wrong\",\n        HideDuration: 3000,\n        position: {horizontal: \"center\", vertical: \"bottom\"},\n        severity: \"error\"\n    })\n\n    const OnSetTimerData = (TimerData: TTimerData | undefined) => SetTimerData(TimerData)\n    const onAuth = () => setIsAuth(true)\n    const onUnAuth = () => setIsAuth(false)\n\n    const ShowSnackBar = (SnackBarOptions: TSnackBarOptions) => {\n        SnackBarIsShowing && SetSnackBarIsShowing(false)\n        SetSnackBarOptions(SnackBarOptions)\n        SetSnackBarIsShowing(true)\n    }\n    const HideSnackBar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        SetSnackBarIsShowing(false);\n    }\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                    <div className=\"MainAppWrapper\">\n                        <MaterialNav OpenUserProfile={UserProfileIsShowing.Show} onUnAuth={onUnAuth}/>\n\n                        <Route exact path='/Issues'\n                               render={() => <Issues Issues={props.Issues}\n                                                     AddIssue={props.AddIssue}\n                                                     ChangeIssue={props.ChangeIssue}\n                                                     DeleteIssue={props.DeleteIssue}\n                                                     CompletedIssues={props.CompletedIssues}\n                                                     SetIssues={props.SetIssues}\n                                                     SetCompletedIssues={props.SetCompletedIssues}\n                               />}/>\n\n                        <Route path='/Home'\n                               render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                   <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                              OnAllClicked={FavoritesIsClicked.Hide}\n                                                              OnFavoritesClick={FavoritesIsClicked.Show}\n                                                              CurrentDate={props.CurrentDate}\n                                   />\n                               </div>}/>\n\n                        <div className={AS.MainWrapper}>\n                            <div className=\"WorklogsLayout\">\n\n                                <Route exact path='/Home/All'\n                                       render={() => <div className=\"WorkLogBlock\">\n                                           <div className=\"Worklogs\">\n                                               <WorkLogsContainer TimerData={TimerData}\n                                                                  openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                  ComponentToDraw={\"Worklogs\"}\n                                                                  ShowSnackBar={ShowSnackBar}\n                                                                  closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                                                  SetTimerData={OnSetTimerData}\n                                                                  WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                               />\n                                           </div>\n                                       </div>\n                                       }/>\n                                <Route exact path='/Home/Favorites'\n                                       render={() => <FavoritesPage FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                                    WorklogsBlocks={props.WorklogsBlocks}\n                                                                    openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                    TimerData={TimerData}\n                                                                    AddWorklog={props.AddWorklog}\n                                                                    PlayingWorklog={props.PlayingWorklog}\n                                                                    FavoritesWorklog={props.FavoritesWorklog}\n                                                                    SetTimerData={OnSetTimerData}\n                                                                    ShowSnackBar={ShowSnackBar}\n                                                                    closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                                                    WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                                                    ComponentToDraw=\"FavoritesWorklogs\"\n                                       />}/>\n\n                            </div>\n\n                            <div className=\"TimeTrackingLayout\">\n\n                                <Route path='/Home'\n                                       render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                           <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                         FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                         SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                         AddWorklog={props.AddWorklog}\n                                                         SetTimerData={OnSetTimerData}\n                                                         openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                         ChangeWorklog={props.ChangeWorklog}\n                                                         Issues={props.Issues}\n                                           />\n                                       </div>}/>\n                            </div>\n\n                        </div>\n\n                        <ChangeWorklogModalContainer\n                            SetTimerData={OnSetTimerData}\n                            WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                            closeWorklogChangeModal={() => WorklogChangeModalIsOpen.Hide()}\n                            TimerData={TimerData}\n                            Issues={props.Issues}\n                        />\n\n                        <ModalUserProfile IsOpen={UserProfileIsShowing.isDisplayed} Hide={UserProfileIsShowing.Hide}/>\n\n                    </div>\n                </>\n                : <AuthPage onAuth={onAuth} onUnAuth={onUnAuth} ShowSnackBar={ShowSnackBar}/>\n            }\n            <SnackBar isShowing={SnackBarIsShowing} onHide={HideSnackBar} options={SnackBarOptions}/>\n        </div>\n\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues: state.IssuesData.Issues,\n    CompletedIssues: state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById, ChangeWorklog, AddWorklog, AddToFavorite,\n        ChangeIssue, AddIssue, DeleteIssue, SetCompletedIssues, SetIssues\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__2qgrf\",\"RightLabel\":\"TimeSlider_RightLabel__1VbVI\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__3S1BR\",\"LabelValue\":\"TimeSlider_LabelValue__3KC9y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};"],"sourceRoot":""}