{"version":3,"sources":["Components/ChangeWorklogModal/TimeSlider/TimeSlider.module.css","Components/ChangeWorklogModal/ModalWindow.module.css","Components/ChangeWorklogModal/TimeSlider/SliderValueLeftLabel.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ChangeWorklogModal/TimeSlider/TimeSlider.tsx","Components/ChangeWorklogModal/ChangeWorklogModal.tsx","Components/ChangeWorklogModal/ChangeWorklogModalContainer.tsx"],"names":["module","exports","RightLabel","props","className","LS","LeftLabel","style","display","value","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","useState","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","document","querySelectorAll","el","SliderWidth","getComputedStyle","width","SliderPoseStart","SliderPoseEnd","Number","parseInt","substr","length","LeftMargin","RightMargin","useEffect","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","onChange","step","React","memo","ModalWorklogInput","useInput","WorklogToChange","TaskField","ModalIssueInput","Issue","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","TimerData","TimerValue","EmptyWorklogTimerEndHours","CurrentTime","ToFullTime","Date","getHours","getMinutes","EmptyWorklogTimeValues","CalculateNewStartTime","TimerTaskField","forceUpdate","TimerIssue","PlayingWorklog","StartTime","EndTime","close","e","preventDefault","closeWorklogChangeModal","SetTimerData","undefined","SetWorklogToChange","SetIsPlayingWorklogById","clear","WorklogChangeModalIsOpen","open","onClose","aria-labelledby","aria-describedby","id","container","justify","alignItems","item","paddingTop","CustomInput","bind","label","placeholder","MS","ModalInputError","IssuesSelectInput","Issues","paddingBottom","direction","onClick","Obj","NewWL","status","IsFavorites","ChangeFavoritesWorklog","ChangeWorklog","CustomizedButton","fontColor","bgColor","text","variant","fontSize","startIcon","prevProps","nextProps","connect","state","WorklogsData","AddWorklog"],"mappings":"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","file":"static/js/5.9934e460.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__2qgrf\",\"RightLabel\":\"TimeSlider_RightLabel__1VbVI\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__3S1BR\",\"LabelValue\":\"TimeSlider_LabelValue__3KC9y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalInputError\":\"ModalWindow_ModalInputError__2Aqa5\",\"Err\":\"ModalWindow_Err__UprFu\"};","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +30 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +\"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect,} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\nimport {TModalWindowContainerProps} from \"./ChangeWorklogModalContainer\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\"\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\"\r\nimport Grid from \"@material-ui/core/Grid/Grid\"\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowContainerProps> = (props) => {\r\n    let ModalWorklogInput = useInput(props.WorklogToChange && props.WorklogToChange.TaskField ? props.WorklogToChange.TaskField : \"\")\r\n    let ModalIssueInput = useInput(props.WorklogToChange && props.WorklogToChange.Issue ? props.WorklogToChange.Issue : \"\")\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let CurrentTime = ToFullTime(new Date().getHours()) + \":\" + ToFullTime(new Date().getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && ModalWorklogInput.forceUpdate(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && ModalIssueInput.forceUpdate(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && ModalWorklogInput.forceUpdate(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && ModalIssueInput.forceUpdate(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalWorklogInput.value.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalIssueInput.value.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalWorklogInput.value.length > 0\r\n            && ModalIssueInput.value.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalWorklogInput.value,\r\n                Issue: ModalIssueInput.value,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if (NewWL.IsFavorites) {\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            } else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            ModalWorklogInput.clear()\r\n            ModalIssueInput.clear()\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal()\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n        ModalWorklogInput.clear()\r\n        ModalIssueInput.clear()\r\n    }\r\n\r\n\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.WorklogChangeModalIsOpen}\r\n            onClose={props.closeWorklogChangeModal}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"New worklog\"}</DialogTitle>\r\n            <DialogContent >\r\n                <Grid container justify=\"center\" alignItems=\"center\" >\r\n\r\n                    <Grid item className=\"TimeSLider\" style={{paddingTop : \"10%\"}} >\r\n                        {\r\n                            ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                            <TimeSlider value={ModalTimeLineValues} disabled={false}\r\n                                        step={10} SetTimerValue={SetModalTimeLineValues}/>\r\n                        }\r\n                    </Grid>\r\n\r\n                    <Grid item style={{paddingTop: \"3rem\"}} className=\"Inputs\">\r\n\r\n                        <CustomInput {...ModalWorklogInput.bind} label={\"Task Field\"}\r\n                                     placeholder={\"Please, enter the task\"} width={500}/>\r\n\r\n                        {\r\n                            NewWorklogNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog\r\n                                name</div>\r\n                        }\r\n\r\n                        <div style={{paddingTop:\"1rem\"}}>\r\n                            {\r\n                                //@ts-ignore\r\n                                <IssuesSelectInput  Issues={props.Issues}{...ModalIssueInput.bind} />\r\n                            }\r\n                        </div>\r\n\r\n\r\n\r\n                        {\r\n                            NewIssueNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue\r\n                                name</div>\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item style={{paddingTop: \"3rem\",paddingBottom:\"1rem\"}} className=\"ContorlButtons\">\r\n                        <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\r\n\r\n                            <Grid item onClick={OnModalSubmit}>\r\n                                <CustomizedButton fontColor=\"blue\" bgColor=\"white\" text=\"save\"\r\n                                                  variant=\"outlined\" fontSize={14} startIcon={<SaveIcon/>}/>\r\n                            </Grid>\r\n\r\n                            <Grid onClick={props.closeWorklogChangeModal}>\r\n                                <CustomizedButton fontColor=\"red\" text={\"go back\"}\r\n                                                  variant={\"outlined\"} fontSize={14} />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n\r\n            </DialogContent>\r\n        </Dialog>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(ChangeWorklogModal, (prevProps, nextProps) => {\r\n    if (prevProps.WorklogChangeModalIsOpen !== nextProps.WorklogChangeModalIsOpen) return false\r\n    else return true\r\n})","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange, ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: (data :TTimerData | undefined) => void\r\n    Issues: string[]\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n}\r\n\r\nexport type TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nconst ChangeWorklogModalContainer: React.FC<TModalWindowContainerProps> = (props) => {\r\n    return <ChangeWorklogModal {...props}/>\r\n}\r\n\r\n\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog, ChangeFavoritesWorklog\r\n})(ChangeWorklogModalContainer)"],"sourceRoot":""}