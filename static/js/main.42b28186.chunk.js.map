{"version":3,"sources":["assets/imgs/new_worklog_button.svg","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg","Components/NavBar/NavBar.module.css","Components/WorkLogs/WorkLog.module.css","Components/Calendar/Calendar.module.css","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/calendar.svg","Components/TimeTracking/TimeTracking.module.css","Components/ChangeWorklogModal/ModalWindow.module.css","Components/CalendarAndControllButtons/Favorites/Favorites.module.css","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","API/requests.ts","assets/secondary/GetCurrentDate.ts","Data/WorkLogsReducer.ts","Data/CalendarReducer.ts","Data/IssuesReducer.ts","Data/redux-store.ts","Components/NavBar/MaterialNavBar.tsx","assets/secondary/DifferenceInTime.js","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/CustomizedButton/CustomizedButton.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/secondary/CalculateTime.js","Components/ChangeWorklogModal/CustomInput.tsx","Components/Issues/IssuesSelectInput.tsx","Components/hooks/useInput.ts","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/CalendarAndControllButtons/Favorites/FavoritesPage.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/CalendarAndControllButtons/All/All.tsx","Components/CalendarAndControllButtons/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueLeftLabel.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ChangeWorklogModal/TimeSlider/TimeSlider.tsx","Components/ChangeWorklogModal/ChangeWorklogModal.tsx","Components/ChangeWorklogModal/ChangeWorklogModalContainer.tsx","Components/Issues/CustomListInput.tsx","Components/Issues/IssueListItem.tsx","Components/Issues/IssuesList.tsx","Components/Issues/Issues.tsx","Components/hooks/useBooleanState.ts","Components/Auth/AuthForm.tsx","Components/Auth/Login/SignIn.tsx","Components/Auth/Registartion/SignUp.tsx","Components/Auth/AuthPage.tsx","Components/SnackBar/SnackBar.tsx","Components/UserProfile/UserProfileForm.tsx","Components/UserProfile/ModalUserProfile.tsx","App.tsx","index.tsx","App.module.css","Components/ChangeWorklogModal/TimeSlider/TimeSlider.module.css","Components/Auth/Login/LoginModal.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css","assets/imgs/avatar.jpg","Components/DeleteConfirmModal/DeleteConfirm.module.css","Components/Timer/Timer.module.css","Components/CalendarAndControllButtons/All/All.module.css"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","API","WorklogData","post","response","data","days","months","GetCurrentDate","date","Date","CurrentYear","getFullYear","CurrentMonth","getMonth","CurrentDay","getDate","DayName","getDay","DEL_WORKLOG","CurrentDate","randomInteger","min","max","rand","Math","random","floor","DefaultState","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","id","Worklogs","StartTime","EndTime","TaskField","status","NestingItems","TimerValue","Issue","IsFavorites","PlayingWorklog","WorklogToChange","FavoritesWorklogs","AddWorklog","NewWorklog","type","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","WorkLogId","SetWorklogToChange","undefined","AddToFavorite","WorklogId","WorklogsReducer","state","action","GetWorklogsBlockCopy","JSON","parse","stringify","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","map","WorklogBlock","Index","Worklog","WLIndex","length","NestingItem","NestingIndex","EmptyWorklog","ParentId","WorklogToCreate","some","WBL","unshift","WB","filter","FWorklog","push","CNestingItem","FNestingItem","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","DelParentId","DelWorklogId","WL","WBLtrue","options","target","FavoritesWorklog","FavoritesWorklogsCopy","Nest","RandomStatus","arr","RangeError","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","Signature","DayNumber","DayStatus","n","p","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CalendarReducer","Day","Issues","CompletedIssues","IssuesReducer","GetIssuesCopy","From","CompletedIssue","IssuesCopy","findIndex","value","OldIssue","NewIssue","reducers","combineReducers","form","formReducer","CalendarData","WorklogsData","WorkLogsReducer","IssuesData","store","createStore","applyMiddleware","thunkMiddleWare","window","useStyles","makeStyles","theme","createStyles","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","sectionDesktop","sectionMobile","React","memo","props","classes","useState","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMobileMenuOpen","Boolean","LogOut","localStorage","setItem","location","reload","renderMobileMenu","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","IconButton","color","onClick","OpenUserProfile","aria-label","aria-controls","aria-haspopup","Avatar","alt","src","avatar","className","AppBar","position","Toolbar","HS","NavLinks","item","to","Tooltip","arrow","placement","edge","event","currentTarget","DifferenceInTime","differentRes","hours","minuts","TimesArr","firstDate","secondDate","string","split","different","round","abs","LineStroke","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","ContentContainer","ComponentToDraw","CurrentWorklog","ContainerEl","e","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","findColorObject","colorName","green","purple","grey","red","blue","teal","common","yellow","margin","CustomizedButton","bgColor","ColorButton","withStyles","root","fontColor","palette","getContrastText","backgroundColor","fontSize","Button","startIcon","variant","text","DeleteWorklogConfirmModal","isOpen","DS","modal","ModalTextContainer","NewWorklogControlButtonsContainer","NewWorklogControlButtons","DeleteModalParams","DeleteWorklog","DeleteFromFavorites","MS","bg","NestingWorkLog","key","WorkLog","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","style","transitionTimingFunction","transitionDuration","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","Fragment","width","height","borderRadius","Bar","now","WorklogInfo","CreateSnackBarOptions","severity","message","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","cursor","ShowSnackBar","SetWorklogStatus","every","ObjToSend","SendWorklogBlockThunk","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","toString","WorklogInfoContainer","el","WorkLogsContainer","this","WorklogsBlocks","paddingTop","Component","compose","connect","WorklogBlockData","dispatch","a","ToFullTime","Numbered","Number","parseInt","CalculateNewStartTime","CurrentTime","minutes","CurrentHours","CurrentMinutes","CustomInput","TextField","onChange","label","placeholder","multiline","IssuesSelectInput","formControl","minWidth","Item","FormControl","InputLabel","htmlFor","Select","native","defaultValue","useInput","initialValue","setValue","bind","clear","forceUpdate","val","Timer","substr","seconds","setSeconds","setMinutes","setHours","isActive","setIsActive","WorklogInput","IssueInput","useEffect","interval","clearInterval","setInterval","TS","TimeRContainer","marginTop","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","paddingLeft","TimeTracking","TTS","TTLayout","strokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","FavoritesPage","NoFavoritesIssuesContainer","FavoritesText","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","MonthName","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","StateCopy","getState","WorklogsBlockToBeScrolled","Month","document","getElementById","SearchWorklogBlock","SetClickedMonthDay","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","DropDownProgressStatus","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","Calendar","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","FavoritesTextContainer","OnFavoritesClick","pink","CalendarAndControlButtons","AS","CalendarAndButtons","RightLabel","LeftLabel","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","querySelectorAll","SliderWidth","getComputedStyle","SliderPoseStart","SliderPoseEnd","LeftMargin","RightMargin","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","step","ChangeWorklogModal","ModalWorklogInput","ModalIssueInput","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","EmptyWorklogTimerEndHours","getHours","getMinutes","EmptyWorklogTimeValues","close","preventDefault","closeWorklogChangeModal","WorklogChangeModalIsOpen","ModalTitle","ModalSlider","ModalTextFields","NewWorklogContentContainer","ModalInputError","Obj","NewWL","ChangeFavoritesWorklog","CloseButtonMargin","ChangeWorklogModalContainer","CustomListInput","AddIssueInput","Grid","innerWidth","container","onSubmit","size","SubmitButtonText","onCancel","marginLeft","CancelButtonText","IssueListItem","EditInputIsShowing","SetEditInputIsShowing","EditInputValue","labelId","ChangeIssue","sm","ListItem","role","button","handleToggle","ListItemIcon","Checkbox","checked","indexOf","tabIndex","disableRipple","inputProps","ListItemText","primary","DeleteIssue","blueGrey","IssuesList","items","AddIssueOpened","SetAddIssueOpened","AddNewIssueInput","not","b","currentIndex","newChecked","splice","setChecked","numberOfChecked","Card","CardHeader","cardHeader","indeterminate","subheader","AddIssue","Divider","List","list","dense","component","padding","background","paper","overflow","paddingBottom","intersection","IssuesChecked","CompletedIssuesChecked","alignItems","direction","SetCompletedIssues","concat","SetIssues","useBooleanState","isDisplayed","SetIsOpen","Show","Hide","AuthForm","EmailInputValue","SetEmailInputValue","PasswordInputValue","SetPasswordInputValue","EmailErrText","SetEmailErrText","PasswordErrText","SetPasswordErrText","autoComplete","InputsContainer","error","helperText","descr","PasswordContainer","xs","CustomErr","ConfirmButtonHandler","ConfirmButtonStyles","ConfirmButtonText","GoBackButtonHandler","GoBackButtonStyles","GoBackButtonText","SignIn","AuthErr","SetAuthErr","EmailFieldValue","PasswordFieldValue","ComponentIsSignUp","SignUp","RegistrationErr","HideDuration","ComponentIsSignIn","AuthPage","SetComponentToDraw","Alert","elevation","SnackBar","Snackbar","isShowing","autoHideDuration","onHide","maxWidth","FileInput","GridItem","UserProfileForm","NewUserNameInput","NewUserKLastNameInput","justify","accept","multiple","Transition","forwardRef","ref","Slide","ModalUserProfile","Dialog","IsOpen","TransitionComponent","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","UserProfileIsShowing","SnackBarIsShowing","SetSnackBarIsShowing","SnackBarOptions","SetSnackBarOptions","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","TImeTracking_and_Calendar","reason","ReactDOM","basename","process","AppContainer"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,qD,oBCA3CD,EAAOC,QAAU,IAA0B,sD,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCC3CD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,KAAO,uB,mBCA7DD,EAAOC,QAAU,CAAC,qBAAuB,sCAAsC,UAAY,2BAA2B,sBAAwB,uCAAuC,cAAgB,+BAA+B,kBAAoB,mCAAmC,oBAAsB,qCAAqC,gBAAkB,iCAAiC,0BAA4B,2CAA2C,wBAA0B,yCAAyC,4BAA8B,6CAA6C,aAAe,8BAA8B,aAAe,8BAA8B,mBAAqB,oCAAoC,eAAiB,gCAAgC,qBAAuB,sCAAsC,aAAe,8BAA8B,SAAW,0BAA0B,UAAY,2BAA2B,QAAU,yBAAyB,MAAQ,uBAAuB,wBAA0B,yCAAyC,MAAQ,uBAAuB,UAAY,2BAA2B,qBAAuB,sCAAsC,oBAAsB,qCAAqC,WAAa,4BAA4B,wBAA0B,yCAAyC,WAAa,4BAA4B,WAAa,4BAA4B,kBAAoB,mCAAmC,UAAY,2BAA2B,eAAiB,gCAAgC,kBAAoB,mCAAmC,cAAgB,iC,mBCA/qDD,EAAOC,QAAU,CAAC,kBAAoB,oCAAoC,gBAAkB,kCAAkC,aAAe,+BAA+B,aAAe,+BAA+B,iBAAmB,mCAAmC,uBAAyB,yCAAyC,iCAAmC,mDAAmD,wBAA0B,0CAA0C,gCAAkC,kDAAkD,uBAAyB,yCAAyC,8BAAgC,gDAAgD,mCAAqC,qDAAqD,+BAAiC,iDAAiD,oCAAsC,sDAAsD,uBAAyB,yCAAyC,aAAe,+BAA+B,gBAAkB,kCAAkC,aAAe,+BAA+B,oBAAsB,sCAAsC,yBAA2B,2CAA2C,0BAA4B,4CAA4C,iCAAmC,mDAAmD,yBAA2B,2CAA2C,GAAK,qBAAqB,YAAc,gC,oBCD1jDD,EAAOC,QAAU,IAA0B,yC,oBCC3CD,EAAOC,QAAU,CAAC,WAAa,iC,oBCD/BD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,yD,oBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCC3CD,EAAOC,QAAU,CAAC,4BAA8B,kDAAkD,SAAW,+BAA+B,UAAY,gCAAgC,kBAAoB,wCAAwC,mBAAqB,yCAAyC,iBAAmB,uCAAuC,sBAAwB,4CAA4C,aAAe,mCAAmC,oBAAsB,0CAA0C,WAAa,iCAAiC,qBAAuB,2CAA2C,qBAAuB,2CAA2C,qCAAuC,2DAA2D,4BAA8B,kDAAkD,kBAAoB,wCAAwC,WAAa,mC,yDCA/8BD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,GAAK,wBAAwB,WAAa,gCAAgC,YAAc,iCAAiC,gBAAkB,qCAAqC,2BAA6B,gDAAgD,uBAAyB,4CAA4C,gBAAkB,qCAAqC,uBAAyB,4CAA4C,kCAAoC,uDAAuD,yBAA2B,8CAA8C,wBAA0B,6CAA6C,kBAAoB,uCAAuC,uBAAyB,4CAA4C,IAAM,2B,mBCAp2BD,EAAOC,QAAU,CAAC,kBAAoB,qCAAqC,wBAA0B,2CAA2C,KAAO,wBAAwB,WAAa,8BAA8B,cAAgB,iCAAiC,2BAA6B,8CAA8C,uBAAyB,4C,mBCA/WD,EAAOC,QAAU,CAAC,mBAAqB,wCAAwC,mBAAqB,wCAAwC,cAAgB,mCAAmC,aAAe,kCAAkC,SAAW,8BAA8B,SAAW,8BAA8B,sBAAwB,6C,yKCEpVC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,mCAUAC,EAAM,SACQC,GAAkC,OAAD,0HAC7BN,EAASO,KAAT,WAAkCD,GADL,cAC9CE,EAD8C,yBAE7CA,EAASC,MAFoC,8CCftDC,EAAO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAC5CC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MACrD,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAErDC,EAAiB,WAC1B,IAAIC,EAAO,IAAIC,KACXC,EAAcF,EAAKG,cACnBC,EAAeN,EAAOE,EAAKK,YAC3BC,EAAaN,EAAKO,UAUtB,MAPgC,CAC5BC,QAHUX,EAAMG,EAAKS,UAIrBP,cAEAE,eACAE,eCXFI,EAAc,uBAQPC,EAAW,UAAMZ,IAAiBS,QAAU,IAAMT,IAAiBK,aAAxD,YAAwEL,IAAiBO,YAEpGM,EAAgB,SAACC,EAAaC,GACvC,IAAIC,EAAOF,EAAMG,KAAKC,UAAYH,EAAM,EAAID,GAC5C,OAAOG,KAAKE,MAAMH,IA+ClBI,EAAe,CACfC,eAAgB,CAAC,CACbC,UAAW,CACPC,iBAAkB,gBAClBC,cAAe,KACfC,YAAa,WACbC,GAAI,GAERC,SAAU,CAAC,CACPC,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,UACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,UACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,kBACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,eACJQ,MAAO,KACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,mBACXC,OAAQ,UACRE,WAAY,WACZP,GAAI,cACJM,aAAc,KACdE,MAAO,WACPC,aAAa,GAEb,CACIP,UAAW,QACXC,QAAS,QACTC,UAAW,qBACXC,OAAQ,UACRL,GAAI,aACJO,WAAY,WACZD,aAAc,KACdE,MAAO,kBACPC,aAAa,GAEjB,CACIP,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,KACRL,GAAI,cACJO,WAAY,WACZD,aAAc,KACdE,MAAO,iBACPC,aAAa,KAGrB,CACIb,UAAW,CACPC,iBAAkB,gBAClBC,cAAe,UACfC,YAAa,WACbC,GAAI,GAERC,SAAU,CAAC,CACPC,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,SACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,UACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,iBACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,eACJQ,MAAO,iBACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,mBACXC,OAAQ,UACRE,WAAY,WACZP,GAAI,cACJQ,MAAO,kBACPC,aAAa,EACbH,aAAc,CAAC,CACXJ,UAAW,QACXC,QAAS,QACTC,UAAW,qBACXC,OAAQ,UACRL,GAAI,aACJO,WAAY,WACZC,MAAO,kBACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,KACRL,GAAI,cACJO,WAAY,WACZC,MAAO,kBACPC,aAAa,OAIzB,CACIb,UAAW,CACPC,iBAAkB,gBAClBC,cAAe,UACfC,YAAa,WACbC,GAAI,GAERC,SAAU,CAAC,CACPC,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,UACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,2CACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,YACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,mBACXC,OAAQ,UACRE,WAAY,WACZP,GAAI,eACJM,aAAc,KACdE,MAAO,kBACPC,aAAa,GAEb,CACIP,UAAW,QACXC,QAAS,QACTC,UAAW,8BACXC,OAAQ,SACRL,GAAI,cACJO,WAAY,WACZD,aAAc,KACdE,MAAO,iBACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,2BACXC,OAAQ,KACRL,GAAI,cACJO,WAAY,WACZD,aAAc,KACdE,MAAO,iBACPC,aAAa,KAGzB,CACIb,UAAW,CACPC,iBAAkB,gBAClBC,cAAe,SACfC,YAAa,WACbC,GAAI,GAERC,SAAU,CAAC,CACPC,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,UACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,wBACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,gBACJQ,MAAO,iBACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,0BACXC,OAAQ,UACRE,WAAY,WACZP,GAAI,eACJM,aAAc,KACdE,MAAO,YACPC,aAAa,GAEb,CACIP,UAAW,QACXC,QAAS,QACTC,UAAW,qBACXC,OAAQ,UACRL,GAAI,cACJO,WAAY,WACZD,aAAc,KACdE,MAAO,kBACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,eACXC,OAAQ,KACRL,GAAI,cACJO,WAAY,WACZD,aAAc,KACdE,MAAO,WACPC,aAAa,KAEtB,CACCb,UAAW,CACPC,iBAAkB,gBAClBC,cAAe,KACfC,YAAa,WACbC,GAAI,GAERC,SAAU,CAAC,CACPC,UAAW,QACXC,QAAS,QACTC,UAAW,eACXE,aAAc,KACdD,OAAQ,KACRE,WAAY,WACZP,GAAI,eACJQ,MAAO,UACPC,aAAa,GAEb,CACIP,UAAW,QACXC,QAAS,QACTC,UAAW,kBACXC,OAAQ,KACRC,aAAc,KACdC,WAAY,WACZP,GAAI,eACJQ,MAAO,KACPC,aAAa,GACd,CACCP,UAAW,QACXC,QAAS,QACTC,UAAW,wBACXC,OAAQ,SACRC,aAAc,KACdC,WAAY,WACZP,GAAI,cACJQ,MAAO,WACPC,aAAa,MAI7BC,eAAgB,KAChBC,gBAAiB,KACjBC,kBAAmB,IA0UVC,EAAa,SAACC,EAAwBL,GAC/C,MAAO,CAACM,KAhqBQ,uBAgqBWD,aAAYL,gBAS9BO,EAA0B,SAACC,EAAoBC,EAAoBT,GAC5E,MAAO,CAACM,KAxqByB,wCAwqBWE,YAAWC,YAAWT,gBAIzDU,EAAgB,SAACC,EAAmBN,GAC7C,MAAO,CAACC,KA5qBW,0BA4qBWK,YAAWN,eAIhCO,EAAqB,WAAwD,IAAvDV,EAAsD,4DAAdW,EACvE,MAAO,CAACP,KAhrBkB,iCAgrBWJ,oBAI5BY,EAAgB,SAACC,GAC1B,MAAO,CAACT,KAprBY,2BAorBWS,cAmCpBC,EA7WS,WAAkF,IAAjFC,EAAgF,uDAAxEhC,EAAciC,EAA0D,uCAE/FC,EAAuB,WACzB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUL,EAAM/B,kBAIrCqC,EAAkB,SAAChC,GAMrB,IAAIiC,EAA2CL,IAC3CM,EAAgB,GAChBC,OAAoBb,EACpBc,OAAed,EACfe,OAAsBf,EA0B1B,OAxBAW,EAAmBK,KAAI,SAACC,EAAcC,GAClCD,EAAatC,SAASqC,KAAI,SAACG,EAASC,GAEmD,IAAD,EAA9ED,EAAQnC,cAAgBmC,EAAQnC,aAAaqC,OAAS,GAAKF,EAAQzC,KAAOA,EAC1E,UAAAyC,EAAQnC,oBAAR,SAAsBgC,KAAI,SAACM,EAAaC,GAChCD,EAAY5C,KAAOA,IAEnBkC,EAAa,eACNU,GAEPT,EAAoBK,EACpBH,EAAsBQ,EACtBT,EAAeM,MAInBD,EAAQzC,KAAOA,IACfmC,EAAoBK,EACpBN,EAAgBO,EAChBL,EAAeM,SAKxB,CAACR,gBAAeC,oBAAmBC,eAAcC,wBAG5D,OAAQV,EAAOZ,MACX,IA9ZY,uBAgaR,IAAIkB,EAA2CL,IAC3CkB,EAAyB,CACzB5C,UAAW,KACXC,QAAS,KACTH,GAAIb,EAAc,EAAG,KACrBmB,aAAc,KACdF,UAAW,KACXI,MAAO,KACPD,WAAY,WACZF,OAAQ,SACR0C,cAAUzB,EACVb,YAAakB,EAAOlB,aAEpBuC,EAAkB,GAuBtB,OApBMA,EADNrB,EAAOb,WACiBa,EAAOb,WACPgC,EAEpBb,EAAmBgB,MAAK,SAAAC,GAAG,OAAIA,EAAItD,UAAUC,mBAAqBX,KAClE+C,EAAmBK,KAAI,SAAAY,GACnBA,EAAItD,UAAUC,mBAAqBX,GAAegE,EAAIjD,SAASkD,QAAQH,MAG3Ef,EAAmBkB,QAAQ,CACvBvD,UAAW,CACPI,GAAIb,EAAc,EAAG,KACrBU,iBAAkBX,EAClBY,cAAe,SACfC,YAAa,YACdE,SAAU,CACT+C,KAKL,2BACAtB,GADP,IAEI/B,eAAgBsC,EAChBvB,eAAgBsC,EAChBpC,kBAAmBe,EAAOlB,YAAP,sBAAyBiB,EAAMd,mBAA/B,CAAkDkC,IAAgB,KAI7F,IA1c6B,wCA2czB,IAAIZ,EAAgBF,EAAgBL,EAAOT,WAAWgB,cAEtD,OADAP,EAAOlB,YAAcyB,EAAczB,aAAc,EAAOyB,EAAczB,aAAc,EAC7E,2BACAiB,GADP,IAEIhB,eAAgBiB,EAAOV,UACnBiB,EACE,OAGd,IAnde,0BAodX,IAAID,EAA2CL,IAwD/C,OAtDAK,EAAmBK,KAAI,SAAAc,GAAE,OAAIA,EAAGnD,SAASqC,KAAI,SAAAG,GAMO,IAAD,EA2BrC,EA/BNW,EAAGxD,UAAUC,mBAAqBX,IAE/BuD,EAAQjC,QAAUmB,EAAOb,WAAWN,MAEhCiC,EAAQzC,KAAO2B,EAAOb,WAAWd,IAChCoD,EAAGnD,SAAWmD,EAAGnD,SAASoD,QAAO,SAAAC,GAAQ,OAAEA,EAAStD,KAAO2B,EAAOb,WAAWd,MAC1EyC,EAAQnC,eAAgB,UAAAmC,EAAQnC,oBAAR,eAAsBqC,QAAS,EACtDF,EAAQnC,aAAagC,KAAI,SAAAM,GAAc,IAAD,EAC/BA,EAAY5C,KAAO2B,EAAOb,WAAWd,GACjC4C,EAAYpC,QAAUmB,EAAOb,WAAWN,QAEvCoC,EAAYrC,WAAaoB,EAAOb,WAAWP,WAC3CqC,EAAYpC,MAAQmB,EAAOb,WAAWN,MACtCoC,EAAYxC,UAAYuB,EAAOb,WAAWV,UAC1CwC,EAAYzC,QAAUwB,EAAOb,WAAWX,QACxCyC,EAAY1C,UAAYyB,EAAOb,WAAWZ,WAE3C,UAAAuC,EAAQnC,oBAAR,SAAsBiD,KAAK5B,EAAOb,eAG7C2B,EAAQnC,aAAe,CAACqB,EAAOb,cAI/B2B,EAAQlC,WAAaoB,EAAOb,WAAWP,WACvCkC,EAAQjC,MAAQmB,EAAOb,WAAWN,MAClCiC,EAAQrC,UAAYuB,EAAOb,WAAWV,UACtCqC,EAAQvC,UAAYyB,EAAOb,WAAWZ,UACtCuC,EAAQtC,QAAUwB,EAAOb,WAAWX,QACpCsC,EAAQpC,OAASsB,EAAOb,WAAWT,QAGxCoC,EAAQzC,KAAO2B,EAAOb,WAAWd,IAChCyC,EAAQlC,WAAaoB,EAAOb,WAAWP,WACvCkC,EAAQjC,MAAQmB,EAAOb,WAAWN,MAClCiC,EAAQrC,UAAYuB,EAAOb,WAAWV,UACtCqC,EAAQvC,UAAYyB,EAAOb,WAAWZ,UACtCuC,EAAQtC,QAAUwB,EAAOb,WAAWX,QACpCsC,EAAQpC,OAASsB,EAAOb,WAAWT,QAE/BoC,EAAQnC,eAAgB,UAAAmC,EAAQnC,oBAAR,eAAsBqC,QAAS,GAC3DF,EAAQnC,aAAagC,KAAI,SAAAkB,GAC0E,IAAD,EAA3FA,EAAaxD,KAAO2B,EAAOb,WAAWd,IAAMwD,EAAahD,QAAUmB,EAAOb,WAAWN,QACpFiC,EAAQnC,aAAR,UAAuBmC,EAAQnC,oBAA/B,aAAuB,EAAsB+C,QAAO,SAAAI,GAAY,OAAEA,EAAazD,KAAO2B,EAAOb,WAAWd,MACxGoD,EAAGnD,SAASsD,KAAK5B,EAAOb,uBAQzC,2BACAY,GADP,IAEI/B,eAAgBsC,IAGxB,KAAKhD,EACD,IAAIgD,EAA2CL,IAC3C8B,EAAsC,GACtCC,EAA6D,GAC7DC,EAA2B,GAmB/B,OAjBA3B,EAAmBK,KAAI,SAACY,EAAKW,GAErBlC,EAAOmC,YACPZ,EAAIjD,SAASqC,KAAI,SAACG,EAASC,GACiB,IAAD,EAAnCD,EAAQzC,KAAO2B,EAAOmC,cACtBH,EAAmBJ,KAAnB,UAAwBd,EAAQnC,oBAAhC,aAAwB,EAAsB+C,QAAO,SAAAT,GAAW,OAAIA,EAAY5C,KAAO2B,EAAOoC,iBAC9F9B,EAAmB4B,GAAO5D,SAASyC,GAASpC,aAAeqD,EAAmBE,QAItFH,EAAYH,KAAKL,EAAIjD,SAASoD,QAAO,SAAAW,GAAE,OAAIA,EAAGhE,KAAO2B,EAAOoC,iBAC5D9B,EAAmB4B,GAAO5D,SAAWyD,EAAYG,IAEzB,IAAxBX,EAAIjD,SAAS0C,SACbiB,EAA2B3B,EAAmBoB,QAAO,SAAAY,GAAO,OAAIA,IAAYf,SAG7E,2BACAxB,GADP,IAEI/B,eAAgBiE,EAAyBjB,OAAS,EAAIiB,EAA2B3B,IAGzF,IA5iBsB,iCA6iBlB,OAAO,2BACAP,GADP,IAEIf,gBAAiBgB,EAAOhB,gBAAkBgB,EAAOhB,gBAAkB,OAG3E,IAjjBgB,2BAijBQ,IAAD,EACGqB,EAAgBL,EAAOH,WAAxCU,EADc,EACdA,cACL,OAAO,2BACAR,GADP,IAEId,kBAAkB,GAAD,mBAAMc,EAAMd,mBAAZ,CAA+BsB,MAGxD,IAvjBmB,8BAwjBf,IAAID,EAA2CL,IAW/C,MAV8B,YAA1BD,EAAOuC,QAAQC,OACflC,EAAmBK,KAAI,SAAAc,GAAE,OAAIA,EAAGnD,SAASqC,KAAI,SAAAG,GACrCA,EAAQzC,KAAO2B,EAAOuC,QAAQlE,KAAIyC,EAAQpC,OAASsB,EAAOuC,QAAQ7D,cAG1E4B,EAAmBK,KAAI,SAAAc,GACfA,EAAGxD,UAAUI,KAAO2B,EAAOuC,QAAQlE,KAAIoD,EAAGxD,UAAUE,cAAgB6B,EAAOuC,QAAQ7D,WAIxF,2BACAqB,GADP,IAEI/B,eAAgBsC,IAGxB,IAvkBsB,iCAwkBlB,OAAO,2BACAP,GADP,IAEId,kBAAmBc,EAAMd,kBAAkByC,QAAO,SAAAe,GAAgB,OAAIA,EAAiBpE,KAAO2B,EAAOH,eAG7G,IA5kByB,oCA6kBrB,IAAIS,EAA2CL,IAC3CyC,EAAyCxC,KAAKC,MAAMD,KAAKE,UAAUL,EAAMd,oBA6D7E,OA5DAyD,EAAsB/B,KAAI,SAAA8B,GAAqB,IAAD,EACtCA,EAAiB9D,eAAgB,UAAA8D,EAAiB9D,oBAAjB,eAA+BqC,QAAS,EACzEyB,EAAiB9D,aAAagC,KAAI,SAAAM,GAC1BA,EAAY5C,KAAO2B,EAAOH,YAC1BoB,EAAYxC,UAAYuB,EAAOb,WAAWV,UAC1CwC,EAAYpC,MAAQmB,EAAOb,WAAWN,MACtCoC,EAAY1C,UAAYyB,EAAOb,WAAWZ,UAC1C0C,EAAYzC,QAAUwB,EAAOb,WAAWX,QACxCyC,EAAYrC,WAAaoB,EAAOb,WAAWP,gBAInD6D,EAAiBhE,UAAYuB,EAAOb,WAAWV,UAC/CgE,EAAiB5D,MAAQmB,EAAOb,WAAWN,MAC3C4D,EAAiBlE,UAAYyB,EAAOb,WAAWZ,UAC/CkE,EAAiBjE,QAAUwB,EAAOb,WAAWX,QAC7CiE,EAAiB7D,WAAaoB,EAAOb,WAAWP,eAIxD0B,EAAmBgB,MAAK,SAAAC,GAAG,OAAIA,EAAItD,UAAUC,mBAAqBX,KAC5D+C,EAAmBK,KAAI,SAAAY,GAErBA,EAAIjD,SAASgD,MAAK,SAAAR,GAAO,aAAIA,EAAQzC,KAAO2B,EAAOH,YAAtB,UACtBiB,EAAQnC,oBADc,aACtB,EAAsB2C,MAAK,SAAAqB,GAAI,OAAIA,EAAKtE,KAAO2B,EAAOH,iBAEvD0B,EAAIjD,SAASgD,MAAK,SAAAR,GAAO,OAAIA,EAAQnC,cAAgBmC,EAAQnC,aAAaqC,OAAS,KACnFO,EAAIjD,SAASqC,KAAI,SAAAG,GAAY,IAAD,EAC1B,UAAAA,EAAQnC,oBAAR,SAAsBgC,KAAI,SAAAM,GAClBA,EAAY5C,KAAO2B,EAAOH,YAC1BoB,EAAYrC,WAAaoB,EAAOb,WAAWP,WAC3CqC,EAAY1C,UAAYyB,EAAOb,WAAWZ,UAC1C0C,EAAYzC,QAAUwB,EAAOb,WAAWX,QACxCyC,EAAYxC,UAAYuB,EAAOb,WAAWV,UAC1CwC,EAAYpC,MAAQmB,EAAOb,WAAWN,aAIhD0C,EAAIjD,SAASqC,KAAI,SAAAG,GACXA,EAAQzC,KAAO2B,EAAOH,YACtBiB,EAAQlC,WAAaoB,EAAOb,WAAWP,WACvCkC,EAAQvC,UAAYyB,EAAOb,WAAWZ,UACtCuC,EAAQtC,QAAUwB,EAAOb,WAAWX,QACpCsC,EAAQrC,UAAYuB,EAAOb,WAAWV,UACtCqC,EAAQjC,MAAQmB,EAAOb,WAAWN,UAGxC0C,EAAIjD,SAASkD,QAAQxB,EAAOb,eAEpCmB,EAAmBkB,QAAQ,CACzBvD,UAAW,CACPC,iBAAkBX,EAClBY,cAAe,SACfE,GAAIb,EAAc,EAAG,KACrBY,YAAa,YAEjBE,SAAU,CACN0B,EAAOb,cAGZ,2BACAY,GADP,IAEI/B,eAAgBsC,EAChBrB,kBAAmByD,IAI3B,QACI,OAAO3C,IC1pBb6C,EAAe,SAACC,GAClB,GAAIA,EAAI7B,QAAU,EACd,MAAM,IAAI8B,WAAW,iDAGzB,OAAOD,EADIjF,KAAKE,MAAMF,KAAKC,SAAWgF,EAAI7B,UAKxC+B,EAAmB,WAAsG,IAArGC,EAAoG,uDAA1E,GAAIC,EAAsE,uCAA9CC,EAA8C,uCAAtBC,EAAsB,uCACtHC,EAAgB,GAChBC,EAAsB,GACtBC,EAA4B,GAC5BC,EAA4B,GAC5BC,EAAuB,GAE3B,GAAIP,EAAiBC,EAAiBC,EAAYC,EAC9C,MAAM,IAAIN,WAAJ,2CAAmDM,EAAnD,iDAGN,IAAK,IAAIK,EAAI,EAAGA,GAAKR,EAAgBQ,IACjCH,EAAa1B,KAAK,CACd8B,UAAW,QACXC,UAAWF,EACXG,UAAWhB,EAAaI,GACxB3E,GAAIb,EAAc,EAAG,OAG7B,IAAK,IAAIqG,EAAI,EAAGA,GAAKV,EAAWU,IAC5BL,EAAQ5B,KAAK,CACT8B,UAAW,OACXC,UAAWE,EACXD,UAAWhB,EAAaI,GACxB3E,GAAIb,EAAc,EAAG,OAG7B,IAAK,IAAIsG,EAAI,EAAGA,GAAKZ,EAAgBY,IACjCP,EAAa3B,KAAK,CACd8B,UAAW,QACXC,UAAWG,EACXF,UAAWhB,EAAaI,GACxB3E,GAAIb,EAAc,EAAG,OAM7B,OAHA6F,EAAOzB,KAAP,MAAAyB,EAAeC,GACfD,EAAOzB,KAAP,MAAAyB,EAAeG,GACfH,EAAOzB,KAAP,MAAAyB,EAAeE,GACRF,GA0CXtF,EAAe,CACfgG,UAAW,CACPC,QAASjB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC7DkB,SAAUlB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC9DmB,MAAOnB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC3DoB,MAAOpB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC3DqB,IAAKrB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IACzDsB,KAAMtB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC1DuB,KAAMvB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC1DwB,OAAQxB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC5DyB,UAAWzB,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC/D0B,QAAS1B,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC7D2B,SAAU3B,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,IAC9D4B,SAAU5B,EAAiB,CAAC,KAAM,SAAU,WAAY,EAAG,EAAG,KAElE6B,gBAAiB,KACjBrH,YAAaZ,KA2BFkI,EAnBS,WAA4E,IAA3E9E,EAA0E,uDAAlEhC,EAAciC,EAAoD,uCAE/F,OAAQA,EAAOZ,MACX,IAtHuB,kCAuHnB,OAAO,2BACAW,GADP,IAEI6E,gBAAiB5E,EAAO8E,MAGhC,QACI,OAAO/E,I,kBC3HfhC,EAAe,CACfgH,OAAQ,CAAC,UAAW,KAChB,iBAAkB,YAAa,WAAY,kBAAmB,iBAAiB,YACnFC,gBAAiB,CAAC,eAAe,eAAe,eAAe,eAAe,iBAsFnEC,EA7EO,WAA8E,IAA7ElF,EAA4E,uDAApEhC,EAAciC,EAAsD,uCAEzFkF,EAAgB,WAClB,OAAOhF,KAAKC,MAAMD,KAAKE,UAAUL,EAAMgF,UAG3C,OAAQ/E,EAAOZ,MACX,IAtBW,oBAuBP,OAAO,2BACAW,GADP,IAEIgF,OAAQ/E,EAAO+E,SAGvB,IA3BqB,8BA4BjB,OAAO,2BACAhF,GADP,IAEIiF,gBAAiBhF,EAAOgF,kBAIhC,IAtCU,mBAuCN,OAAO,2BACAjF,GADP,IAEIgF,OAAO,GAAD,mBAAMhF,EAAMgF,QAAZ,CAAoB/E,EAAOnB,UAGzC,IA3Ca,sBA4CT,OAAO,2BACAkB,GADP,IAEIgF,OAAwB,UAAhB/E,EAAOmF,KACTpF,EAAMgF,OAAOrD,QAAO,SAAA7C,GAAK,OAAIA,IAAUmB,EAAOnB,SAC9CkB,EAAMgF,OAEZC,gBAAiC,mBAAhBhF,EAAOmF,KAClBpF,EAAMiF,gBAAgBtD,QAAO,SAAA0D,GAAc,OAAIA,IAAmBpF,EAAOnB,SACzEkB,EAAMiF,kBAGpB,IAtDa,sBAuDT,IAAIK,EAAaH,IAEjB,OADAG,EAAWA,EAAWC,WAAU,SAACC,GAAD,OAAWA,IAAUvF,EAAOwF,aAAaxF,EAAOyF,SACzE,2BACA1F,GADP,IAEIgF,OAAQM,IAIhB,QACI,OAAOtF,IC3Df2F,EAAWC,YAAgB,CAC9BC,KAAOC,IACPC,aAAejB,EACfkB,aAAgBC,EAChBC,WAAahB,IAORiB,EAAQC,YAAYT,EAASU,YAAgBC,MAGnDC,OAAOJ,MAAQA,EACAA,Q,4NCLTK,GAAYC,aAAW,SAACC,GAAD,aACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,OAAK,GACDC,QAAS,QADR,cAEAR,EAAMS,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAHZ,2BAKW,MALX,sBAMM,WANN,uBAOO,WAPP,GASLG,eAAe,aACXH,QAAS,QACRR,EAAMS,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,SAGjBI,cAAc,aACVJ,QAAS,QACRR,EAAMS,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,cA8ITK,OAAMC,MAtI6B,SAACC,GAChD,IAAMC,EAAUlB,KADyC,EAELe,IAAMI,SAA6B,MAF9B,mBAElDC,EAFkD,KAE9BC,EAF8B,KAInDC,EAAmBC,QAAQH,GAW3BI,EAAS,WACXC,aAAaC,QAAQ,SAAS,SAC9B3B,OAAO4B,SAASC,UAKdC,EACF,kBAACC,GAAA,EAAD,CACIC,SAAUX,EACVY,aAAc,CAACC,SAAU,MAAOC,WAAY,SAC5CpK,GALa,qCAMbqK,aAAW,EACXC,gBAAiB,CAACH,SAAU,MAAOC,WAAY,SAC/CG,KAAMf,EACNgB,QAvBsB,WAC1BjB,EAAsB,QAwBlB,kBAACkB,GAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,WACd,kBAAC,KAAD,OAFR,YAOA,kBAACF,GAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,WACd,kBAAC,IAAD,OAFR,QAMA,kBAACF,GAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYE,QAASlB,EAAQiB,MAAM,WAC/B,kBAAC,KAAD,OAFR,UAMA,kBAACF,GAAA,EAAD,CAAcG,QAASzB,EAAM0B,iBACzB,kBAACH,EAAA,EAAD,CACII,aAAW,0BACXC,gBAAc,8BACdC,gBAAc,OACdL,MAAM,WAEN,kBAACM,GAAA,EAAD,CAAQC,IAAK,cAAeC,IAAKC,QAPzC,YAcR,OACI,yBAAKC,UAAWjC,EAAQd,MACpB,kBAACgD,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,yBAAKH,UAAWI,KAAGC,UACf,yBAAKL,UAAWI,KAAGE,MACf,kBAAC,IAAD,CAASC,GAAG,aAAZ,aAKJ,yBAAKP,UAAWI,KAAGE,MACf,kBAAC,IAAD,CAASC,GAAG,YAAZ,YAQR,yBAAKP,UAAWjC,EAAQd,OACxB,yBAAK+C,UAAWjC,EAAQL,gBACpB,kBAAC8C,GAAA,EAAD,CAASlD,MAAM,WAAWmD,OAAK,EAACC,UAAU,UACtC,kBAACrB,EAAA,EAAD,CAAaC,MAAM,WACf,kBAAC,KAAD,QAIJ,kBAACkB,GAAA,EAAD,CAASlD,MAAM,OAAOmD,OAAK,EAACC,UAAU,UAClC,kBAACrB,EAAA,EAAD,CAAYC,MAAM,WACd,kBAAC,IAAD,QAIZ,kBAACkB,GAAA,EAAD,CAASlD,MAAM,SAASmD,OAAK,EAACC,UAAU,UACpC,kBAACrB,EAAA,EAAD,CAAYE,QAASlB,EAAQiB,MAAM,WAC/B,kBAAC,KAAD,QAIR,kBAACkB,GAAA,EAAD,CAASlD,MAAM,UAAUmD,OAAK,EAACC,UAAU,UACrC,kBAACrB,EAAA,EAAD,CACIsB,KAAK,MACLlB,aAAW,0BACXE,gBAAc,OACdL,MAAM,UACNC,QAASzB,EAAM0B,iBAEf,kBAACI,GAAA,EAAD,CAAQC,IAAK,cAAeC,IAAKC,UAI7C,yBAAKC,UAAWjC,EAAQJ,eACpB,kBAAC0B,EAAA,EAAD,CACII,aAAW,YACXC,gBAnGH,qCAoGGC,gBAAc,OACdJ,QA9GK,SAACqB,GAC1B1C,EAAsB0C,EAAMC,gBA8GRvB,MAAM,WAEN,kBAAC,KAAD,UAKfZ,M,6CCrLAoC,GAAmB,WAAoB,IAK5CC,EAAcC,EAAOC,EALIC,EAAkB,uDAAP,GACpCC,EAAYD,EAAS,GACrBE,EAAaF,EAAS,GACtBzN,EAAU,SAAC4N,GAAD,OAAY,IAAIlO,KAAK,EAAG,EAAG,EAAGkO,EAAOC,MAAM,KAAK,GAAID,EAAOC,MAAM,KAAK,KAChFC,EAAa9N,EAAQ2N,GAAc3N,EAAQ0N,GAc/C,OAZII,EAAY,GACZR,EAAeQ,EACfP,EAAQ9M,KAAKE,MAAO2M,EAAe,MAAY,MAC/CE,EAAS/M,KAAKsN,MAAQT,EAAe,MAAY,KAAW,OAE5DA,EAAe7M,KAAKuN,IAAKhO,EAAQ0N,GAAa1N,EAAQ2N,IACtDJ,EAAQ9M,KAAKE,MAAM,GAAM2M,EAAe,MAAY,MACpDE,EAAS/M,KAAKsN,MAAM,GAAOT,EAAe,MAAY,KAAW,MAElEE,EAAS,KACRA,GAAmB,KAEnBD,EAAQ,GACD,IAAMA,EAAQ,IAAMC,EAAS,MAE7BD,EAAQ,IAAMC,EAAS,O,8DCVvBS,GAJ0B,SAAC5D,GACtC,OAAS,yBAAKkC,UAAW2B,KAAGC,YAAnB,M,kJCgFEC,GAtD0C,SAAC/D,GAsCtD,OAAQ,yBAAKgE,aAAchE,EAAMiE,WAAY/B,UAAWgC,KAAKC,WACzD,yBAAK1C,QAASzB,EAAMiE,WAAY/B,UAAWgC,KAAKE,kBAE5C,yBAAK3C,QApBc,WAAM,IAAD,EACjC,KAAG,UAACzB,EAAMzI,sBAAP,aAAC,EAAsBV,KAAgC,aAA1BmJ,EAAMqE,gBAAiC,CAC9D,IAAIC,EAA4B,CAC5BzN,GAAIb,EAAc,EAAG,KACrBiB,UAAW+I,EAAM/I,UACjBI,MAAO2I,EAAM3I,MACbN,UAAWiJ,EAAMjJ,UACjBC,QAASgJ,EAAMhJ,QACfG,aAAc6I,EAAM7I,aACpBD,OAAQ8I,EAAM9I,OACdE,WAAY,YAEhB4I,EAAMtI,WAAW4M,KAQiBpC,UAAWgC,KAAKK,aAAlD,aAGA,yBAAK9C,QA/BY,WAAM,IAAD,GACvB,UAACzB,EAAMzI,sBAAP,aAAC,EAAsBV,KAAgC,aAA1BmJ,EAAMqE,kBAC/BrE,EAAMpG,SAAWoG,EAAM5H,cAAc4H,EAAM3H,aA6Bd6J,UAAWgC,KAAKK,aAAhD,mBAGA,yBAAK9C,QA7CsB,SAAC+C,GAAqC,IAAD,GACtC,sBAA1BxE,EAAMqE,kBAA4CrE,EAAMzI,iBACpD,UAAAyI,EAAMvJ,iBAAN,eAAiBC,oBAAqBX,IAAgBiK,EAAMzI,kBAChEyI,EAAMyE,qBAAqB,CACvBC,kBAAoB1E,EAAM3H,UAC1BuB,SAAWoG,EAAMpG,WAGrBoG,EAAM2E,kBAAkBH,KAqCkBtC,UAAWgC,KAAKK,aAA1D,a,8JClENK,GAAkB,SAACC,GACrB,OAAQA,GACJ,IAAK,QAAU,OAAOC,KACtB,IAAK,SAAW,OAAOC,KACvB,IAAK,OAAS,OAAOC,KACrB,IAAK,MAAQ,OAAOC,KACpB,IAAK,OAAS,OAAOC,KACrB,IAAK,OAAS,OAAOC,KACrB,IAAK,SAAW,OAAOC,KACvB,IAAK,SAAW,OAAOC,KACvB,QAAU,OAAOD,OAKnBrG,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACToG,OAAQ,CACJA,OAAQrG,EAAMM,QAAQ,SAiCnBgG,GApB+C,SAACvF,GAC1D,IAAMwB,EAAQoD,GAAgB5E,EAAMwF,SAC9BC,EAAcC,cAAW,SAACzG,GAAD,MAAmB,CAC9C0G,KAAM,CACFnE,MAAOxB,EAAM4F,UACa,UAApB5F,EAAM4F,UAAwBX,KAAI,IAAKL,GAAgB5E,EAAM4F,WAAW,KACzE3G,EAAM4G,QAAQC,gBAAgBtE,EAAM,MACzCuE,gBAAiBvE,EAAM,KACvBwE,SAAWhG,EAAMgG,SACjB,UAAW,CACPD,gBAAiBvE,EAAM,UARfkE,CAWhBO,MACChG,EAAUlB,KAChB,OAAO,kBAAC0G,EAAD,CAAaS,UAAWlG,EAAMkG,UAAYlG,EAAMkG,eAAY/N,EAAWgO,QAASnG,EAAMmG,QACxE3E,MAAM,UAAUU,UAAWjC,EAAQqF,QAC3CtF,EAAMoG,OCVRC,GAnC8D,SAACrG,GAS1E,OAAKA,EAAMsG,OAGP,yBAAKpE,UAAU,sBACX,yBAAKA,UAAWqE,KAAGC,OACf,yBAAKtE,UAAWqE,KAAGE,oBAAnB,gDAGA,yBAAKvE,UAAWqE,KAAGG,mCACf,yBAAKxE,UAAWqE,KAAGI,0BACf,yBAAKlF,QAlBH,SAAC+C,GACfxE,EAAM4G,oBACoB,aAA1B5G,EAAMqE,gBACArE,EAAM6G,cAAc7G,EAAM4G,kBAAkBlC,kBAAmB1E,EAAM4G,kBAAkBhN,UACvFoG,EAAM8G,oBAAoB9G,EAAM4G,kBAAkBlC,mBACxD1E,EAAMqB,YAamCa,UAAU,cACnC,kBAAC,GAAD,CAAkBsD,QAAS,OAAQY,KAAM,SACvBD,QAAS,YAAaH,SAAU,MAEtD,yBAAKvE,QAASzB,EAAMqB,QAASa,UAAU,eACnC,kBAAC,GAAD,CAAkBsD,QAAS,OAAQY,KAAM,UACvBD,QAAS,YAAaH,SAAU,GAAIJ,UAAW,eAKjF,yBAAK1D,UAAW6E,KAAGC,MArBD,MCmCfC,GAvBwC,SAACjH,GAAW,IAAD,EAE9D,OAAQ,yBAAKkC,UAAU,cAAf,UACHlC,EAAM7I,oBADH,aACH,EAAoBgC,KAAI,SAAAM,GACrB,OACI,kBAAC,GAAD,iBAAauG,EAAb,CACQkH,IAAKzN,EAAY5C,GAChBE,UAAW0C,EAAY1C,UACvBC,QAASyC,EAAYzC,QACrBC,UAAWwC,EAAYxC,UACvBG,WAAYqC,EAAYrC,WACxBF,OAAQuC,EAAYvC,OACpBL,GAAI4C,EAAY5C,GAChB+C,SAAUoG,EAAMnJ,GAChBM,aAAc,KACdE,MAAOoC,EAAYpC,MACnByP,oBAAqB9G,EAAM8G,4B,qBCiLrCK,GA5K0B,SAACnH,GAAW,IAAD,gBAElBE,qBAFkB,mBAE3CkH,EAF2C,KAEjCC,EAFiC,OAGFnH,oBAAS,GAHP,mBAG3CoH,EAH2C,KAGzBC,EAHyB,KAiDhD,OAAS,yBAAKrF,UAAWsF,KAAIC,UACzB,yBAAKvF,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,IAAMuQ,EACnDI,KAAIE,4BACJF,KAAIG,uBACN,yBAAKzF,UAAU,aAGN,yBAAKA,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,IAAMuQ,EAAUI,KAAII,gBAAiBJ,KAAIK,UACvF7F,IAAK4F,KAAiB7F,IAAI,KAGpC,yBAAKG,UAAWsF,KAAIM,eAChB,yBAAK5F,UAAWsF,KAAIpO,cAEf4G,EAAM7I,cAAgB6I,EAAM7I,aAAaqC,OAAS,EAC7C,yBAAK0I,UAAWsF,KAAIO,mBACjBT,EACK,yBAAK7F,QAzDT,WAC1B8F,GAAoB,IAwD+CrF,UAAWsF,KAAIQ,WAAW,yBAC7D9F,UAAWsF,KAAIS,cAAejG,IAAKkG,KAASnG,IAAI,MAGlD,yBAAKN,QAjET,WAC1B8F,GAAoB,IAgE+CrF,UAAWsF,KAAIQ,WAApD,IAAgE,0BAC9D9F,UAAWsF,KAAIW,gBACtBnI,EAAM7I,aAAaqC,UAMtBwG,EAAMjJ,WAAaiJ,EAAMhJ,QAAU,yBAAKkL,UAAWsF,KAAIY,UACjD,yBAAKlG,UAAWsF,KAAIzQ,WACfiJ,EAAMjJ,WAEX,yBAAKmL,UAAWsF,KAAIa,OAApB,KAGA,yBAAKnG,UAAWsF,KAAIxQ,SACfgJ,EAAMhJ,UAGb,kCAEV,yBAAKkL,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,IAAMuQ,EACnDI,KAAIc,qBACJd,KAAIe,gBACN,yBAAKC,MAAO,CAACC,yBAA2B,WAAYC,mBAAqB,QAAS1G,IAAsB,OAAjBhC,EAAM9I,OACvFyR,KAAyB,YAAjB3I,EAAM9I,OACV0R,KAA8B,WAAjB5I,EAAM9I,OACf2R,UAAY1Q,EAAW4J,IAAI,MAI7C,yBAAKN,QAvEI,WAAO,IAAD,EAC/B,GAA8B,sBAA1BzB,EAAMqE,kBAA4CrE,EAAMzI,iBACpD,UAAAyI,EAAMvJ,iBAAN,eAAiBC,oBAAqBX,IAAiBiK,EAAMzI,eAAiB,CAIlF,IAHA,IAAIuR,EAAO,CAAC,KAAM,YAAa,YAAa,aAAc,UACpD,SAAU,eAAgB,SAC5BtR,EAAkB,GACbuR,EAAI,EAAGA,EAAID,EAAKtP,OAAQuP,IAE7BvR,EAAgB,GAAD,OAAKsR,EAAKC,KAAS/I,EAAM8I,EAAKC,IAEvB,aAA1B/I,EAAMqE,gBACA7M,EAAgBF,aAAc,EAC9BE,EAAgBF,aAAc,EAEpC0I,EAAM9H,mBAAmBV,GACzBwI,EAAMgJ,2BAwD0C9G,UAAWsF,KAAIyB,yBAC/C,yBAAK/G,UAAWsF,KAAInQ,OACf2I,EAAM3I,OAEX,yBAAK6K,UAAWsF,KAAIvQ,WACf+I,EAAM/I,YAKf,yBAAKiL,UAAWsF,KAAI0B,qBAChB,yBAAKhH,UAAWsF,KAAIpQ,YAAa4I,EAAM5I,cAG1C,UAAA4I,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,GAE9B,yBAAKqL,UAAWsF,KAAI2B,yBAClB,yBAAK1H,QA5FL,WACxBzB,EAAMnI,yBAAwB,EAAOmI,EAAMnJ,KA2FgBqL,UAAWsF,KAAI4B,YAC9C,yBAAKpH,IAAKoH,KAAYrH,IAAI,kBAIhC,yBAAKG,UAAWsF,KAAI2B,yBAClB,yBAAK1H,QAzGL,WAAO,IAAD,GACJ,sBAA1BzB,EAAMqE,kBAA4CrE,EAAMzI,iBACpD,UAAAyI,EAAMvJ,iBAAN,eAAiBC,oBAAqBX,IAAiBiK,EAAMzI,iBACjEyI,EAAMnI,yBAAwB,EAAMmI,EAAMnJ,GAA6B,sBAA1BmJ,EAAMqE,kBAsGQnC,UAAWsF,KAAI6B,YAC9C,yBAAKrH,IAAKqH,KAAYtH,IAAI,kBAItC,yBAAKG,UAAU,mBACX,yBAAMA,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,IAAMuQ,EACpDI,KAAI8B,wBACJ9B,KAAI+B,mBACN,yBAAKvH,IAAKwH,KAAgBzH,IAAI,MAElC,yBAAK0H,aA3HV,WACfpC,GAAY,IA0HuCnF,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,IAAMuQ,EAC7EI,KAAIkC,0BACLlC,KAAImC,qBACL,yBAAK3H,IAAK4H,KAAsB7H,IAAI,uBAOxD,kBAAC,GAAD,CAA2B6E,kBAAmB5G,EAAM4G,kBAAmBC,cAAe7G,EAAM6G,cACjEnC,kBAAmB1E,EAAMnJ,GAAIyP,OAAQtG,EAAM6J,kBAC3CxI,QAASrB,EAAM8J,mBACfzF,gBAAiBrE,EAAMqE,gBACvByC,oBAAqB9G,EAAM8G,sBAGtD,yBAAK5E,WAAW,UAAAlC,EAAMzI,sBAAN,eAAsBV,MAAOmJ,EAAMnJ,GAC7C2Q,KAAIuC,mBACJvC,KAAIwC,cACN,kBAAC,GAAD,QAIP5C,GAAY,kBAAC,GAAD,iBAAqBpH,EAArB,CACiBiE,WAjJf,WACfoD,GAAY,IAiJkBhP,UAAW2H,EAAMnJ,GACjByQ,iBAAkBA,KAI/CA,GAAqB,kBAAC,GAAmBtH,K,8BCvMnCF,OAAMC,MAnB4B,SAACC,GAE9C,OACI,kBAAC,IAAMiK,SAAP,KACI,kBAAC,YAAD,CAAWzB,MAAO,CAAE0B,MAAO,QAASC,OAAQ,MAAOC,aAAe,SAC9D,kBAAC,YAASC,IAAV,CAAepU,IAAI,IAAIC,IAAI,MAAMoU,IAAsB,OAAjBtK,EAAM9I,OACxC,KAAwB,YAAjB8I,EAAM9I,OACP,KAAwB,WAAjB8I,EAAM9I,OACT,KAAO,KAEP8P,GAAqB,OAAjBhH,EAAM9I,OACN,UAA6B,YAAjB8I,EAAM9I,OACZ,UAA6B,WAAjB8I,EAAM9I,OACd,SAAW,Y,qBC0FxCqT,GAnFkC,SAACvK,GAC9C,IAAMwK,EAAuB,SAACC,EAAoDC,GAC9E,MAAO,CACAA,UACAD,WACCrI,SAAW,CACPpB,SAAW,SACXC,WAAa,WAuC7B,OACI,oCACI,yBAAKiB,UAAWyI,KAAGC,oBACf,yBAAK1I,UAAWyI,KAAGE,oBACf,yBAAK3I,UAAWyI,KAAGG,eACd9K,EAAM+K,iBAGf,yBAAK7I,UAAWyI,KAAGK,UACf,6BACKhL,EAAMpJ,aAGX,yBAAKsL,UAAWyI,KAAGM,UACf,kBAAC,GAAD,CAAa/T,OAAQ8I,EAAMrJ,kBAGlCqJ,EAAMvJ,UAAUC,mBAAqBX,EAChC,kBAAC,KAAD,CAAYyS,MAAO,CAAC0C,OAAS,WAAY1J,MAAO,UAAWwE,SAAU,QAC3DvE,QAtDF,WAgBtB,GAfAzB,EAAMlJ,SAASqC,KAAI,SAAAG,IACVA,EAAQjC,OAASiC,EAAQjC,MAAMmC,QAAU,GAC1CwG,EAAMmL,aAAaX,EAAsB,QAAQ,yBACjDxK,EAAMoL,iBAAiB,CAACpQ,OAAQ,UAAW9D,OAAQ,SAAUL,GAAIyC,EAAQzC,OACjEyC,EAAQrC,WAAaqC,EAAQrC,UAAUuC,QAAU,GACzDwG,EAAMmL,aAAaX,EAAsB,UAAU,mCACnDxK,EAAMoL,iBAAiB,CAACpQ,OAAQ,UAAW9D,OAAQ,UAAWL,GAAIyC,EAAQzC,MAClEyC,EAAQlC,YAAekC,EAAQvC,WAAcuC,EAAQtC,SAG7DgJ,EAAMoL,iBAAiB,CAACpQ,OAAQ,UAAW9D,OAAQ,KAAML,GAAIyC,EAAQzC,KACrEmJ,EAAMmL,aAAaX,EAAsB,UAAU,sCAHnDxK,EAAMmL,aAAaX,EAAsB,QAAQ,4BAOrDxK,EAAMlJ,SAASuU,OAAM,SAAA/R,GAAO,OAAIA,EAAQtC,SAAWsC,EAAQvC,WAAauC,EAAQlC,YAC7EkC,EAAQrC,WAAaqC,EAAQjC,SAAQ,CACxC,IAAIiU,EAA+B,CAC/B9U,eAAgB,CACZC,UAAWuJ,EAAMvJ,UACjBK,SAAUkJ,EAAMlJ,WAGxBkJ,EAAMuL,sBAAsBD,GAC5BtL,EAAMoL,iBAAiB,CAACpQ,OAAQ,eAAgB9D,OAAQ,KAAML,GAAImJ,EAAMvJ,UAAUI,KAClFmJ,EAAMmL,aAAaX,EAAsB,UAAU,0CAGnDxK,EAAMmL,aAAaX,EAAsB,QAAQ,yBACjDxK,EAAMoL,iBAAiB,CAACpQ,OAAQ,eAAgB9D,OAAQ,SAAUL,GAAImJ,EAAMvJ,UAAUI,MAyBlEqL,UAAWyI,KAAGa,eAGxB,kBAAC,KAAD,CAAYhK,MAAO,WAAYwE,SAAU,QACtB9D,UAAWyI,KAAGa,gBAM3C,yBAAKtJ,UAAWyI,KAAGc,uBACf,kBAAC,GAAD,SCHDC,GArDsC,SAAC1L,GAAW,IAAD,IACZE,oBAAS,GADG,mBACvD2J,EADuD,KACpC8B,EADoC,OAEZzL,qBAFY,mBAEvD0G,EAFuD,KAEpCnC,EAFoC,KAItDE,EAAoB,SAACH,GACvBmH,GAAqB,IAEnB7B,EAAqB,WACvB6B,GAAqB,IAGzB,OAAQ,oCACuB,aAA1B3L,EAAMqE,iBAAkCrE,EAAMvJ,WAC/C,yBAAKI,IAAI,UAACmJ,EAAMvJ,iBAAP,aAAC,EAAiBI,IAAI+U,WAAY1J,UAAWsF,KAAIqE,sBACtD,kBAAC,GAAD,CAAad,eAAgB/K,EAAMvJ,UAAUC,iBAChCE,YAAaoJ,EAAMvJ,UAAUG,YAC7BD,cAAeqJ,EAAMvJ,UAAUE,cAC/BG,SAAUkJ,EAAMlJ,SAChByU,sBAAuBvL,EAAMuL,sBAC7B9U,UAAWuJ,EAAMvJ,UACjB0U,aAAcnL,EAAMmL,aACpBC,iBAAkBpL,EAAMoL,oBAMjCpL,EAAMA,EAAMqE,iBAAiBlL,KAAI,SAAA2S,GAC7B,OAAO,yBAAK5E,IAAK4E,EAAGjV,GAAIqL,UAAU,WAC9B,kBAAC,GAAD,iBACQ4J,EACA9L,EAFR,CAGI5I,WAAY0U,EAAG1U,WACT0U,EAAG1U,WACH0U,EAAG/U,WAAa+U,EAAG9U,QACfgM,GAAiB,CAAC8I,EAAG/U,UAAW+U,EAAG9U,UACnC,KACV6S,kBAAmBA,EACnBC,mBAAoBA,EACpBnF,kBAAmBA,EACnBF,qBAAsBA,EACtBmC,kBAAmBA,EACnBlP,WAAYsI,EAAMtI,WAClBmP,cAAe7G,EAAM6G,cACrBC,oBAAqB9G,EAAM8G,6BC7CjDiF,G,2KAEQ,IAAD,OACL,OACI,yBAAK7J,UAAU,uBACqB,aAA/B8J,KAAKhM,MAAMqE,gBACN2H,KAAKhM,MAAMiM,eAAe9S,KAAI,SAAA2S,GAC5B,OAAO,yBAAK5E,IAAK4E,EAAGrV,UAAUI,GAAIqL,UAAU,YACxC,kBAAC,GAAD,eAAezL,UAAWqV,EAAGrV,UACdK,SAAUgV,EAAGhV,UACT,EAAKkJ,YAKhC,yBAAKwI,MAAO,CAAC0D,WAAY,QAAShK,UAAU,4BACxC,kBAAC,GAAD,iBACQ8J,KAAKhM,MADb,CAEIlJ,SAAUkV,KAAKhM,MAAMvI,2B,GAlBjBqI,IAAMqM,WAkCvBC,eAAQC,aANJ,SAAC9T,GAAD,MAAmD,CAClE0T,eAAgB1T,EAAMgG,aAAa/H,eACnCe,eAAgBgB,EAAMgG,aAAahH,eACnCE,kBAAoBc,EAAMgG,aAAa9G,qBAI5B,CACXC,aAAYmP,cfqlBa,SAACjM,GAA6D,IAAvCD,EAAsC,uDAAT,KAC7E,MAAO,CAAC/C,KAAM9B,EAAa8E,eAAcD,gBerlBzC9C,0BAAyBK,qBAAoBE,gBAC7CmT,sBf6mBiC,SAACe,GAAD,8CAA0D,WAAOC,GAAP,SAAAC,EAAA,sEAExD5X,EAAqB0X,GAFmC,yDAA1D,uDe7mBXlB,iBfsnBM,SAACrQ,GAK7B,MAAO,CAACnD,KAtsBe,8BAssBWmD,Ye3nBK+L,oBf+nBR,SAACzO,GAChC,MAAO,CAACT,KA1sBkB,iCA0sBWS,gBepoB1B+T,CAOVL,I,uGCvFQU,GAAa,SAAC1O,EAAMmF,GAC7B,GAAoB,kBAAVnF,EAAmB,CACzB,IAAI2O,EAAYC,OAAOC,SAAS7O,GAChC,OAAG2O,EAAW,GACH,IAAMA,EAEL3O,EAEX,GAAqB,kBAAVA,EACZ,OAAGA,EAAQ,GACA,IAAMA,EAELA,GAIP8O,GAAwB,SAACC,EAAY5J,EAAM6J,GACpD,GAAGD,GAAe5J,GAAS6J,EAAQ,CAAC,IAAD,cACSD,EAAYtJ,MAAM,MAArDwJ,EAD0B,KACbC,EADa,KAa9B,OAXDD,EAAeL,OAAOC,SAASI,KAGX,IACfA,GAA8B,KAHnCC,EAAiBN,OAAOC,SAASK,IAKbF,IAChBE,GAAkC,GAClCD,GAA6B,GAG1B,GAAN,OAAgD,KAArCP,GAAWO,EAAe9J,GAAe,KAAOuJ,GAAWO,EAAe9J,GAArF,YAA+FuJ,GAAWQ,EAAiBF,M,UCKrHG,GAzBkC,SAAClN,GAC9C,IAWMC,EAXYjB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyG,KAAM,CACF,uBAAwB,CACpBL,OAAQrG,EAAMM,QAAQ,GACtB2K,MAAOlK,EAAMkK,YAMbnL,GAChB,OAAO,yBAAKmD,UAAWjC,EAAQ0F,MAC3B,kBAACwH,GAAA,EAAD,CACIpP,MAAOiC,EAAMjC,MACbqP,SAAUpN,EAAMoN,SAChBvW,GAAG,oBACHwW,MAAOrN,EAAMqN,MACbC,YAAatN,EAAMsN,YACnBC,WAAS,M,8BCWNC,GA9B+C,SAACxN,GAC3D,IAYMC,EAZYjB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTuO,YAAa,CACTnI,OAAQrG,EAAMM,QAAQ,GACtBmO,SAAU1N,EAAMkK,OAEpByD,KAAO,CACHnM,MAAQ,eAKJzC,GAEhB,OACI,6BACI,kBAAC6O,GAAA,EAAD,CAAa1L,UAAWjC,EAAQwN,aAC5B,kBAACI,GAAA,EAAD,CAAYC,QAAQ,yBAApB,UACA,kBAACC,GAAA,EAAD,CAAShQ,MAAOiC,EAAMjC,MAAOqP,SAAUpN,EAAMoN,SAAUY,QAAM,EAACC,aAAa,GAAGpX,GAAG,yBAC7E,4BAAQkH,MAAO,YAAf,cACA,8BAAUsP,MAAM,UACXrN,EAAMzC,OAAOpE,KAAI,SAAA9B,GAAK,OAAQ,4BAAQ6P,IAAK7P,EAAO6K,UAAWjC,EAAQ0N,KAAM5P,MAAO1G,GAAQA,WC/BtG6W,GAAW,SAACC,GAQnB,IAAD,EAEuBjO,mBAASiO,GAFhC,mBAEIpQ,EAFJ,KAEWqQ,EAFX,KAeD,MAAO,CACHC,KAAM,CAACtQ,QAAOqP,SAXD,SAAC5I,GACd4J,EAAS5J,EAAExJ,OAAO+C,SAWlBA,QACAuQ,MAVU,WACVF,EAAS,KAUTG,YAPgB,SAACC,GACjBJ,EAASI,M,0CCoEFC,GAlFD,SAACzO,GAAW,IAAD,EACSE,mBAASyM,OAAOC,SAAS5M,EAAMzI,eAAeH,WAAWsX,OAAO,EAAG1O,EAAMzI,eAAeH,WAAWoC,UAD5G,mBACdmV,EADc,KACLC,EADK,OAES1O,mBAASyM,OAAOC,SAAS5M,EAAMzI,eAAeH,WAAWsX,OAAO,EAAG1O,EAAMzI,eAAeH,WAAWoC,OAAS,KAFrH,mBAEduT,EAFc,KAEL8B,EAFK,OAGK3O,mBAASyM,OAAOC,SAAS5M,EAAMzI,eAAeH,WAAWsX,OAAO,EAAG1O,EAAMzI,eAAeH,WAAWoC,OAAS,KAHjH,mBAGd0J,EAHc,KAGP4L,EAHO,OAIW5O,oBAAS,GAJpB,mBAId6O,EAJc,KAIJC,EAJI,KAKfC,EAAcf,GAASlO,EAAMzI,eAAeN,UAAY+I,EAAMzI,eAAeN,UAAY,IACzFiY,EAAahB,GAASlO,EAAMzI,eAAeF,MAAQ2I,EAAMzI,eAAeF,MAAQ,IAuCtF,OAxBA8X,qBAAU,WACN,IAAIC,EAAW,KAoBf,OAnBKL,EAgBMA,GAAwB,IAAZJ,GACnBU,cAAcD,GAhBdA,EAAWE,aAAY,WACnBV,GAAW,SAAAD,GAAO,OAAIA,EAAU,KAC5BA,EAAU,KACVE,GAAW,SAAA9B,GAAO,OAAIA,EAAU,KAChC6B,EAAW,IAEX7B,EAAU,KACV+B,GAAS,SAAA5L,GAAK,OAAIA,EAAQ,KAC1B2L,EAAW,IAEX3L,EAAQ,KACR4L,EAAS,GACTO,cAAcD,MAEnB,KAIA,kBAAMC,cAAcD,MAC5B,CAACL,EAAUJ,EAAS5B,EAAS7J,IAI5B,yBAAKhB,UAAWqN,KAAGC,gBACf,kBAAC,GAAD,iBAAiBP,EAAaZ,KAA9B,CACahB,MAAO,aACPC,YAAa,yBACbpD,MAAO,OAGpB,yBAAK1B,MAAO,CAACiH,UAAY,SAAUvN,UAAW,qBAC1C,kBAAC,GAAD,eAAoB3E,OAAQyC,EAAMzC,QACV2R,EAAWb,KADnC,CAEoBnE,MAAO,QAI/B,yBAAKhI,UAAWqN,KAAGd,OACdhC,GAAWvJ,GADhB,IACyBuJ,GAAWM,GADpC,IAC+CN,GAAWkC,IAG1D,yBAAKzM,UAAWqN,KAAGG,8BACf,yBAAKxN,UAAWqN,KAAGI,qBACf,yBAAKlO,QAzDD,WAAO,IAAD,IACtBzB,EAAMgJ,yBACNgG,GAAaD,GACb,IAAIa,EAAY,CACZxY,WAAYqV,GAAWvJ,GAAS,IAAMuJ,GAAWM,GAAW,IAAMN,GAAWkC,GAC7EkB,WAAYX,EAAWnR,MAAQmR,EAAWnR,MAA9B,UAAsCiC,EAAMzI,sBAA5C,aAAsC,EAAsBF,MACxEyY,eAAgBb,EAAalR,MAAQkR,EAAalR,MAAlC,UAA0CiC,EAAMzI,sBAAhD,aAA0C,EAAsBN,WAEpF+I,EAAM+P,aAAaH,KAkDH,kBAAC,KAAD,CAAUpH,MAAO,CAACiH,UAAY,MAAOvF,MAAO,OACxCC,OAAQ,OAAOpE,gBAAkBd,KAAI,KAAKmF,aAAe,OAAO5I,MAAQyD,KAAI,QAEpF,yBAAKuD,MAAO,CAACwH,YAAc,OAAQ9N,UAAU,iBAAiBT,QAhE/D,WACXuN,GAAaD,KAgEKA,EAEI,kBAAC,KAAD,CAAYvG,MAAO,CAAC0B,MAAO,OAAQC,OAAQ,QAAS3I,MAAO,YAD7D,kBAAC,KAAD,CAAuBgH,MAAO,CAAC0B,MAAO,OAAQC,OAAQ,QAAS3I,MAAO,iBCUnFyO,GA5EoC,SAACjQ,GAMhD,OAAQ,yBAAKkC,UAAWgO,KAAIC,UACpB,yBAAKjO,UAAWgO,KAAIE,aAGpB,yBAAKlO,UAAWgO,KAAIG,WAGhB,yBAAKnO,UAAWgO,KAAII,6BAChB,yBAAKpO,UAAWgO,KAAIK,oBAEhB,yBAAKrO,UAAWgO,KAAIM,kBAApB,mBASPxQ,EAAMzI,eACD,kBAAC,GAAD,CAAOM,wBAAyBmI,EAAMnI,wBAC/BN,eAAgByI,EAAMzI,eACtByR,uBAAwBhJ,EAAMgJ,uBAC9B+G,aAAc/P,EAAM+P,aACpB/X,cAAegI,EAAMhI,cACrBuF,OAAQyC,EAAMzC,SAErB,yBAAK2E,UAAWgO,KAAIO,mBACd,yBAAKvO,UAAWgO,KAAIQ,qBAChB,yBAAKxO,UAAWgO,KAAIvY,YAEhB,yBAAK8J,QAAUzB,EAAM2Q,wBAEfxY,EArCZ,WACtB6H,EAAMtI,cAqC2BwK,UAAWgO,KAAIU,sBAEhB,yBAAK1O,UAAWgO,KAAIW,qBAEf7O,IAAKhC,EAAM2Q,mBACLG,KACAC,KAENhP,IAAI,wBAKb,yBAAKG,UAAWgO,KAAIc,sCAChB,yBAAK9O,UAAWgO,KAAIe,6BAApB,kBAQhB,yBAAK/O,UAAWgO,KAAIgB,wB,oBCxB7BC,GAvCsC,SAACnR,GAIlD,OAAQ,6BAEAA,EAAM/E,iBAAiBzB,OAAS,EACtB,yBAAK0I,UAAU,sBACb,kBAAC,GAAD,CAAmB0N,UAAW5P,EAAM4P,UACjB5G,uBAAwBhJ,EAAMgJ,uBAC9B3E,gBAAiB,uBAGtC,yBAAKnC,UAAWyI,KAAGyG,4BAEjB,yBAAKlP,UAAWyI,KAAG0G,eAAnB,oCAIA,yBAAK7I,MAAO,CAAC0D,WAAY,QAAShK,UAAWgO,KAAIvY,YAC7C,yBAAMuK,UAAWgO,KAAIU,sBACjB,yBAAKnP,QApBF,YAC3BzB,EAAMzI,gBAAmByI,EAAMtI,gBAAWS,GAAU,IAmBU+J,UAAWgO,KAAIW,qBAChD7O,IAAK+O,KACLhP,IAAI,wBAGb,yBAAKG,UAAWgO,KAAIc,sCAEhB,yBAAK9O,UAAWgO,KAAIe,6BAApB,qB,wGCiCjBK,GAxDkC,SAACtR,GAAW,IAAD,MAClBE,oBAAS,GADS,mBACnDqR,EADmD,KACrCC,EADqC,KAEpDC,EAAa,CACb5a,GAAKmJ,EAAMnJ,GACXsF,UAAY6D,EAAM7D,UAClBuV,UAAY1R,EAAM0R,WAUtB,OACI,yBAAKxP,WAAW,UAAAlC,EAAM5C,uBAAN,eAAuBvG,MAAOmJ,EAAMnJ,GAClD8a,KAAIC,aACJ5R,EAAM7D,YAAc6D,EAAMtK,WACF,SAApBsK,EAAM9D,UAAuByV,KAAIE,qBAAkB1Z,EACnDwZ,KAAIG,cAEV,yBAAKrQ,QAdU,WACf,IAAIsQ,EvB8TsB,SAACL,EAAmBvV,GAClD,IAAI6V,EAAkCtZ,KAAKC,MAAMD,KAAKE,UAAU8F,EAAMuT,WAAW1T,eAC7E2T,EAAgD,KAOpD,OANAF,EAAUxb,eAAe2C,KAAI,SAAA2S,GAAQ,IAAD,0BACTA,EAAGrV,UAAUC,wBADJ,aACT,EAA+B8M,MAAM,KAAK,GAAGA,MAAM,MAArE2O,EAD2B,KACpB7U,EADoB,KAE5B6U,IAAUT,GAAa/E,OAAOC,SAAStP,KAASnB,IAChD+V,EAA4BE,SAASC,eAAevG,EAAGrV,UAAUI,GAAG+U,gBAGrEsG,EuBvU4BI,CAAmBb,EAAWC,UAAUD,EAAWtV,WAClFqV,GAAiBD,GACjBvR,EAAMuS,mBAAmBd,GACtBM,GAA0BA,EAAyBS,eAAe,CAACC,MAAO,SAASC,OAAS,SAAUC,SAAW,YAW/GzQ,UAA+B,SAApBlC,EAAM9D,UACXyV,KAAIiB,yBAA2BjB,KAAIkB,qBAE1C,yBAAK3Q,WAAW,UAAAlC,EAAM5C,uBAAN,eAAuBvG,MAAOmJ,EAAMnJ,IACjDmJ,EAAM7D,YAAc6D,EAAMtK,WACvBic,KAAImB,iCACJnB,KAAIoB,2BAEL/S,EAAM7D,WAGP6D,EAAMiM,eAAenS,MAAK,SAAAC,GAAG,OAAGA,EAAItD,UAAUC,iBAAiB8M,MAAM,KAAK,KAA1C,UAAmDxD,EAAM0R,UAAzD,YAAsE1R,EAAM7D,cAC1G6D,EAAMiM,eAAe9S,KAAI,SAAAY,GAC3B,GAAGA,EAAItD,UAAUC,iBAAiB8M,MAAM,KAAK,KAA1C,UAAoDxD,EAAM0R,UAA1D,YAAuE1R,EAAM7D,WAC5E,OAAO,yBAAK+K,IAAKlR,EAAc,EAAE,KACrBwS,MAAO,CAACwH,YAAa,OACrBhO,IAAqC,OAAhCjI,EAAItD,UAAUE,cACrBqc,KACiC,YAAjCjZ,EAAItD,UAAUE,cACVsc,KACgC,WAAhClZ,EAAItD,UAAUE,cACVuc,UACA/a,EAChB4J,IAAI,kBAGR,yBAAKG,UAAWyP,KAAIwB,aAApB,QCrCHC,GAvBsE,SAACpT,GAClF,OAAQ,yBAAKkC,UAAWmR,KAAGD,+BAEE,UAAjBpT,EAAM9I,OACN,yBAAKsR,MAAO,CAACiH,UAAW,OAAQzN,IAAsB,OAAjBhC,EAAM9I,OACrC8b,KACiB,YAAjBhT,EAAM9I,OACF+b,KACiB,WAAjBjT,EAAM9I,OACFgc,UACA/a,EAAW4J,IAAK,iCAChB,yBAAKyG,MAAO,CAACiH,UAAY,OAAQvN,UAAWmR,KAAGF,aAA/C,KAIlB,yBAAMjR,UAAWmR,KAAGC,wBACftT,EAAMoG,QCqCRmN,GA7C4C,SAACvT,GAIxD,OAAQ,yBAAKkC,UAAWmR,KAAGE,kBACvB,yBAAKrR,UAAWmR,KAAGG,wBACdxT,EAAMjK,YAAYP,cAEvB,yBAAK0M,UAAWmR,KAAGI,kCACf,yBAAKvR,UAAWmR,KAAGK,yBARR,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAUxBva,KAAI,SAAA2S,GACd,OAAO,yBAAK5E,IAAKlR,EAAc,EAAG,KACtBkM,UAAWmR,KAAGM,0BACrB7H,MAKR9L,EAAMzD,UAAUyD,EAAMjK,YAAYP,cAAc2D,KAAI,SAAAya,GACjD,OAAO,kBAAC,GAAD,eAAaxW,gBAAiB4C,EAAM5C,gBACvB1H,WAAYsK,EAAMjK,YAAYL,WAC9Bgc,UAAW1R,EAAMjK,YAAYP,aAC7B0R,IAAK0M,EAAI/c,GACT0b,mBAAoBvS,EAAMuS,oBACtBqB,EALjB,CAMa3H,eAAgBjM,EAAMiM,uBAMtD,yBAAK/J,UAAWmR,KAAGQ,iCAEf,yBAAK3R,UAAWmR,KAAGS,wBACf,kBAAC,GAAD,CAA+B5c,OAAQ,KAAMkP,KAAM,SACnD,kBAAC,GAAD,CAA+BlP,OAAQ,UAAWkP,KAAM,gBACxD,kBAAC,GAAD,CAA+BlP,OAAQ,SAAUkP,KAAM,WACvD,kBAAC,GAAD,CAA+BlP,OAAQ,QAASkP,KAAM,oBC5BhE2N,G,2KAEE,OAAO,kBAAC,GAAqB/H,KAAKhM,W,GAFFF,IAAMqM,WAc/BC,eAAQC,aARJ,SAAC9T,GAAD,MAA2D,CAC1EgE,UAAWhE,EAAM+F,aAAa/B,UAC9Ba,gBAAiB7E,EAAM+F,aAAalB,gBACpCrH,YAAcwC,EAAM+F,aAAavI,YACjCkW,eAAiB1T,EAAMgG,aAAa/H,kBAOzB,CAAC+b,mBzBuFkB,SAACjV,GAC/B,MAAO,CAAC1F,KAlImB,kCAkIW0F,UyB3F3B8O,CAGuB2H,ICLvBC,GA/B4B,SAAChU,GAAW,IAAD,EACIE,oBAAS,GADb,mBAC7C+T,EAD6C,KACvBC,EADuB,KAWlD,OAAQ,yBAAKhS,UAAU,YACnB,yBAAKT,QATsB,WAC3ByS,GAAwB,IAQcrd,GAAG,cAAcqL,UAAWmR,KAAGc,mBACjE,yBAAKjS,UAAWmR,KAAGe,iBACf,yBAAKlS,UAAWmR,KAAGgB,cACdrU,EAAMjK,YAAYL,WADvB,IACoCsK,EAAMjK,YAAYP,aADtD,IACqEwK,EAAMjK,YAAYT,aAEvF,yBAAK4M,UAAWmR,KAAGiB,cACf,yBAAKtS,IAAKsS,KAAcvS,IAAI,qBAIvCkS,GAAwB,oCACrB,yBAAK/R,UAAWmR,KAAGrM,GACdvF,QAlBkB,WAC3ByS,GAAwB,MAkBpB,kBAAC,GAAD,S,oBCTGK,GAhBkB,SAACvU,GAC9B,OACI,yBAAKkC,UAAWlC,EAAM2Q,mBAChB6D,KAAKC,YACLD,KAAKE,mBAEP,yBAAMxS,UAAWlC,EAAM2Q,mBACjB6D,KAAKhS,KACLgS,KAAKG,YAEP,kBAAC,IAAD,CAASlT,QAASzB,EAAM4U,aAAgBnS,GAAI,aAA5C,Y,+BCeDoS,GAvBoC,SAAC7U,GAChD,OACI,yBACKkC,UAAWlC,EAAM2Q,mBAChBhG,KAAGmK,wBACHnK,KAAGoK,mBAEL,yBAAK7S,UAAYlC,EAAM2Q,mBAEjBhG,KAAGgK,WADHhK,KAAGnI,MAEL,yBAAKN,UAAWyI,KAAGqK,wBACf,6BACI,kBAAC,IAAD,CAASvT,QAASzB,EAAMiV,iBAAmBxS,GAAI,mBAA/C,gBAEJ,6BACI,kBAAC,KAAD,CAAcuD,SAAS,QAAQwC,MAAO,CAAChH,MAAQ0T,KAAK,aCH7DC,GAT8D,SAACnV,GAC1E,OAAQ,yBAAKkC,UAAWkT,IAAGC,oBACvB,kBAAC,GAAD,CAAUtf,YAAaiK,EAAMjK,cAC7B,kBAAC,GAAD,CAAK4a,mBAAoB3Q,EAAM2Q,mBAAoBiE,aAAc5U,EAAM4U,eACvE,kBAAC,GAAD,CAAiBK,iBAAkBjV,EAAMiV,iBACxBtE,mBAAoB3Q,EAAM2Q,uB,yCCEpC2E,GAX+B,SAACtV,GAE3C,OAAO,yBAAKkC,UAAW2B,KAAG0R,UACd/M,MAAO,CAAC/I,QAAO,UAAOO,EAAMjC,OAAWiC,EAAMwV,SAAoB,QAAT,QACpDC,KAAI,UAAMzV,EAAMwV,UAAYxV,EAAM0V,YAC/B1V,EAAMwV,SAAWxV,EAAM0V,WAAY,GAAK,QACnD,yBAAKxT,UAAW2B,KAAG8R,gBAAnB,KACA,yBAAKzT,UAAW2B,KAAG+R,YAAnB,IAAiC5V,EAAMjC,OAASiC,EAAMjC,MAAM8X,OAAS7V,EAAMjC,MAAM8X,MAAjF,OCGGN,GAV8B,SAACvV,GAE1C,OAAO,yBAAKkC,UAAW2B,KAAGyR,WACd9M,MAAO,CAAE/I,QAAO,UAAOO,EAAMjC,OAAUiC,EAAMwV,SAAoB,QAAT,QACpDM,MAAK,UAAM9V,EAAMwV,UAAYxV,EAAM+V,aAAiB/V,EAAM+V,YAAc/V,EAAMwV,SAAW,GAAK,QACtG,yBAAKtT,UAAW2B,KAAG8R,gBAAnB,KACA,yBAAKzT,UAAW2B,KAAG+R,YAAnB,IAAiC5V,EAAMjC,OAASiC,EAAMjC,MAAMiY,KAAOhW,EAAMjC,MAAMiY,IAA/E,OCjBEC,GAAU,SAACC,GACrB,IAAIC,EAAU,EACd,GAAID,EAAIE,aACJ,KACID,GAASD,EAAIR,WACRQ,EAAIE,cAGTF,EAAIA,EAAIE,kBAELF,EAAIG,IACXF,GAASD,EAAIG,GAEjB,OAAOF,GCuFIG,GA7EgC,SAACtW,GAAW,IAAD,MAC9BE,mBAAS,CAC7B2V,OAAO,UAAA7V,EAAMjC,aAAN,eAAa8X,OAAQ7V,EAAMjC,MAAM8X,MAAyB,QACjEG,KAAK,UAAAhW,EAAMjC,aAAN,eAAaiY,KAAMhW,EAAMjC,MAAMiY,IAAuB,UAHT,mBACjDjY,EADiD,KAC1CwY,EAD0C,OAOxBrW,qBAPwB,mBAOjDsW,EAPiD,KAOvCC,EAPuC,OAQtBvW,qBARsB,mBAQjDwW,EARiD,KAQtCC,EARsC,OASpBzW,qBAToB,mBASjD0W,EATiD,KASrCC,EATqC,OAUlB3W,qBAVkB,mBAUjD4W,EAViD,KAUpCC,EAVoC,KAahDC,EAAmB,WAErB,IAAIC,EAAS7E,SAAS8E,iBAAiB,gBAEnCpL,EAAKsG,SAAS8E,iBAAiB,wBAGnCC,EAAcC,iBAAiBH,EAAO,GAAI,MAAM/M,MAEhDmN,EAAkBpB,GAASgB,EAAO,IAElCK,EAAgBD,EAAkB1K,OAAOC,SAASuK,EAAYzI,OAAO,EAAGyI,EAAY3d,OAAS,IAE7F+d,EAAatB,GAASnK,EAAG,IACzB0L,EAAcvB,GAASnK,EAAG,IAC9B+K,EAAcQ,GACdN,EAAeO,GACfb,EAAYc,GACZZ,EAAaa,IAGbrI,qBAAU,WACFnP,EAAMjC,OAASwY,EAASvW,EAAMjC,OAC7BiZ,MACF,CAAChX,EAAMjC,OAASiC,EAAMjC,QAoB7B,OAAQ,oCACJ,kBAAC,KAAD,CACI0Z,SAAUzX,EAAMyX,SAChBC,OAAQ1X,EAAM0X,OAAS1X,EAAM0X,OAAS,GACtCC,SAAU3X,EAAM2X,SAAW3X,EAAM2X,SAAW,QAC5CC,SAAU5X,EAAM4X,SAAW5X,EAAM4X,SAAW,QAC5CC,KAAM,aACNC,cAvBmB,SAACC,KAwBpBC,iBAfsB,SAACD,GAC5Bf,IACChX,EAAMiY,cAAcla,GACpBwY,EAASwB,IAaL3K,SArBkB,SAAC2K,GACvBf,IACAT,EAASwB,IAoBLG,KAAMlY,EAAMkY,KACZna,MAAOA,IAEX,kBAAC,GAAD,CAAWyX,SAAUgB,EAAUd,WAAYkB,EAAY7Y,MAAOA,IAC9D,kBAAC,GAAD,CAAYyX,SAAUkB,EAAW3Y,MAAOA,EAAOgY,YAAae,MCmHrDqB,GA9KyC,SAACnY,GAAW,IAAD,cAC3DoY,EAAoBlK,GAASlO,EAAMxI,iBAAmBwI,EAAMxI,gBAAgBP,UAAY+I,EAAMxI,gBAAgBP,UAAY,IAC1HohB,EAAkBnK,GAASlO,EAAMxI,iBAAmBwI,EAAMxI,gBAAgBH,MAAQ2I,EAAMxI,gBAAgBH,MAAQ,IAFrD,EAGX6I,qBAHW,mBAG1DoY,EAH0D,KAGrCC,EAHqC,OAILrY,oBAAkB,GAJb,mBAI1DsY,EAJ0D,KAIlCC,EAJkC,OAKTvY,oBAAkB,GALT,mBAK1DwY,EAL0D,KAKpCC,EALoC,KAM3DC,EAAwB,UAAG5Y,EAAM4P,iBAAT,aAAG,EAAiBxY,WAAWsX,OAAO,GAAG,UAAA1O,EAAM4P,iBAAN,eAAiBxY,WAAWoC,QAAS,GACtGqf,EAAyB,UAAG7Y,EAAM4P,iBAAT,aAAG,EAAiBxY,WAAWsX,OAAO,GAAG,UAAA1O,EAAM4P,iBAAN,eAAiBxY,WAAWoC,QAAS,GACvGpE,EAAO,IAAIC,KACXyX,EAAcL,GAAWrX,EAAK0jB,YAAc,IAAMrM,GAAWrX,EAAK2jB,cAClEC,EAAyB,CACzBnD,MAAOhJ,GAAsBC,EAAa+L,EAA2BD,GACrE5C,IAAKlJ,GAGTqC,qBAAU,WAEFnP,EAAM4P,WACN5P,EAAM4P,UAAUE,gBAAkBsI,EAAkB7J,YAAYvO,EAAM4P,UAAUE,gBAChF9P,EAAM4P,UAAUC,YAAcwI,EAAgB9J,YAAYvO,EAAM4P,UAAUC,YACtE7P,EAAMzI,gBAAkByI,EAAMzI,eAAeR,WAAaiJ,EAAMzI,eAAeP,QAC/EuhB,EAAuB,CACnB1C,MAAO7V,EAAMzI,eAAeR,UAC5Bif,IAAKhW,EAAMzI,eAAeP,UAE3BuhB,EAAuBS,IACvBhZ,EAAMxI,kBACbwI,EAAMxI,gBAAgBP,WAAamhB,EAAkB7J,YAAYvO,EAAMxI,gBAAgBP,WACvF+I,EAAMxI,gBAAgBH,OAASghB,EAAgB9J,YAAYvO,EAAMxI,gBAAgBH,OACjFkhB,EAAuB,CACnB1C,MAAO7V,EAAMxI,gBAAgBT,UAC7Bif,IAAKhW,EAAMxI,gBAAgBR,aAGpC,WAACgJ,EAAM4P,iBAAP,aAAC,EAAiBC,WAAlB,UAA8B7P,EAAM4P,iBAApC,aAA8B,EAAiBE,eAA/C,UAA+D9P,EAAM4P,iBAArE,aAA+D,EAAiBxY,WAC/E4I,EAAMxI,kBAEV,IAqDMyhB,EAAQ,SAACzU,GACXA,EAAE0U,iBACElZ,EAAMmZ,yBACNnZ,EAAMmZ,0BAEVnZ,EAAM+P,kBAAa5X,GACnB6H,EAAM9H,wBAAmBC,GACzB6H,EAAMnI,yBAAwB,GAC9BugB,EAAkB9J,QAClB+J,EAAgB/J,SAIpB,OAAKtO,EAAMoZ,yBAGP,yBAAKlX,UAAU,eACX,yBAAKA,UAAW6E,KAAGP,OACf,yBAAKtE,UAAW6E,KAAGsS,YAAnB,eACA,yBAAKnX,UAAW6E,KAAGuS,cAEK,OAAnBhB,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBzC,SAArB,OAA8ByC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAqBtC,MACpD,kBAAC,GAAD,CAAYjY,MAAOua,EACPb,UAAU,EACVS,KAAM,GACND,cAAeM,KAO/B,0BAAMV,KAAK,oBAAoBrf,OAAO,IAClC,yBAAK0J,UAAW6E,KAAGwS,iBACf,yBAAKrX,UAAW6E,KAAGyS,4BAEf,kBAAC,GAAD,iBAAiBpB,EAAkB/J,KAAnC,CACahB,MAAO,aACPC,YAAa,yBACbpD,MAAO,OAIhBsO,GACA,yBAAK3hB,GAAG,gBAAgBqL,UAAW6E,KAAG0S,iBAAtC,+BAEJ,yBAAKjR,MAAO,CAACiH,UAAY,QAASvN,UAAU,sBAGpC,kBAAC,GAAD,eAAmB3E,OAAQyC,EAAMzC,QACzB8a,EAAgBhK,KADxB,CAEmBnE,MAAO,QAQ9BwO,GACA,yBAAK7hB,GAAG,gBAAgBqL,UAAW6E,KAAG0S,iBAAtC,+BAKZ,yBAAKvX,UAAW6E,KAAGL,mCACf,yBAAKxE,UAAW6E,KAAGJ,0BACf,yBAAKlF,QAxHP,SAAC+C,GAYnB,GAVI4T,EAAkBra,MAAMvE,OAAS,EAC3Bif,GAA0B,GAC1BA,GAA0B,GAGhCJ,EAAgBta,MAAMvE,OAAS,EACzBmf,GAAwB,GACxBA,GAAwB,GAG9BP,EAAkBra,MAAMvE,OAAS,GAC9B6e,EAAgBta,MAAMvE,OAAS,GAC/B8e,EAAqB,CAExB,IAAIoB,EACiBA,EAAjB1Z,EAAM4P,UAAiB,iBAA6B,kBACxD,IAAI+J,EAAK,2BAEF3Z,EAAM0Z,IAFJ,IAGL3iB,UAAWuhB,EAAoBzC,MAC/B7e,QAASshB,EAAoBtC,IAC7B/e,UAAWmhB,EAAkBra,MAC7B1G,MAAOghB,EAAgBta,MAEvB7G,OAAQ8I,EAAM0Z,GAAKxiB,OAAS8I,EAAM0Z,GAAKxiB,OAAS,UAEhDE,WAAY4I,EAAM4P,WAAa5P,EAAM4P,UAAUxY,WAAa4I,EAAM4P,UAAUxY,WAEtE4I,EAAM0Z,GAAKtiB,WAAa4I,EAAM0Z,GAAKtiB,WAAa,aAGtDuiB,EAAMriB,aAEN0I,EAAM4Z,uBAAuB5Z,EAAM0Z,GAAK7iB,GAAI8iB,GAE5C3Z,EAAMnI,yBAAwB,EAAOmI,EAAM0Z,GAAK7iB,MAGhDmJ,EAAMhI,cAAcgI,EAAM0Z,GAAK7iB,GAAI8iB,GAEnC3Z,EAAMnI,yBAAwB,EAAOmI,EAAM0Z,GAAK7iB,KAEpDuhB,EAAkB9J,QAClB+J,EAAgB/J,QAChBmK,GAA0B,GAC1BE,GAAwB,GACxBM,EAAMzU,KAwEuCtC,UAAU,cACnC,kBAAC,GAAD,CAAkBsD,QAAS,OAAQY,KAAM,OACvBD,QAAS,YAAaH,SAAU,MAEtD,yBAAKvE,QAAUzB,EAAMmZ,wBAAyBjX,UAAW6E,KAAG8S,mBACxD,kBAAC,GAAD,CAAmBrU,QAAS,OAAQY,KAAM,UACxBD,QAAS,YAAaH,SAAU,GAAIJ,UAAW,gBAMrF,yBAAK1D,UAAW6E,KAAGC,MAlEiB,MCjG1C8S,G,2KAIE,OACI,kBAAC,GAAD,CAAoBX,wBAAyBnN,KAAKhM,MAAMmZ,wBACpCC,yBAA0BpN,KAAKhM,MAAMoZ,yBACrCvhB,wBAAyBmU,KAAKhM,MAAMnI,wBACpCN,eAAgByU,KAAKhM,MAAMzI,eAC3BqY,UAAW5D,KAAKhM,MAAM4P,UACtBpY,gBAAiBwU,KAAKhM,MAAMxI,gBAC5BQ,cAAegU,KAAKhM,MAAMhI,cAC1B+X,aAAc/D,KAAKhM,MAAM+P,aACzB7X,mBAAoB8T,KAAKhM,MAAM9H,mBAC/B0hB,uBAAwB5N,KAAKhM,MAAM4Z,uBACnCrc,OAAQyO,KAAKhM,MAAM3I,Y,GAfTyI,IAAMqM,WA4BjCC,eAAQC,aALJ,SAAC9T,GAAD,MAAsD,CACrEhB,eAAgBgB,EAAMgG,aAAahH,eACnCC,gBAAiBe,EAAMgG,aAAa/G,mBAIzB,CACXE,aAAYG,0BAAyBK,qBACrCF,gBAAc4hB,uBpCmpBoB,SAACvhB,EAAmBV,GACtD,MAAO,CAACC,KA/sBqB,oCA+sBWS,YAAWV,iBoCvpBxCyU,CAIX0N,I,mKC/BWC,GA3B2C,SAAC/Z,GACvD,OAAO,yBAAKkC,UAAWlC,EAAMC,QAAQ+Z,eACjC,kBAAC7M,GAAA,EAAD,CACItW,GAAG,4BACHwW,MAAM,YACNE,WAAS,EACTxP,MAAOiC,EAAMjC,MACbqP,SAAUpN,EAAMoN,SAChBE,YAAY,+BAEhB,kBAAC2M,GAAA,EAAD,CAAMzR,MAAO1J,OAAOob,WAAa,KAAO,CAAChO,WAAa,OAAO8D,YAAa,OAAQ,CAAC9D,WAAa,QAASiO,WAAS,GAC9G,kBAACF,GAAA,EAAD,CAAMzX,MAAI,GACN,kBAACyD,GAAA,EAAD,CAAQxE,QAASzB,EAAMoa,SAAU5Y,MAAO,UAAW6Y,KAAM,QAASlU,QAAS,aACtEnG,EAAMsa,mBAIf,kBAACL,GAAA,EAAD,CAAMzX,MAAI,GACN,kBAACyD,GAAA,EAAD,CAAQxE,QAASzB,EAAMua,SAAU/R,MAAO,CAACgS,WAAa,OAAQhZ,MAAO,UAAW6Y,KAAM,QAASlU,QAAS,aACnGnG,EAAMya,sBCmEZC,GA7EsC,SAAC1a,GAAW,IAAD,EACRE,oBAAS,GADD,mBACrDya,EADqD,KACjCC,EADiC,KAEtDC,EAAiB3M,GAAS,IAa1B4M,EAAO,iCAA6B9a,EAAM3I,MAAnC,UAEb,OAAQ,yBAAK6K,UAAU,iBAEXyY,EACM,kBAAC,GAAD,eAAiB1a,QAASD,EAAMC,QAASma,SAhBpC,WACnBpa,EAAM+a,YAAY/a,EAAM3I,MAAOwjB,EAAe9c,OAC9C6c,GAAsB,GACtBC,EAAevM,UAcUuM,EAAexM,KAD1B,CACgCkM,SAZ5B,WAClBK,GAAsB,IAWiDN,iBAAkB,OAC1DG,iBAAkB,YAEnC,kBAACR,GAAA,EAAD,CAAM/S,IAAKlH,EAAM3I,MAAO8iB,WAAS,GAE/B,kBAACF,GAAA,EAAD,CAAMzX,MAAI,EAAEwY,GAAI,IACZ,kBAACC,GAAA,EAAD,CAAUC,KAAK,WAAWC,QAAM,EAEtB1Z,QAASzB,EAAMob,aAAapb,EAAM3I,QACxC,kBAACgkB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,SAAiD,IAAxCvb,EAAMub,QAAQC,QAAQxb,EAAM3I,OACrCokB,UAAW,EACXC,eAAa,EACbC,WAAY,CAAC,kBAAmBb,MAGxC,kBAACc,GAAA,EAAD,CAAc/kB,GAAIikB,EAASe,QAAS7b,EAAM3I,UAIlD,kBAAC4iB,GAAA,EAAD,CAAMzX,MAAI,EAAEwY,GAAI,GAEZ,kBAACf,GAAA,EAAD,CAAMzR,MAAO,CAACiH,UAAW,QAAS0K,WAAS,GAGtB,UAAbna,EAAM8L,IAAkB,kBAACmO,GAAA,EAAD,CAAMzX,MAAI,EAACwY,GAAI,GACnC,kBAACtY,GAAA,EAAD,CAASlD,MAAM,OAAOmD,OAAK,EAACC,UAAU,OAClC,kBAAC,KAAD,CAAUnB,QAAS,kBAAMmZ,GAAsB,IACrCpS,MAAO,CAAChH,MAAO0D,KAAK,KAAMgG,OAAQ,UAAWsP,WAAY,OACzDxU,SAAS,cAM/B,kBAACiU,GAAA,EAAD,CAAMzX,MAAI,EAACwY,GAAI,GACX,kBAACtY,GAAA,EAAD,CAASlD,MAAM,SAASmD,OAAK,EAACC,UAAU,OACpC,kBAAC,KAAD,CACInB,QAAS,kBAAMzB,EAAM8b,YAAY9b,EAAM3I,MAAO2I,EAAM8L,KACpDtD,MAAoB,UAAbxI,EAAM8L,GACP,CAACtK,MAAOua,KAAS,KAAM7Q,OAAQ,UAAWsP,WAAY,OACtD,CAAChZ,MAAOua,KAAS,KAAM7Q,OAAQ,UAAWsP,WAAY,OAC5DxU,SAAS,mBCyDtCgW,GAlHiC,SAAChc,GAAU,IAkC9Bic,EAlC6B,EAEV/b,oBAAS,GAFC,mBAE/Cgc,EAF+C,KAE/BC,EAF+B,KAGhDC,EAAmBlO,GAAS,IAG3BmO,EAAM,SAAC7P,EAAa8P,GACvB,OAAO9P,EAAEtS,QAAO,SAAC6D,GAAD,OAAiC,IAAtBue,EAAEd,QAAQzd,OAYnCqd,EAAe,SAACrd,GAAD,OAAmB,WACpC,IAAMwe,EAAevc,EAAMub,QAAQC,QAAQzd,GACrCye,EAAU,YAAOxc,EAAMub,UAEP,IAAlBgB,EACAC,EAAWpiB,KAAK2D,GAEhBye,EAAWC,OAAOF,EAAc,GAGpCvc,EAAM0c,WAAWF,KAGfG,EAAkB,SAACV,GAAD,OAtBDzP,EAsBmCxM,EAAMub,QAtB5Be,EAsBqCL,EArB9DzP,EAAEtS,QAAO,SAAC6D,GAAD,OAAiC,IAAtBue,EAAEd,QAAQzd,OAqBuCvE,OAtB1D,IAACgT,EAAa8P,GA+CpC,OAAQ,kBAACM,GAAA,EAAD,KACJ,kBAAC3C,GAAA,EAAD,CAAME,WAAS,GACX,kBAACF,GAAA,EAAD,CAAMzX,MAAI,EAACwY,GAAI,GACX,kBAAC6B,GAAA,EAAD,CACI3a,UAAWlC,EAAMC,QAAQ6c,WACzB7a,OACI,kBAACqZ,GAAA,EAAD,CACI7Z,SA9BCwa,EA8BwBjc,EAAMic,MA9BV,WAnB9B,IAACzP,EAAa8P,EAoBrBK,EAAgBV,KAAWA,EAAMziB,OACjCwG,EAAM0c,WAAWL,EAAIrc,EAAMub,QAASU,IAEpCjc,EAAM0c,YAvBElQ,EAuBexM,EAAMub,QAvBRe,EAuBiBL,EAtBpC,GAAN,mBAAWzP,GAAX,YAAiB6P,EAAIC,EAAG9P,SAiDJ+O,QAASoB,EAAgB3c,EAAMic,SAAWjc,EAAMic,MAAMziB,QAAiC,IAAvBwG,EAAMic,MAAMziB,OAC5EujB,cAAeJ,EAAgB3c,EAAMic,SAAWjc,EAAMic,MAAMziB,QAA2C,IAAjCmjB,EAAgB3c,EAAMic,OAC5FxE,SAAiC,IAAvBzX,EAAMic,MAAMziB,OACtBmiB,WAAY,CAAC,aAAc,wBAGnCnc,MAAOQ,EAAMR,MACbwd,UAAS,UAAKL,EAAgB3c,EAAMic,OAA3B,YAAqCjc,EAAMic,MAAMziB,OAAjD,gBAGjB,kBAACygB,GAAA,EAAD,CAAMzX,MAAI,EAACwY,GAAI,GAEM,UAAbhb,EAAM8L,IACH,yBAAKtD,MAAO1J,OAAOob,WAAa,KAAM,CAAChO,WAAa,OACtDpN,OAAOob,WAAY,KAAQ,CAAChO,WAAa,MAAM8D,YAAc,OAC7D,CAAC9D,WAAa,KAAK8D,YAAc,QAC9B,kBAACtN,GAAA,EAAD,CAASlD,MAAM,mBAAmBmD,OAAK,EAACC,UAAU,OAC9C,kBAACqD,GAAA,EAAD,CAAQxE,QAxCJ,WACxB0a,GAAkB,IAuCwC9B,KAAK,QAAQ7Y,MAAM,YACjD2E,QAAS,WAAYD,UAAW,kBAAC,KAAD,OADxC,iBAWhBgW,GAA+B,UAAblc,EAAM8L,IAAkB,kBAAC,GAAD,iBAAqBsQ,EAAiB/N,KAAtC,CAA4CpO,QAASD,EAAMC,QAC1Cma,SA/CtC,WACzBpa,EAAMid,SAASb,EAAiBre,OAChCqe,EAAiB9N,QACjB6N,GAAkB,IA6C6C5B,SA3CvC,WACxB6B,EAAiB9N,QACjB6N,GAAkB,IAyC4E7B,iBAAkB,MACjDG,iBAAkB,YAGjF,kBAACyC,GAAA,EAAD,MAEA,kBAACC,GAAA,EAAD,CAAMjb,UAAWlC,EAAMC,QAAQmd,KAAMC,OAAK,EAACC,UAAU,MAAMpC,KAAK,QAC3Dlb,EAAMic,MAAM9iB,KAAI,SAAC4E,GACd,OAAS,kBAAC,GAAD,CAAemJ,IAAKnJ,EAAO1G,MAAO0G,EAAO+N,GAAI9L,EAAM8L,GAAIyP,QAASvb,EAAMub,QACvDH,aAAcA,EAAcU,YAAa9b,EAAM8b,YAC/Cf,YAAa/a,EAAM+a,YAAa9a,QAASD,EAAMC,aAG3E,kBAACgb,GAAA,EAAD,SCnINlc,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyG,KAAM,CACFuG,WAAY,KACZ8D,YAAa,MAEjB8M,WAAY,CACRS,QAASte,EAAMM,QAAQ,EAAG,IAE9B6d,KAAM,CAEFlT,MAAOpL,OAAOob,WAAa,IAAM,IAC3Bpb,OAAOob,WAAa,IAAM,IACnBpb,OAAOob,WAAa,KAAO,IAC3Bpb,OAAOob,WAAa,KAAO,IACtB,IAClB/P,OAASrL,OAAOob,WAAa,IAAM,IAC7Bpb,OAAOob,WAAa,IAAM,IACvBpb,OAAOob,WAAa,KAAO,IACvBpb,OAAOob,WAAa,KAAO,IACtB,IAElBnU,gBAAiB9G,EAAM4G,QAAQ2X,WAAWC,MAC1CC,SAAU,QAEdvC,OAAQ,CACJ3Z,MAAO,UACP8D,OAAQrG,EAAMM,QAAQ,GAAK,IAE/Bya,cAAe,CACX,uBAAwB,CACpB1U,OAAQrG,EAAMM,QAAQ,GACtB2K,MAAOpL,OAAOob,WAAa,IAAM,OAASpb,OAAOob,WAAa,KAAO,OAASpb,OAAOob,WAAa,KAC5F,OAAS,QAEnBlK,YAAa,MACb2N,cAAe,aAK3B,SAAStB,GAAI7P,EAAa8P,GACtB,OAAO9P,EAAEtS,QAAO,SAAC6D,GAAD,OAAiC,IAAtBue,EAAEd,QAAQzd,MAGzC,SAAS6f,GAAapR,EAAa8P,GAC/B,OAAO9P,EAAEtS,QAAO,SAAC6D,GAAD,OAAiC,IAAtBue,EAAEd,QAAQzd,MAezC,IAuEeR,GAvEwB,SAACyC,GACpC,IAAMC,EAAUlB,KAD8B,EAEhBmB,mBAAmB,IAFH,mBAEvCqb,EAFuC,KAE9BmB,EAF8B,KAIxCmB,EAAgBD,GAAarC,EAASvb,EAAMzC,QAC5CugB,EAAyBF,GAAarC,EAASvb,EAAMxC,iBAgB3D,OACI,6BACI,kBAACyc,GAAA,EAAD,CAAME,WAAS,EAAC5a,QAAS,EAAGwe,WAAW,SAAS7b,UAAWjC,EAAQ0F,MAC/D,kBAACsU,GAAA,EAAD,CAAMzX,MAAI,GACN,kBAAC,GAAD,CAAYhD,MAAO,SAAUyc,MAAOjc,EAAMzC,OAC9BuO,GAAI,QAAS7L,QAASA,EACtB6b,YAAa9b,EAAM8b,YAAamB,SAAUjd,EAAMid,SAChD1B,QAASA,EAASmB,WAAYA,EAC9B3B,YAAa/a,EAAM+a,eAGnC,kBAACd,GAAA,EAAD,CAAMzX,MAAI,GACN,kBAACyX,GAAA,EAAD,CAAME,WAAS,EAAC6D,UAAU,SAASD,WAAW,UAC1C,kBAAC9X,GAAA,EAAD,CACIE,QAAQ,YACRkU,KAAK,QACLnY,UAAWjC,EAAQkb,OACnB1Z,QA7BI,WACxBzB,EAAMie,mBAAmBje,EAAMxC,gBAAgB0gB,OAAOL,IACtD7d,EAAMme,UAAU9B,GAAIrc,EAAMzC,OAAQsgB,IAClCnB,EAAWL,GAAId,EAASsC,KA2BJpG,SAAmC,IAAzBoG,EAAcrkB,OACxBmI,aAAW,sBACXH,MAAO,aAPX,KAWA,kBAACyE,GAAA,EAAD,CACIE,QAAQ,YACRkU,KAAK,QACLnY,UAAWjC,EAAQkb,OACnB1Z,QAlCa,WACjCzB,EAAMme,UAAUne,EAAMzC,OAAO2gB,OAAOJ,IACpC9d,EAAMie,mBAAmB5B,GAAIrc,EAAMxC,gBAAiBsgB,IACpDpB,EAAWL,GAAId,EAASuC,KAgCJrG,SAA4C,IAAlCqG,EAAuBtkB,OACjCmI,aAAW,qBACXH,MAAO,WAPX,OAaR,kBAACyY,GAAA,EAAD,CAAMzX,MAAI,GACN,kBAAC,GAAD,CAAYhD,MAAO,mBAAoByc,MAAOjc,EAAMxC,gBACxCsO,GAAI,iBAAkB4Q,WAAYA,EAClCnB,QAASA,EAAS0B,SAAUjd,EAAMid,SAClCnB,YAAa9b,EAAM8b,YAAa7b,QAASA,EACzC8a,YAAa/a,EAAM+a,kBChItCqD,GAAkB,SAACjQ,GAAqF,IAAD,EACnFjO,mBAASiO,GAD0E,mBAC3GkQ,EAD2G,KAC/FC,EAD+F,KAQhH,MAAM,CACFD,cAAYE,KAPH,WACTD,GAAU,IAMOE,KAJR,WACTF,GAAU,M,oBCYZvf,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC0G,KAAM,CACF,uBAAwB,CACpBL,OAAQrG,EAAMM,QAAQ,GACtB2K,MAAO,UAkFJuU,GA7EgC,SAACze,GAC5C,IAAMC,EAAUlB,KADsC,EAERmB,mBAAS,IAFD,mBAE/Cwe,EAF+C,KAE9BC,EAF8B,OAGFze,mBAAS,IAHP,mBAG/C0e,EAH+C,KAG3BC,EAH2B,OAId3e,qBAJc,mBAI/C4e,EAJ+C,KAIjCC,EAJiC,OAKR7e,qBALQ,mBAK/C8e,EAL+C,KAK9BC,EAL8B,KA6BtD,OAAO,yBAAK/c,UAAU,YAClB,0BAAMA,UAAWjC,EAAQ0F,KAAMuZ,aAAa,OACxC,yBAAKhd,UAAW2B,KAAGsb,iBACf,yBAAKjd,UAAU,cACX,kBAACiL,GAAA,EAAD,CACIC,SA5BO,SAAC5I,GAAD,OAAYma,EAAmBna,EAAExJ,OAAO+C,QA6B/CqhB,QAASN,EACTjoB,GAAG,6BACHwW,MAAM,QACNtP,MAAO2gB,EACPpR,YAAY,0BACZ+R,WAAYP,IAEhB,yBAAK5c,UAAW2B,KAAGyb,OAAnB,2BAGJ,yBAAKpd,UAAW2B,KAAG0b,mBACf,kBAACpS,GAAA,EAAD,CACIC,SAxCU,SAAC5I,GAAD,OAAYqa,EAAsBra,EAAExJ,OAAO+C,QAyCrDqhB,QAASJ,EACTpnB,KAAM,WACNf,GAAG,6BACHwW,MAAM,WACNtP,MAAO6gB,EACPtR,YAAY,6BACZ+R,WAAYL,IAEhB,yBAAK9c,UAAW2B,KAAGyb,OAAnB,2BAGJ,kBAACrF,GAAA,EAAD,CAAME,WAAS,EAAC3R,MAAO,CAAC0D,WAAY,OAAQ8D,YAAa,SACrD,kBAACiK,GAAA,EAAD,CAAMzX,MAAI,EAACgd,GAAI,GAAIxE,GAAI,GACnB,kBAAC/U,GAAA,EAAD,CAAQuC,MAAO,CAAC0B,MAAO,SAAUzI,QArDnC,WAEVid,EAAgBllB,OAAS,GAAKolB,EAAmBplB,OAAS,GACtDklB,EAAgBllB,OAAS,EAAGulB,EAAgB,0BAC3CA,EAAgB,MACjBH,EAAmBplB,OAAS,EAAGylB,EAAmB,0BACjDA,EAAmB,OAEpBjf,EAAMyf,WACNV,EAAgB/e,EAAMyf,WACtBR,EAAmBjf,EAAMyf,aAEzBzf,EAAM0f,qBAAqBhB,EAAiBE,GAC5CD,EAAmB,IACnBE,EAAsB,IACtBE,EAAgB,MAChBE,EAAmB,QAqC0C9Y,QAASnG,EAAM2f,oBAAoBxZ,QAChF3E,MAAOxB,EAAM2f,oBAAoBne,OACpCxB,EAAM4f,oBAGf,kBAAC3F,GAAA,EAAD,CAAMzX,MAAI,EAACgd,GAAI,GAAIxE,GAAI,GACnB,kBAAC/U,GAAA,EAAD,CAAQuC,MAAO,CAAC0B,MAAO,SAAUzI,QAASzB,EAAM6f,oBACxC1Z,QAASnG,EAAM8f,mBAAmB3Z,QAAS3E,MAAOxB,EAAM8f,mBAAmBte,OAC9ExB,EAAM+f,wBCvEpBC,GAtBuB,SAAChgB,GAAW,IAAD,EAChBE,mBAAwB,MADR,mBACtC+f,EADsC,KAC9BC,EAD8B,KAY7C,OAAQ,yBAAKhe,UAAU,cACf,kBAAC,GAAD,CAAUwd,qBAXG,SAACS,EAAyBC,GACnB,SAApBD,GAAqD,SAAvBC,GAC9BF,EAAW,MACX1f,aAAaC,QAAQ,SAAU,QAC/B3B,OAAO4B,SAASC,UAEhBuf,EAAW,gCAKmCL,oBAAqB7f,EAAMqgB,kBAC/DT,kBAAmB,QAASG,iBAAkB,UAC9CJ,oBAAqB,CAACne,MAAM,UAAU2E,QAAQ,aAC9C2Z,mBAAoB,CAACte,MAAQ,YAAY2E,QAAQ,YACjDsZ,UAAWQ,MCSlBK,GAzB8B,SAACtgB,GAAW,IAAD,EACNE,mBAAwB,MADlB,mBAC7CqgB,EAD6C,UAgBpD,OAAO,yBAAKre,UAAU,UAClB,kBAAC,GAAD,CAAUwd,qBAfG,SAACS,EAAyBC,GAInCpgB,EAAMmL,aAAa,CACf/I,SAAU,CAACnB,WAAY,SAAUD,SAAU,OAC3Cwf,aAAc,IACd/V,SAAU,UACVC,QAAS,kDAOyBmV,oBAAqB7f,EAAMygB,kBAC3Db,kBAAmB,UAAWG,iBAAkB,UAChDJ,oBAAqB,CAACne,MAAO,YAAa2E,QAAS,aACnD2Z,mBAAoB,CAACte,MAAO,UAAW2E,QAAS,YAChDsZ,UAAWc,MCJdG,GAhB6B,SAAC1gB,GAAU,IAAD,EACNE,mBAAS,SADH,mBAC3CmE,EAD2C,KAC3Bsc,EAD2B,KAIlD,OAAO,yBAAKze,UAAU,eACd,yBAAKA,UAAW2B,KAAG2C,OAES,UAApBnC,EACO,kBAAC,GAAD,CAAQgc,kBALN,kBAAMM,EAAmB,mBAO5B,kBAAC,GAAD,CAAQF,kBARJ,kBAAIE,EAAmB,UAQmBxV,aAAcnL,EAAMmL,gBAGhF,yBAAKjJ,UAAW2B,KAAGmD,O,oBCjB/B,SAAS4Z,GAAM5gB,GACX,OAAO,kBAAC,KAAD,eAAU6gB,UAAW,EAAG1a,QAAQ,UAAanG,IAGxD,IAAMjB,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5C0G,KAAM,CACFuE,MAAO,OACP,YAAa,CACTuF,UAAWxQ,EAAMM,QAAQ,SAkCtBuhB,GAf6B,SAAC9gB,GACzC,IAAMC,EAAUlB,KAGhB,OACI,yBAAKmD,UAAWjC,EAAQ0F,MACpB,kBAACob,GAAA,EAAD,CAAW3f,KAAMpB,EAAMghB,UAAWC,iBAAkBjhB,EAAMjF,QAAQylB,aAAexgB,EAAMjF,QAAQylB,aAAe,IACpGnf,QAASrB,EAAMkhB,OAAQngB,aAAcf,EAAMjF,QAAQqH,UACzD,kBAAC,GAAD,CAAOf,QAASrB,EAAMkhB,OAAQzW,SAAUzK,EAAMjF,QAAQ0P,UACjDzK,EAAMjF,QAAQ2P,Y,kDChC7B3L,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyG,KAAM,CACFvG,SAAU,EACVse,SAAU,SACVH,QAASte,EAAMM,QAAQ,EAAG,IAE9B6d,KAAM,CACF+D,SAAU,IACV7b,OAAO,GAAD,OAAKrG,EAAMM,QAAQ,GAAnB,WACNge,QAASte,EAAMM,QAAQ,IAE3B4b,OAAQ,CACJ7V,OAAQrG,EAAMM,QAAQ,IAE1B6hB,UAAW,CACP3hB,QAAS,QAEb4hB,SAAU,CACNnV,WAAY,SA6CToV,GAtC0C,SAACthB,GACtD,IAAMC,EAAUlB,KACVwiB,EAAmBrT,GAAS,IAC5BsT,EAAwBtT,GAAS,IAEvC,OAAO,yBAAKhM,UAAWjC,EAAQmd,MAC3B,kBAACnD,GAAA,EAAD,CAAME,WAAS,EAAC6D,UAAU,SAASyD,QAAQ,SAAS1D,WAAW,UAC3D,kBAAC9D,GAAA,EAAD,CAAMzX,MAAI,GACN,2BACIkf,OAAO,UACPxf,UAAWjC,EAAQmhB,UACnBvqB,GAAG,wBACH8qB,UAAQ,EACR/pB,KAAK,SAET,2BAAOf,GAAG,gBAAgBiX,QAAQ,yBAC9B,yBAAKtF,MAAO,CAAC0B,MAAO,IAAKC,OAAQ,IAAKC,aAAc,MAAOc,OAAQ,WAC9DlJ,IAAKC,KAAQF,IAAI,kBAG9B,kBAACkY,GAAA,EAAD,CAAMzX,MAAI,EAACN,UAAWjC,EAAQohB,UAC1B,kBAAC,GAAD,iBAAiBE,EAAiBlT,KAAlC,CACahB,MAAO,OACPC,YAAa,0BACbpD,MAAO,QAGxB,kBAAC+P,GAAA,EAAD,CAAMzX,MAAI,EAACN,UAAWjC,EAAQohB,UAC1B,kBAAC,GAAD,iBAAiBG,EAAsBnT,KAAvC,CACahB,MAAO,YACPC,YAAa,+BACbpD,MAAO,WCvD9B0X,GAAa9hB,IAAM+hB,YAAW,SAChC7hB,EACA8hB,GAEA,OAAO,kBAACC,GAAA,EAAD,eAAO/D,UAAU,KAAK8D,IAAKA,GAAS9hB,OA2ChCgiB,GApCsC,SAAChiB,GACzBkO,GAAS,aACPA,GAAS,eAOpC,OAAO,6BACH,kBAAC+T,GAAA,EAAD,CACQ7gB,KAAMpB,EAAMkiB,OACZC,oBAAqBP,GACrB1gB,aAAW,EACXG,QAASrB,EAAMwe,KACf4D,kBAAgB,2BAChBC,mBAAiB,kCAEjB,kBAACC,GAAA,EAAD,CAAazrB,GAAG,4BAA4B,WAC5C,kBAAC0rB,GAAA,EAAD,KACI,kBAAC,GAAD,OAEJ,kBAACC,GAAA,EAAD,KACI,kBAACvc,GAAA,EAAD,CAAQxE,QApBG,WAGvBzB,EAAMwe,QAiB2Chd,MAAM,WAA3C,QAGA,kBAACyE,GAAA,EAAD,CAAQxE,QAASzB,EAAMwe,KAAMhd,MAAM,WAAnC,eCiJL4K,eACXC,aAVoB,SAAC9T,GAAD,MAAqC,CACzDhB,eAAgBgB,EAAMgG,aAAahH,eACnCxB,YAAawC,EAAM+F,aAAavI,YAChCkW,eAAgB1T,EAAMgG,aAAa/H,eACnCyE,iBAAkB1C,EAAMgG,aAAa9G,kBACrC8F,OAAQhF,EAAMkG,WAAWlB,OACzBC,gBAAiBjF,EAAMkG,WAAWjB,mBAI0C,CACxE3F,0BACAG,gBAAeN,aAAYU,gBAC3B2iB,Y/C3GmB,SAAC/c,EAAkBC,GAC1C,MAAO,CAACrG,KAzFS,sBAyFWoG,WAAUC,a+C0GrBgf,S/CrHG,SAAC5lB,GACrB,MAAO,CAACO,KAjFM,mBAiFWP,U+CoHEykB,Y/ChHJ,SAACzkB,EAAesG,GACvC,MAAO,CAAC/F,KArFS,sBAqFWP,QAAOsG,S+C+GKsgB,mB/C1HT,SAACzgB,GAChC,MAAM,CAAC5F,KAxEkB,8BAwEW4F,oB+CyHwB2gB,U/C/HtC,SAAC5gB,GACvB,MAAM,CAAC3F,KApEQ,oBAoEW2F,a+C0Hf6O,EAhIkB,SAACpM,GAE9B,IAAIoZ,EAA2BgF,IAAgB,GAC3CzN,EAAqByN,IAAgB,GACrCqE,EAAuBrE,IAAgB,GAJH,EAKRle,wBAAiC/H,GALzB,mBAKnCyX,EALmC,KAKxBG,EALwB,OAMQ7P,oBAAS,GANjB,mBAMnCwiB,EANmC,KAMhBC,EANgB,OAOIziB,mBAA2B,CACnEwK,QAAS,uBACT8V,aAAc,IACdpe,SAAU,CAACnB,WAAY,SAAUD,SAAU,UAC3CyJ,SAAU,UAX0B,mBAOnCmY,EAPmC,KAOlBC,EAPkB,KAclCC,EAAiB,SAAClT,GACpBG,EAAaH,IAGXzE,EAAe,SAACyX,GAClBF,GAAqBC,GAAqB,GAC1CE,EAAmBD,GACnBD,GAAqB,IAUzB,OAAQ,yBAAKzgB,UAAU,cAEqB,SAAnC1B,aAAauiB,QAAQ,UAChB,oCACE,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,kBAAC,KAAD,CAAUzgB,GAAI,iBAEnC,yBAAKP,UAAU,kBACX,kBAAC,GAAD,CAAaR,gBAAiB+gB,EAAqBlE,OAEnD,kBAAC,KAAD,CAAOyE,OAAK,EAACC,KAAK,UACXC,OAAQ,kBAAM,kBAAC,GAAD,CAAQ3lB,OAAQyC,EAAMzC,OACd0f,SAAUjd,EAAMid,SAChBlC,YAAa/a,EAAM+a,YACnBe,YAAa9b,EAAM8b,YACnBte,gBAAiBwC,EAAMxC,gBACvB2gB,UAAWne,EAAMme,UACjBF,mBAAoBje,EAAMie,wBAGvD,kBAAC,KAAD,CAAOgF,KAAK,QACLC,OAAQ,kBAAM,yBAAKhhB,UAAWkT,IAAG+N,6BAC7B,kBAAC,GAAD,CAA2BxS,mBAAoBA,EAAmB0N,YACvCzJ,aAAcjE,EAAmB6N,KACjCvJ,iBAAkBtE,EAAmB4N,KACrCxoB,YAAaiK,EAAMjK,kBAIzD,yBAAKmM,UAAWkT,IAAGgO,aACf,yBAAKlhB,UAAU,kBACX,kBAAC,KAAD,CAAO8gB,OAAK,EAACC,KAAK,YACXC,OAAQ,kBAAM,yBAAKhhB,UAAU,gBACzB,yBAAKA,UAAU,YACX,kBAAC,GAAD,CAAmB0N,UAAWA,EACX5G,uBAAwBoQ,EAAyBmF,KACjDla,gBAAiB,WACjB8G,aAAcA,EACdgO,wBAAyBC,EAAyBoF,KAClDzO,aAAcA,EACdqJ,yBAA0BA,EAAyBiF,mBAKrF,kBAAC,KAAD,CAAO2E,OAAK,EAACC,KAAK,kBACXC,OAAQ,kBAAM,kBAAC,GAAD,CAAevS,mBAAoBA,EAAmB0N,YACvCpS,eAAgBjM,EAAMiM,eACtBjD,uBAAwBoQ,EAAyBmF,KACjD3O,UAAWA,EACXlY,WAAYsI,EAAMtI,WAClBH,eAAgByI,EAAMzI,eACtB0D,iBAAkB+E,EAAM/E,uBAIhE,kBAAC,KAAD,CAAOgoB,KAAK,QACLC,OAAQ,kBAAM,yBAAKhhB,UAAWkT,IAAGiO,2BAC7B,kBAAC,GAAD,CAAc9rB,eAAgByI,EAAMzI,eACtBoZ,mBAAoBA,EAAmB0N,YACvCxmB,wBAAyBmI,EAAMnI,wBAC/BH,WAAYsI,EAAMtI,WAClBqY,aAAc+S,EACd9Z,uBAAwBoQ,EAAyBmF,KACjDvmB,cAAegI,EAAMhI,cACrBuF,OAAQyC,EAAMzC,cAI3C,kBAAC,GAAD,CACIwS,aAAcA,EACdqJ,yBAA0BA,EAAyBiF,YACnDlF,wBAAyB,kBAAMC,EAAyBoF,QACxD5O,UAAWA,EACXvY,MAAO2I,EAAMzC,SAEjB,kBAAC,GAAD,CAAkB2kB,OAAQO,EAAqBpE,YAAaG,KAAMiE,EAAqBjE,SAG7F,kBAAC,GAAD,CAAUrT,aAAcA,IAE9B,kBAAC,GAAD,CAAU6V,UAAW0B,EAAmBxB,OAxF3B,SAACpe,EAA8BwgB,GACjC,cAAXA,GAGJX,GAAqB,IAoF6C5nB,QAAS6nB,QCzKnFW,IAASL,OACL,kBAAC,IAAD,CAAaM,SAAUC,cACnB,kBAAC,IAAD,CAAU/kB,MAAOA,GACb,yBAAKwD,UAAWkT,IAAGsO,cACX,kBAAC,GAAD,SAIlBtR,SAASC,eAAe,U,mBCf1Bhe,EAAOC,QAAU,CAAC,YAAc,yBAAyB,4BAA8B,yCAAyC,mBAAqB,gCAAgC,0BAA4B,uCAAuC,aAAe,4B,mBCAvQD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,WAAa,+BAA+B,eAAiB,mCAAmC,WAAa,iC,mBCAzKD,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,GAAK,uBAAuB,gBAAkB,oCAAoC,eAAiB,mCAAmC,kBAAoB,sCAAsC,MAAQ,4B,mBCA5PD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,iBAAmB,0CAA0C,YAAc,qCAAqC,iBAAmB,4C,mBCDpMD,EAAOC,QAAU,IAA0B,oC,mBCC3CD,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,GAAK,0BAA0B,mBAAqB,0CAA0C,kCAAoC,yDAAyD,yBAA2B,gDAAgD,2BAA6B,kDAAkD,wBAA0B,iD,mBCAtaD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,iBAAmB,gCAAgC,eAAiB,8BAA8B,6BAA+B,4CAA4C,oBAAsB,mCAAmC,MAAQ,uB,mBCA/SD,EAAOC,QAAU,CAAC,kBAAoB,+BAA+B,YAAc,yBAAyB,KAAO,kBAAkB,WAAa,2B","file":"static/js/main.42b28186.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLinks\":\"NavBar_NavLinks__22adz\",\"item\":\"NavBar_item__fYm3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"Issue\":\"WorkLog_Issue__34BO9\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__2RI0C\",\"bg\":\"ModalWindow_bg__8X2Z5\",\"ModalTitle\":\"ModalWindow_ModalTitle__3-dof\",\"ModalSlider\":\"ModalWindow_ModalSlider__3oV3v\",\"ModalTextFields\":\"ModalWindow_ModalTextFields__3ZTaV\",\"NewWorklogContentContainer\":\"ModalWindow_NewWorklogContentContainer__2fUp5\",\"NewWorklogContentTitle\":\"ModalWindow_NewWorklogContentTitle__3PjFx\",\"ModalInputError\":\"ModalWindow_ModalInputError__2Aqa5\",\"NewWorklogContentInput\":\"ModalWindow_NewWorklogContentInput__35xPA\",\"NewWorklogControlButtonsContainer\":\"ModalWindow_NewWorklogControlButtonsContainer__2gc4P\",\"NewWorklogControlButtons\":\"ModalWindow_NewWorklogControlButtons__1dXL9\",\"NewWorklogControlButton\":\"ModalWindow_NewWorklogControlButton__2ig_v\",\"CloseButtonMargin\":\"ModalWindow_CloseButtonMargin__zOi3Y\",\"NewWorklogSubmitButton\":\"ModalWindow_NewWorklogSubmitButton__RioTJ\",\"Err\":\"ModalWindow_Err__UprFu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__CZPxc\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__2CwNk\",\"item\":\"Favorites_item__3AZR3\",\"ActiveItem\":\"Favorites_ActiveItem__1WRgW\",\"FavoritesText\":\"Favorites_FavoritesText__3YH1W\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3vOLp\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__2099c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","import axios from \"axios\";\r\nimport {TSendWorklogsData} from \"../Data/WorkLogsReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://localhost:5000/api/1.0/'\r\n})\r\n\r\n\r\nexport type TDefRes = {\r\n    resultCode : number\r\n    messages: Array<string>\r\n    data : any\r\n}\r\n\r\nexport const API = {\r\n    async SendWorklogBlock(WorklogData : TSendWorklogsData) {\r\n        const response = await instance.post<TDefRes>(`Worklogs`,WorklogData)\r\n        return response.data\r\n    }\r\n}\r\n\r\n","import {TCurrentDate} from \"../../Data/CalendarReducer\";\r\nconst days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = (): TCurrentDate => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    let CurrentDate: TCurrentDate = {\r\n        DayName,\r\n        CurrentYear,\r\n        //@ts-ignore\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n    return CurrentDate\r\n\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {API} from \"../API/requests\"\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241,\r\n            Issue: \"Meeting\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122,\r\n            Issue: \"QA\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null,\r\n            Issue: \"Branding\",\r\n            IsFavorites: false\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false,\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Sun,October 4\",\r\n                SummaryStatus: \"danger\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 4\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412416,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"12:30\",\r\n                TaskField: \"Create request by API\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:30:00\",\r\n                id: 2131241241251217,\r\n                Issue: \"API Middleware\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"12:20\",\r\n                EndTime: \"13:40\",\r\n                TaskField: \"Fixed buttons positions\",\r\n                status: \"warning\",\r\n                TimerValue: \"01:20:00\",\r\n                id: 21312412551418,\r\n                NestingItems: null,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 1232132132419,\r\n                    TimerValue: \"01:30:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512420,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Branding\",\r\n                    IsFavorites: false\r\n                }]\r\n        }, {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Set,October 3\",\r\n                SummaryStatus: \"ok\",\r\n                SummaryTime: \"08:00:00\",\r\n                id: 5\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                NestingItems: null,\r\n                status: \"ok\",\r\n                TimerValue: \"01:00:00\",\r\n                id: 31232175895321,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"10:30\",\r\n                    EndTime: \"11:30\",\r\n                    TaskField: \"Meeting with QA\",\r\n                    status: \"ok\",\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:00:00\",\r\n                    id: 76967845623522,\r\n                    Issue: \"QA\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:55\",\r\n                    TaskField: \"Meeting with costumer\",\r\n                    status: \"danger\",\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:55:00\",\r\n                    id: 12312434256623,\r\n                    Issue: \"Customer\",\r\n                    IsFavorites: false\r\n                }\r\n            ]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el =>  {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                status: \"danger\",\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n\r\n                if (WB.BlockInfo.BlockCreatedDate === CurrentDate) {\r\n\r\n                    if(Worklog.Issue === action.NewWorklog.Issue){\r\n\r\n                        if(Worklog.id !== action.NewWorklog.id){\r\n                            WB.Worklogs = WB.Worklogs.filter(FWorklog=>FWorklog.id !== action.NewWorklog.id)\r\n                            if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                                Worklog.NestingItems.map(NestingItem=>{\r\n                                    if(NestingItem.id === action.NewWorklog.id){\r\n                                        if(NestingItem.Issue === action.NewWorklog.Issue){\r\n                                            debugger\r\n                                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                            NestingItem.Issue = action.NewWorklog.Issue\r\n                                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                        }\r\n                                    } else Worklog.NestingItems?.push(action.NewWorklog)\r\n                                })\r\n                            } else {\r\n                                Worklog.NestingItems = [action.NewWorklog]\r\n                            }\r\n\r\n                        }else{\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.status = action.NewWorklog.status\r\n                        }\r\n                    }else {\r\n                        if(Worklog.id === action.NewWorklog.id){\r\n                            Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                            Worklog.Issue = action.NewWorklog.Issue\r\n                            Worklog.TaskField = action.NewWorklog.TaskField\r\n                            Worklog.StartTime = action.NewWorklog.StartTime\r\n                            Worklog.EndTime = action.NewWorklog.EndTime\r\n                            Worklog.status = action.NewWorklog.status\r\n                        }\r\n                        else if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                            Worklog.NestingItems.map(CNestingItem => {\r\n                                if(CNestingItem.id === action.NewWorklog.id && CNestingItem.Issue !== action.NewWorklog.Issue){\r\n                                    Worklog.NestingItems = Worklog.NestingItems?.filter(FNestingItem=>FNestingItem.id !== action.NewWorklog.id)\r\n                                    WB.Worklogs.push(action.NewWorklog)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog} = FindWorklogById(action.WorklogId)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId) {\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                        }\r\n                    })\r\n                } else {\r\n                    FavoritesWorklog.TaskField = action.NewWorklog.TaskField\r\n                    FavoritesWorklog.Issue = action.NewWorklog.Issue\r\n                    FavoritesWorklog.StartTime = action.NewWorklog.StartTime\r\n                    FavoritesWorklog.EndTime = action.NewWorklog.EndTime\r\n                    FavoritesWorklog.TimerValue = action.NewWorklog.TimerValue\r\n                }\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId) {\r\n                                    NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                    NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                    NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                    NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                    NestingItem.Issue = action.NewWorklog.Issue\r\n                                }\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId) {\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                            }\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (WorkLogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG, WorkLogId, NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\nexport const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n\r\n    const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n    // if (SendNewMessageResult.resultCode === 0) {\r\n    //     dispatch(GetWorklogs(WorklogBlockId))\r\n    // }\r\n}\r\nexport type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport type TCalendars = {\r\n    January: TCalendar\r\n    February: TCalendar\r\n    March: TCalendar\r\n    April: TCalendar\r\n    May: TCalendar\r\n    June: TCalendar\r\n    July: TCalendar\r\n    August: TCalendar\r\n    September: TCalendar\r\n    October: TCalendar\r\n    November: TCalendar\r\n    December: TCalendar\r\n}\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\nexport type TCurrentDate = {\r\n    DayName : string\r\n    CurrentYear: number | string\r\n    CurrentMonth: keyof typeof DefaultState.Calendars\r\n    CurrentDay: number | string\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\nconst SET_ISSUES = \"ISSUES/SET_ISSUES\"\r\nconst SET_COMPLETED_ISSUES = \"ISSUES/SET_COMPLETED_ISSUES\"\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Meeting\", \"QA\",\r\n        \"API Middleware\", \"Amendment\", \"Branding\", \"Profit increase\", \"Project Design\",\"Customer\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue>\r\n    | ReturnType<TChangeIssue> | ReturnType<TSetIssues> | ReturnType<TSetCompletedIssues>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SET_ISSUES :{\r\n            return {\r\n                ...state,\r\n                Issues: action.Issues\r\n            }\r\n        }\r\n        case SET_COMPLETED_ISSUES :{\r\n            return {\r\n                ...state,\r\n                CompletedIssues: action.CompletedIssues\r\n            }\r\n        }\r\n\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issue\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssue\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  SetIssues = (Issues : string[]) =>{\r\n    return{type : SET_ISSUES, Issues } as const\r\n}\r\nexport type TSetIssues = typeof SetIssues\r\n\r\nexport const  SetCompletedIssues = (CompletedIssues : string[]) =>{\r\n    return{type : SET_COMPLETED_ISSUES, CompletedIssues } as const\r\n}\r\nexport type TSetCompletedIssues = typeof SetCompletedIssues\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport HS from \"./NavBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport avatar from \"../../assets/imgs/avatar.jpg\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n            marginLeft: \"5%\",\r\n            color: \"#FFFFFF\",\r\n            cursor: \"pointer\"\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\ntype TMaterialNavProps = {\r\n    OpenUserProfile : ()=> void\r\n}\r\n const MaterialNav : React.FC<TMaterialNavProps> = (props) =>{\r\n    const classes = useStyles();\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n    };\r\n\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const LogOut = ()=>{\r\n        localStorage.setItem(\"IsAuth\",\"false\")\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <SettingsIcon/>\r\n                </IconButton>\r\n\r\n                Settings\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <InfoIcon/>\r\n                </IconButton>\r\n                Info\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton onClick={LogOut} color=\"primary\">\r\n                    <ExitToAppIcon/>\r\n                </IconButton>\r\n                Logout\r\n            </MenuItem>\r\n            <MenuItem     onClick={props.OpenUserProfile} >\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"primary-search-account-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"primary\"\r\n                >\r\n                    <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                </IconButton>\r\n                Profile\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <div className={HS.NavLinks}>\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Home/All\">\r\n                                Worklogs\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Issues/\">\r\n                                Issues\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className={classes.grow}/>\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Tooltip title=\"Settings\" arrow placement=\"bottom\">\r\n                            <IconButton  color=\"inherit\">\r\n                                <SettingsIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                            <Tooltip title=\"Info\" arrow placement=\"bottom\">\r\n                                <IconButton color=\"inherit\">\r\n                                    <InfoIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        <Tooltip title=\"Logout\" arrow placement=\"bottom\">\r\n                            <IconButton onClick={LogOut} color=\"inherit\">\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Profile\" arrow placement=\"bottom\">\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"account of current user\"\r\n                                aria-haspopup=\"true\"\r\n                                color=\"inherit\"\r\n                                onClick={props.OpenUserProfile}\r\n                            >\r\n                                <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n        </div>\r\n    );\r\n}\r\nexport default  React.memo(MaterialNav)","export const DifferenceInTime = (TimesArr = []) => {\r\n    let firstDate = TimesArr[0];\r\n    let secondDate = TimesArr[1];\r\n    let getDate = (string) => new Date(0, 0, 0, string.split(':')[0], string.split(':')[1]);\r\n    let different = (getDate(secondDate) - getDate(firstDate));\r\n    let differentRes, hours, minuts;\r\n    if (different > 0) {\r\n        differentRes = different;\r\n        hours = Math.floor((differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(((differentRes % 86400000) % 3600000) / 60000);\r\n    } else {\r\n        differentRes = Math.abs((getDate(firstDate) - getDate(secondDate)));\r\n        hours = Math.floor(24 - (differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(60 - ((differentRes % 86400000) % 3600000) / 60000);\r\n    }\r\n    if(minuts < 10 ){\r\n        minuts =  minuts + \"0\"\r\n    }\r\n    if (hours < 10) {\r\n        return \"0\" + hours + ':' + minuts + \":00\";\r\n    } else {\r\n        return hours + ':' + minuts + \":00\";\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    onHideMenu : ()=> void\r\n    OnDeleteModalOpen : (e : React.MouseEvent<HTMLElement>)=> void\r\n    SetDeleteModalParams : Dispatch<any>\r\n    ParentId ? : number\r\n    PlayingWorklog: TWorkLog | null\r\n    AddToFavorite : TAddToFavorite\r\n    WorklogId : number\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    Issue?: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    NestingIsShowing: boolean\r\n    BlockInfo?: TBlockInfo\r\n}\r\n\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e : React.MouseEvent<HTMLElement>)=>{\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog )\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)){\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId : props.WorklogId,\r\n                ParentId : props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () =>{\r\n        if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\"){\r\n            if(props.ParentId)  props.AddToFavorite(props.WorklogId)\r\n            else props.AddToFavorite(props.WorklogId)\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () =>{\r\n   if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\" ) {\r\n            let CurrentWorklog : TWorkLog = {\r\n                id: randomInteger(0, 10000),\r\n                TaskField: props.TaskField,\r\n                Issue: props.Issue,\r\n                StartTime: props.StartTime,\r\n                EndTime: props.EndTime,\r\n                NestingItems: props.NestingItems,\r\n                status: props.status,\r\n                TimerValue: \"00:00:00\",\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from 'react';\r\nimport {\r\n    createStyles,\r\n    withStyles,\r\n    makeStyles,\r\n    Theme,\r\n} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { green, purple,blue,grey,red,common,teal,yellow} from '@material-ui/core/colors'\r\n\r\ninterface ColorType {\r\n    [key : string] : string\r\n}\r\ntype color = \"green\" | \"purple\" | \"grey\" | \"red\" | \"blue\" | \"common\" | \"teal\" | \"yellow\"| \"white\"\r\n\r\nconst findColorObject = (colorName : string) : ColorType =>{\r\n    switch (colorName) {\r\n        case \"green\" : return green\r\n        case \"purple\" : return purple\r\n        case \"grey\" : return grey\r\n        case \"red\" : return red\r\n        case \"blue\" : return blue\r\n        case \"teal\" : return teal\r\n        case \"common\" : return common\r\n        case \"yellow\" : return yellow\r\n        default : return common\r\n    }\r\n\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        margin: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\ntype TCustomizedButtonProps = {\r\n    bgColor : color\r\n    text : string\r\n    variant  : \"outlined\" | \"contained\" | \"text\"\r\n    fontSize : number\r\n    fontColor ? : color\r\n    startIcon ? : JSX.Element\r\n}\r\n const  CustomizedButton : React.FC<TCustomizedButtonProps> = (props) => {\r\n     const color = findColorObject(props.bgColor)\r\n     const ColorButton = withStyles((theme: Theme) => ({\r\n         root: {\r\n             color: props.fontColor\r\n                 ? props.fontColor === \"white\" ? red[50] :findColorObject(props.fontColor)[500]\r\n                 :theme.palette.getContrastText(color[500]),\r\n             backgroundColor: color[500],\r\n             fontSize : props.fontSize,\r\n             '&:hover': {\r\n                 backgroundColor: color[700],\r\n             },\r\n         },\r\n     }))(Button);\r\n    const classes = useStyles();\r\n    return <ColorButton startIcon={props.startIcon ? props.startIcon : undefined} variant={props.variant}\r\n                         color=\"primary\" className={classes.margin} >\r\n                {props.text}\r\n            </ColorButton>\r\n}\r\nexport default CustomizedButton","import React from \"react\";\r\nimport DS from \"./DeleteConfirm.module.css\"\r\nimport MS from \"../ChangeWorklogModal/ModalWindow.module.css\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen: boolean\r\n    onClose: () => void\r\n    WorkLogToDeleteId: number\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    ComponentToDraw: TComponentToDraw\r\n    DeleteFromFavorites: TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal: React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = (e: React.MouseEvent<HTMLElement>) => {\r\n        if (props.DeleteModalParams) {\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId, props.DeleteModalParams.ParentId)\r\n                : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n    if (!props.isOpen) return null\r\n\r\n    return (\r\n        <div className=\"DeleteConfirmModal\">\r\n            <div className={DS.modal}>\r\n                <div className={DS.ModalTextContainer}>\r\n                    Are you sure you want to delete the worklog?\r\n                </div>\r\n                <div className={DS.NewWorklogControlButtonsContainer}>\r\n                    <div className={DS.NewWorklogControlButtons}>\r\n                        <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                            <CustomizedButton bgColor={\"teal\"} text={\"delete\"}\r\n                                              variant={\"contained\"} fontSize={14} />\r\n                        </div>\r\n                        <div onClick={props.onClose} className=\"modal-close\">\r\n                            <CustomizedButton bgColor={\"grey\"} text={\"go back\"}\r\n                                              variant={\"contained\"} fontSize={14} fontColor={\"common\"}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={MS.bg} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog, TDeleteFromFavorites, TDeleteWorklog, TNestingItem,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange, TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\n\r\n\r\nexport type TNestingWorkLogProps = {\r\n    NestingItems?: Array<TNestingItem> | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    ParentId?: number\r\n    id : number\r\n    SetDeleteModalParams: any\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst NestingWorkLog: React.FC<TNestingWorkLogProps> = (props) => {\r\n\r\n    return (<div className=\"NestedItem\">\r\n        {props.NestingItems?.map(NestingItem=>{\r\n            return(\r\n                <WorkLog {...props}\r\n                        key={NestingItem.id}\r\n                         StartTime={NestingItem.StartTime}\r\n                         EndTime={NestingItem.EndTime}\r\n                         TaskField={NestingItem.TaskField}\r\n                         TimerValue={NestingItem.TimerValue}\r\n                         status={NestingItem.status}\r\n                         id={NestingItem.id}\r\n                         ParentId={props.id}\r\n                         NestingItems={null}\r\n                         Issue={NestingItem.Issue}\r\n                         DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n            )})\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {\r\n    TSetIsPlayingWorklogById,\r\n    TNestingItem,\r\n    TWorkLog,\r\n    TDeleteWorklog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TAddWorklog, TBlockInfo, TDeleteFromFavorites, CurrentDate\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogProps = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    Issue?: string | null\r\n    id: number\r\n    IsFavorites? : boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    ParentId?: number\r\n\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    SetDeleteModalParams: Dispatch<any>\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => {\r\n        SetNestingIsShowing(true)\r\n    }\r\n\r\n    const OnHideNestingWorklogs = () => {\r\n        SetNestingIsShowing(false)\r\n    }\r\n    const OnShowMenu = () => {\r\n        SetShowMenu(true)\r\n    }\r\n    const OnHideMenu = () => {\r\n        SetShowMenu(false)\r\n    }\r\n\r\n    const onPlayButtonClicked = () => {\r\n    if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n        || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n        props.SetIsPlayingWorklogById(true, props.id,props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    }\r\n    const onStopButtonClicked = () => {\r\n        props.SetIsPlayingWorklogById(false, props.id)\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"NestingItems\", \"Issue\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return  (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                {\r\n                     <img className={props.PlayingWorklog?.id === props.id || ShowMenu? WLS.WorklogActiveBG :WLS.WorklogBG}\r\n                          src={WorklogActiveBG} alt=\"\"/>\r\n                }\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {props.NestingItems && props.NestingItems.length > 0\r\n                            ? <div className={WLS.NestingButtonPose}>\r\n                                {NestingIsShowing\r\n                                    ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                        className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                    </div>\r\n\r\n                                    : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}> <span\r\n                                        className={WLS.TwwContentText}>\r\n                                {props.NestingItems.length}\r\n                            </span>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            : props.StartTime && props.EndTime ? <div className={WLS.WorkTime}>\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.StartTime}\r\n                                    </div>\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.EndTime}\r\n                                    </div>\r\n                                </div>\r\n                                : <div> </div>}\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img style={{transitionTimingFunction : \"ease-out\", transitionDuration : \"0.3s\"}} src={props.status === \"ok\"\r\n                                ? CP_ok : props.status === \"warning\"\r\n                                    ? CP_warning : props.status === \"danger\"\r\n                                        ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.Issue}>\r\n                                {props.Issue}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div  className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu} className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreVerticalActive\r\n                                :WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       WorkLogToDeleteId={props.id} isOpen={props.DeleteModalIsOpen}\r\n                                       onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {ShowMenu && <WorkLogDropDown {...props}\r\n                                      onHideMenu={OnHideMenu}\r\n                                      WorklogId={props.id}\r\n                                      NestingIsShowing={NestingIsShowing}\r\n\r\n        />}\r\n\r\n        {NestingIsShowing &&  <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default React.memo(ProgressBar)","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate,\r\n    TBlockInfo,\r\n    TSendWorklogBlockThunk,\r\n    TSendWorklogsData,\r\n    TSetWorklogStatus,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport {TSnackBarOptions} from \"../../SnackBar/SnackBar\";\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n    const CreateSnackBarOptions =(severity : \"error\" | \"info\" | \"warning\" | \"success\",message : string)=>{\r\n        return {\r\n               message,\r\n               severity,\r\n                position : {\r\n                    vertical : \"bottom\",\r\n                    horizontal : \"right\"\r\n                }\r\n        } as TSnackBarOptions\r\n    }\r\n    const OnSendWorklogData = () : void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"Issue does not exist\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"warning\",\"Please, enter the worklog name\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"something goes wrong\"))\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"success\",\"your worklog successfully logged\"))\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            let ObjToSend: TSendWorklogsData = {\r\n                WorkLogsBlocks: {\r\n                    BlockInfo: props.BlockInfo,\r\n                    Worklogs: props.Worklogs\r\n                }\r\n            }\r\n            props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"success\",\"your worklog successfully logged\"))\r\n        }\r\n        else {\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"Issue does not exist\"))\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n                <div className={FS.DateTime}>\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n                </div>\r\n                {props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                    ? <BackupIcon style={{cursor : \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                onClick={OnSendWorklogData}\r\n                                className={FS.DownloadIcon}>\r\n                    </BackupIcon>\r\n\r\n                    : <BackupIcon color={\"disabled\"} fontSize={\"large\"}\r\n                                         className={FS.DownloadIcon}>\r\n                     </BackupIcon>\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {DifferenceInTime} from \"../../assets/secondary/DifferenceInTime\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo, TDeleteFromFavorites,\r\n    TDeleteWorklog,\r\n    TSendWorklogBlockThunk,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogStatus,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\n\r\nexport type TWorklogsBlockProps = {\r\n    BlockInfo?: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    AddToFavorite: TAddToFavorite\r\n    AddWorklog: TAddWorklog\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = (e: React.MouseEvent<HTMLElement>) => {\r\n        SetDeleteModalIsOpen(true)\r\n    }\r\n    const OnDeleteModalClose = () => {\r\n        SetDeleteModalIsOpen(false)\r\n    }\r\n\r\n    return (<>\r\n        {props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n        <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n            <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                         SummaryTime={props.BlockInfo.SummaryTime}\r\n                         SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                         Worklogs={props.Worklogs}\r\n                         SendWorklogBlockThunk={props.SendWorklogBlockThunk}\r\n                         BlockInfo={props.BlockInfo}\r\n                         ShowSnackBar={props.ShowSnackBar}\r\n                         SetWorklogStatus={props.SetWorklogStatus}\r\n            />\r\n        </div>\r\n        }\r\n\r\n        {\r\n                props[props.ComponentToDraw].map(el => {\r\n                    return <div key={el.id} className=\"worklog\">\r\n                        <WorkLog\r\n                            {...el}\r\n                            {...props}\r\n                            TimerValue={el.TimerValue\r\n                                ? el.TimerValue\r\n                                : el.StartTime && el.EndTime\r\n                                    ? DifferenceInTime([el.StartTime, el.EndTime])\r\n                                    : null}\r\n                            DeleteModalIsOpen={DeleteModalIsOpen}\r\n                            OnDeleteModalClose={OnDeleteModalClose}\r\n                            OnDeleteModalOpen={OnDeleteModalOpen}\r\n                            SetDeleteModalParams={SetDeleteModalParams}\r\n                            DeleteModalParams={DeleteModalParams}\r\n                            AddWorklog={props.AddWorklog}\r\n                            DeleteWorklog={props.DeleteWorklog }\r\n                            DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n                    </div>\r\n                })\r\n        }\r\n\r\n    </>)\r\n}\r\n\r\nexport default WorkLogsBlock","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite, SendWorklogBlockThunk,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TSendWorklogBlockThunk, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\nexport type TWorkLogsContainerOwnProps = {\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    ShowSnackBar: TShowSnackBar\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\ntype TDialogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorkLogsContainerOwnProps\r\n\r\nclass WorkLogsContainer extends React.Component<TDialogsContainerProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {this.props.ComponentToDraw === \"Worklogs\"\r\n                    ? this.props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...this.props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...this.props}\r\n                            Worklogs={this.props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default compose(connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorkLogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog,\r\n    SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SendWorklogBlockThunk,SetWorklogStatus,DeleteFromFavorites\r\n}))\r\n    //@ts-ignore\r\n    (WorkLogsContainer)","\r\n\r\nexport const ToFullTime = (value,hours) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n\r\n         return  `${ToFullTime(CurrentHours - hours) === 24? \"00\" : ToFullTime(CurrentHours - hours)}:${ToFullTime(CurrentMinutes - minutes)}`\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport type TCustomInputProps = {\r\n    value : string\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>) =>void\r\n    placeholder : string\r\n    label : string\r\n    width : number\r\n}\r\n\r\nconst CustomInput: React.FC<TCustomInputProps> = (props) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                '& .MuiTextField-root': {\r\n                    margin: theme.spacing(1),\r\n                    width: props.width,\r\n                },\r\n            },\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n    return <div className={classes.root}>\r\n        <TextField\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            id=\"standard-textarea\"\r\n            label={props.label}\r\n            placeholder={props.placeholder}\r\n            multiline\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default CustomInput","import React, {ChangeEvent} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport type TIssuesSelectInputProps = {\r\n    Issues : string[]\r\n    onChange : (event:  React.ChangeEvent<{  value: unknown; }>  ) =>void\r\n    value? : string\r\n    width : number\r\n}\r\n\r\nconst IssuesSelectInput : React.FC<TIssuesSelectInputProps> = (props) =>{\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: props.width,\r\n            },\r\n            Item : {\r\n                color : \"#393a3a\",\r\n            }\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"grouped-native-select\">Issues</InputLabel>\r\n                <Select  value={props.value} onChange={props.onChange} native defaultValue=\"\" id=\"grouped-native-select\">\r\n                    <option value={\"no issue\"}> no issue </option>\r\n                    <optgroup label=\"Issues\">\r\n                        {props.Issues.map(Issue=>      <option key={Issue} className={classes.Item} value={Issue}>{Issue}</option>)}\r\n                    </optgroup>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IssuesSelectInput","import {useState, ChangeEvent} from \"react\"\r\n\r\ntype defFunc = () => void\r\n\r\nexport const useInput = (initialValue: string): {\r\n    bind: {\r\n        value: string,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    },\r\n    value: string,\r\n    clear: defFunc,\r\n    forceUpdate: (val: string) => void\r\n} => {\r\n\r\n    let [value, setValue] = useState(initialValue)\r\n\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const clear = () => {\r\n        setValue(\"\")\r\n    }\r\n\r\n    const forceUpdate = (val: string) => {\r\n        setValue(val)\r\n    }\r\n    return {\r\n        bind: {value, onChange},\r\n        value,\r\n        clear,\r\n        forceUpdate\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport {red} from \"@material-ui/core/colors\"\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(false);\r\n    const WorklogInput= useInput(props.PlayingWorklog.TaskField ? props.PlayingWorklog.TaskField : \"\")\r\n    const IssueInput = useInput(props.PlayingWorklog.Issue ? props.PlayingWorklog.Issue : \"\")\r\n    const toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer = () => {\r\n        props.openWorklogChangeModal()\r\n        setIsActive(!isActive)\r\n        let TimerData = {\r\n            TimerValue: ToFullTime(hours) + \":\" + ToFullTime(minutes) + \":\" + ToFullTime(seconds),\r\n            TimerIssue: IssueInput.value ? IssueInput.value : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInput.value ? WorklogInput.value : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <CustomInput {...WorklogInput.bind}\r\n                         label={\"Task Field\"}\r\n                         placeholder={\"Please, enter the task\"}\r\n                         width={250}\r\n            />\r\n\r\n            <div style={{marginTop : \" 10px\"}} className={\"IssuesSelectinput\"}>\r\n                <IssuesSelectInput  Issues={props.Issues}\r\n                                    {...IssueInput.bind}\r\n                                    width={250}\r\n                />\r\n            </div>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <StopIcon style={{marginTop : \"5px\", width: \"50px\",\r\n                            height: \"50px\",backgroundColor : red[400],borderRadius : \"100%\",color : red[50]}} />\r\n                    </div>\r\n                    <div style={{paddingLeft : \"5px\"}} className=\"controlButtons\" onClick={toggle}>\r\n                        {!isActive ?\r\n                            <PauseCircleFilledIcon style={{width: \"60px\", height: \"60px\"}} color={\"primary\"} />\r\n                            : <PlayButton style={{width: \"60px\", height: \"60px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n    Issues : string[]\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>{\r\n        props.AddWorklog()\r\n    }\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n            <div className={TTS.strokeVert}>\r\n                {/*<img src={StrokeVert} alt=\"stroke-vert\"/>*/}\r\n            </div>\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                             Issues={props.Issues}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}>\r\n                            {/*<img src={StrokeHoriz} alt=\"\"/>*/}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React from \"react\";\r\nimport TTS from \"../../TimeTracking/TimeTracking.module.css\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport NewWorklogButton from \"../../../assets/imgs/new_worklog_button.svg\";\r\nimport {TAddWorklog, TTimerData, TWorkLog, TWorklogBlock} from \"../../../Data/WorkLogsReducer\";\r\nimport WorkLogsContainer from \"../../WorkLogs/WorkLogsContainer\";\r\n\r\nexport type TFavoritesPageProps = {\r\n    FavoritesIsClicked: boolean\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    TimerData: TTimerData | undefined\r\n    openWorklogChangeModal: () => void\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog : TWorkLog | null\r\n    FavoritesWorklog : Array<TWorkLog>\r\n}\r\n\r\nconst FavoritesPage: React.FC<TFavoritesPageProps> = (props) => {\r\n    const AddNewFavoritesWorklog = () =>{\r\n       !props.PlayingWorklog &&  props.AddWorklog(undefined,true)\r\n    }\r\n    return (<div>\r\n        {\r\n            props.FavoritesWorklog.length > 0\r\n                    ? <div className=\"Favorites-Worklogs\">\r\n                        <WorkLogsContainer TimerData={props.TimerData}\r\n                                           openWorklogChangeModal={props.openWorklogChangeModal}\r\n                                           ComponentToDraw={\"FavoritesWorklogs\"}/>\r\n                    </div>\r\n\r\n                    : <div className={FS.NoFavoritesIssuesContainer}>\r\n\r\n                        <div className={FS.FavoritesText}>\r\n                            There is no favorites issues yet\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"60px\"}} className={TTS.NewWorklog}>\r\n                            <div  className={TTS.NewWorklogButtonPose}>\r\n                                <img onClick={AddNewFavoritesWorklog} className={TTS.NewWorklogButtonSize}\r\n                                     src={NewWorklogButton}\r\n                                     alt=\"new_worklog_button\"/>\r\n                            </div>\r\n\r\n                            <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n\r\n                                <div className={TTS.NewWorklogButtonDescription}>\r\n                                    new favorite\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n    </div>)\r\n}\r\n\r\nexport default FavoritesPage","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = {\r\n    CurrentDate: TCurrentDate\r\n}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(true)\r\n    }\r\n    const onHideDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(false)\r\n    }\r\n\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n            <div className={CS.CalendarContent}>\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {ShowDropDownCalendar && <>\r\n            <div className={CS.bg}\r\n                 onClick={onHideDropDownCalendar}/>\r\n            <DropDownCalendarContainer/>\r\n        </>}\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Calendar","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} >\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n                    <div>\r\n                        <NavLink onClick={props.OnFavoritesClick}  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"./All/All\";\r\nimport FavoritesButton from \"./Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n    return (<div className={AS.CalendarAndButtons}>\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +75 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +15 + \"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect, Dispatch, SetStateAction} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {\r\n    TChangeFavoritesWorklog,\r\n    TChangeWorklog,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\n\r\nexport type TModalWindowProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    TimerData: TTimerData | undefined\r\n    ChangeWorklog: TChangeWorklog\r\n    WorklogToChange: TWorkLog | null\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n    Issues: string[]\r\n}\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowProps> = (props) => {\r\n    let ModalWorklogInput = useInput(props.WorklogToChange && props.WorklogToChange.TaskField ? props.WorklogToChange.TaskField : \"\")\r\n    let ModalIssueInput = useInput(props.WorklogToChange && props.WorklogToChange.Issue ? props.WorklogToChange.Issue : \"\")\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let date = new Date()\r\n    let CurrentTime = ToFullTime(date.getHours()) + \":\" + ToFullTime(date.getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && ModalWorklogInput.forceUpdate(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && ModalIssueInput.forceUpdate(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && ModalWorklogInput.forceUpdate(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && ModalIssueInput.forceUpdate(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalWorklogInput.value.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalIssueInput.value.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalWorklogInput.value.length > 0\r\n            && ModalIssueInput.value.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalWorklogInput.value,\r\n                Issue: ModalIssueInput.value,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if (NewWL.IsFavorites) {\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            } else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            ModalWorklogInput.clear()\r\n            ModalIssueInput.clear()\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal()\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n        ModalWorklogInput.clear()\r\n        ModalIssueInput.clear()\r\n    }\r\n\r\n\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n    return (\r\n        <div className=\"timer-modal\">\r\n            <div className={MS.modal}>\r\n                <div className={MS.ModalTitle}>New worklog</div>\r\n                <div className={MS.ModalSlider}>\r\n\r\n                    {ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                    <TimeSlider value={ModalTimeLineValues}\r\n                                disabled={false}\r\n                                step={10}\r\n                                SetTimerValue={SetModalTimeLineValues}\r\n                    />\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                <form name=\"NewWorklogContent\" action=\"\">\r\n                    <div className={MS.ModalTextFields}>\r\n                        <div className={MS.NewWorklogContentContainer}>\r\n\r\n                            <CustomInput {...ModalWorklogInput.bind}\r\n                                         label={\"Task Field\"}\r\n                                         placeholder={\"Please, enter the task\"}\r\n                                         width={500}\r\n                            />\r\n\r\n                            {\r\n                                NewWorklogNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog name</div>\r\n                            }\r\n                            <div style={{marginTop : \"20px\"}} className=\"issue-select-input\">\r\n                                {\r\n                                    //@ts-ignore\r\n                                    <IssuesSelectInput Issues={props.Issues}\r\n                                        {...ModalIssueInput.bind}\r\n                                                       width={500}\r\n\r\n                                    />\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            {\r\n                                NewIssueNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue name</div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={MS.NewWorklogControlButtonsContainer}>\r\n                        <div className={MS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CustomizedButton bgColor={\"blue\"} text={\"save\"}\r\n                                                  variant={\"contained\"} fontSize={14} />\r\n                            </div>\r\n                            <div onClick={ props.closeWorklogChangeModal} className={MS.CloseButtonMargin}>\r\n                                <CustomizedButton  bgColor={\"grey\"} text={\"go back\"}\r\n                                                  variant={\"contained\"} fontSize={14} fontColor={\"common\"}  />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeWorklogModal","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n// import {withRouter} from 'react-router-dom'\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange,ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    Issue : string[]\r\n\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog : TChangeFavoritesWorklog\r\n}\r\ntype TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nclass ChangeWorklogModalContainer extends React.Component<TModalWindowContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ChangeWorklogModal closeWorklogChangeModal={this.props.closeWorklogChangeModal}\r\n                                WorklogChangeModalIsOpen={this.props.WorklogChangeModalIsOpen}\r\n                                SetIsPlayingWorklogById={this.props.SetIsPlayingWorklogById}\r\n                                PlayingWorklog={this.props.PlayingWorklog}\r\n                                TimerData={this.props.TimerData}\r\n                                WorklogToChange={this.props.WorklogToChange}\r\n                                ChangeWorklog={this.props.ChangeWorklog}\r\n                                SetTimerData={this.props.SetTimerData}\r\n                                SetWorklogToChange={this.props.SetWorklogToChange}\r\n                                ChangeFavoritesWorklog={this.props.ChangeFavoritesWorklog}\r\n                                Issues={this.props.Issue}\r\n\r\n            />\r\n            )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default compose(connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog,ChangeFavoritesWorklog\r\n}))(ChangeWorklogModalContainer)","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value : string\r\n    classes : {AddIssueInput : string}\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>)=>void\r\n    onSubmit : ()=> void\r\n    onCancel : () => void\r\n    SubmitButtonText : string\r\n    CancelButtonText : string\r\n}\r\n\r\nconst CustomListInput : React.FC<TCustonListInputProps> = (props) =>{\r\n    return <div className={props.classes.AddIssueInput}>\r\n        <TextField\r\n            id=\"filled-multiline-flexible\"\r\n            label=\"New issue\"\r\n            multiline\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            placeholder=\"Please enter the new issue\"\r\n        />\r\n        <Grid style={window.innerWidth > 1400 ? {paddingTop : \"10px\",paddingLeft :\"15%\"}: {paddingTop : \"10px\"}} container>\r\n            <Grid item >\r\n                <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.SubmitButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n                <Button onClick={props.onCancel} style={{marginLeft : \"20%\"}} color={\"inherit\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.CancelButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default CustomListInput","import React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    classes :any\r\n}\r\n\r\nconst IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const [EditInputIsShowing, SetEditInputIsShowing] = useState(false)\r\n    const EditInputValue = useInput('')\r\n\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue.value)\r\n        SetEditInputIsShowing(false)\r\n        EditInputValue.clear()\r\n    }\r\n    const onCancelInput = () =>{\r\n        SetEditInputIsShowing(false)\r\n    }\r\n\r\n\r\n\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputIsShowing\r\n                    ? <CustomListInput classes={props.classes} onSubmit={OnSaveNewValue}\r\n                             {...EditInputValue.bind} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container>\r\n\r\n                        <Grid item  sm={10}>\r\n                            <ListItem role=\"listitem\" button\r\n                                        //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item  sm={2}>\r\n\r\n                            <Grid style={{marginTop: \"11px\"}} container>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item sm={4}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => SetEditInputIsShowing(true)}\r\n                                                      style={{color: blue[400], cursor: \"pointer\", marginLeft: \"40%\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid item sm={4}>\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"40%\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"90%\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IssueListItem","import React, {Dispatch, useState} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport IssueListItem from \"./IssueListItem\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\n\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    classes : any\r\n    checked : string[]\r\n    setChecked : Dispatch<any>\r\n    AddIssue : TAddIssue\r\n    DeleteIssue : TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nconst IssuesList : React.FC<TIssuesListProps> = (props) =>{\r\n\r\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\r\n    const AddNewIssueInput = useInput('')\r\n\r\n\r\n     const not = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) === -1);\r\n    }\r\n\r\n    const  intersection = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) !== -1);\r\n    }\r\n\r\n\r\n    const  union = (a: string[], b: string[]) => {\r\n        return [...a, ...not(b, a)];\r\n    }\r\n\r\n    const handleToggle = (value: string) => () => {\r\n        const currentIndex = props.checked.indexOf(value);\r\n        const newChecked = [...props.checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        props.setChecked(newChecked);\r\n    }\r\n\r\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length;\r\n\r\n    const handleToggleAll = (items: string[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            props.setChecked(not(props.checked, items));\r\n        } else {\r\n            props.setChecked(union(props.checked, items));\r\n        }\r\n    }\r\n\r\n    const onShowAddIssueInput = () => {\r\n        SetAddIssueOpened(true)\r\n    }\r\n\r\n\r\n    const OnConfirmAddNewIssue = () => {\r\n        props.AddIssue(AddNewIssueInput.value)\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n    const OnCancelAddNewIssue = () => {\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n\r\n    return  <Card>\r\n        <Grid container>\r\n            <Grid item sm={9}>\r\n                <CardHeader\r\n                    className={props.classes.cardHeader}\r\n                    avatar={\r\n                        <Checkbox\r\n                            onClick={handleToggleAll(props.items)}\r\n                            checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\r\n                            indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\r\n                            disabled={props.items.length === 0}\r\n                            inputProps={{'aria-label': 'all items selected'}}\r\n                        />\r\n                    }\r\n                    title={props.title}\r\n                    subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\r\n                />\r\n            </Grid>\r\n            <Grid item sm={3}>\r\n                {\r\n                    props.el === \"Issue\"\r\n                    && <div style={window.innerWidth < 1400 ?{paddingTop : \"10%\" }\r\n                    :window.innerWidth <1750 ?  {paddingTop : \"10%\",paddingLeft : \"15%\"}\r\n                    :{paddingTop : \"8%\",paddingLeft : \"30%\"}}>\r\n                        <Tooltip title=\"Create new issue\" arrow placement=\"top\">\r\n                            <Button onClick={onShowAddIssueInput} size=\"small\" color=\"secondary\"\r\n                                    variant={\"outlined\"} startIcon={<AddOutlinedIcon/>}>\r\n                                add issue\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                }\r\n            </Grid>\r\n\r\n        </Grid>\r\n        {\r\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput {...AddNewIssueInput.bind} classes={props.classes}\r\n                                                                       onSubmit={OnConfirmAddNewIssue}\r\n                                                                       onCancel={OnCancelAddNewIssue} SubmitButtonText={\"Add\"}\r\n                                                                       CancelButtonText={\"cancel\"}/>\r\n        }\r\n\r\n        <Divider/>\r\n\r\n        <List className={props.classes.list} dense component=\"div\" role=\"list\">\r\n            {props.items.map((value: string) => {\r\n                return  (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\r\n                                        handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\r\n                                        ChangeIssue={props.ChangeIssue} classes={props.classes}/>)\r\n\r\n            })}\r\n            <ListItem/>\r\n\r\n        </List>\r\n    </Card>\r\n}\r\n\r\nexport default IssuesList","import React, {useState} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Data/IssuesReducer\";\r\nimport IssuesList from \"./IssuesList\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"6%\",\r\n        },\r\n        cardHeader: {\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        list: {\r\n\r\n            width: window.innerWidth < 600 ? 300\r\n                : window.innerWidth < 900 ? 500\r\n                        :window.innerWidth < 1610 ? 600\r\n                        :window.innerWidth < 1800 ? 700\r\n                            : 800,\r\n            height : window.innerWidth < 600 ? 250\r\n                : window.innerWidth < 900 ? 400\r\n                    :window.innerWidth < 1200 ? 500\r\n                        :window.innerWidth < 1800 ? 650\r\n                            : 800\r\n            ,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        },\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n                width: window.innerWidth < 900 ? '15ch' : window.innerWidth < 1400 ? \"25ch\" : window.innerWidth < 1650\r\n                    ? \"30ch\" : \"45ch\"\r\n            },\r\n            paddingLeft: \"30%\",\r\n            paddingBottom: \"10px\"\r\n        }\r\n    }),\r\n)\r\n\r\nfunction not(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues : TSetIssues\r\n    SetCompletedIssues : TSetCompletedIssues\r\n}\r\n\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState<string[]>([]);\r\n\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked));\r\n        props.SetIssues(not(props.Issues, IssuesChecked));\r\n        setChecked(not(checked, IssuesChecked));\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked));\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked));\r\n        setChecked(not(checked, CompletedIssuesChecked));\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n                <Grid item>\r\n                    <IssuesList title={\"Issues\"} items={props.Issues}\r\n                                el={\"Issue\"} classes={classes}\r\n                                DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                                checked={checked} setChecked={setChecked}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedIssues}\r\n                            disabled={IssuesChecked.length === 0}\r\n                            aria-label=\"move selected right\"\r\n                            color={\"secondary\"}\r\n                        >\r\n                            &gt;\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedCompletedIssues}\r\n                            disabled={CompletedIssuesChecked.length === 0}\r\n                            aria-label=\"move selected left\"\r\n                            color={\"primary\"}\r\n                        >\r\n                            &lt;\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                                el={\"CompletedIssue\"} setChecked={setChecked}\r\n                                checked={checked} AddIssue={props.AddIssue}\r\n                                DeleteIssue={props.DeleteIssue} classes={classes}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Issues","import {useState} from \"react\"\r\n\r\ntype defFunc = ()=> void\r\n\r\nexport const useBooleanState = (initialValue : boolean) : {isDisplayed : boolean,Show : defFunc,Hide : defFunc}  => {\r\n    let [isDisplayed,SetIsOpen] =useState(initialValue)\r\n    const Show = ()=>{\r\n        SetIsOpen(true)\r\n    }\r\n    const Hide = ()=>{\r\n        SetIsOpen(false)\r\n    }\r\n    return{\r\n        isDisplayed,Show,Hide\r\n    }\r\n}\r\n","import React, {useState} from \"react\";\nimport LS from \"./Login/LoginModal.module.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ntype TRegistrationProps = {\n    ConfirmButtonHandler: (EmailInputValue: string, PasswordInputValue: string) => void\n    GoBackButtonHandler: () => void\n    ConfirmButtonText: string\n    GoBackButtonText: string\n    CustomErr: string | null\n    ConfirmButtonStyles: {\n        variant: \"contained\" | \"outlined\" | \"text\"\n        color: \"primary\" | \"secondary\" | \"default\" | \"inherit\"\n    }\n    GoBackButtonStyles: {\n        variant: \"contained\" | \"outlined\" | \"text\"\n        color: \"primary\" | \"secondary\" | \"default\" | \"inherit\"\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: 300,\n        },\n    },\n}));\n\nconst AuthForm: React.FC<TRegistrationProps> = (props) => {\n    const classes = useStyles();\n    const [EmailInputValue, SetEmailInputValue] = useState(\"\")\n    const [PasswordInputValue, SetPasswordInputValue] = useState(\"\")\n    const [EmailErrText, SetEmailErrText] = useState<string | null>()\n    const [PasswordErrText, SetPasswordErrText] = useState<string | null>()\n    const OnEmailFieldChange = (e: any) => SetEmailInputValue(e.target.value)\n    const OnPasswordFieldChange = (e: any) => SetPasswordInputValue(e.target.value)\n    const onConfirm = () => {\n        // this handler create for create validations to inputs and call prop confirm handler\n        if (EmailInputValue.length < 1 || PasswordInputValue.length < 1) {\n            if (EmailInputValue.length < 1) SetEmailErrText(\"this field is required\")\n            else SetEmailErrText(null)\n            if (PasswordInputValue.length < 1) SetPasswordErrText(\"this field is required\")\n            else SetPasswordErrText(null)\n        } else {\n            if (props.CustomErr) {\n                SetEmailErrText(props.CustomErr)\n                SetPasswordErrText(props.CustomErr)\n            } else {\n                props.ConfirmButtonHandler(EmailInputValue, PasswordInputValue)\n                SetEmailInputValue(\"\")\n                SetPasswordInputValue(\"\")\n                SetEmailErrText(null)\n                SetPasswordErrText(null)\n            }\n        }\n\n    }\n    return <div className=\"AuthForm\">\n        <form className={classes.root} autoComplete=\"off\">\n            <div className={LS.InputsContainer}>\n                <div className=\"LoginInput\">\n                    <TextField\n                        onChange={OnEmailFieldChange}\n                        error={!!EmailErrText}\n                        id=\"standard-error-helper-text\"\n                        label=\"email\"\n                        value={EmailInputValue}\n                        placeholder=\"Please, enter the login\"\n                        helperText={EmailErrText}\n                    />\n                    <div className={LS.descr}> (test  - for testing)</div>\n                </div>\n\n                <div className={LS.PasswordContainer}>\n                    <TextField\n                        onChange={OnPasswordFieldChange}\n                        error={!!PasswordErrText}\n                        type={\"password\"}\n                        id=\"standard-error-helper-text\"\n                        label=\"password\"\n                        value={PasswordInputValue}\n                        placeholder=\"Please, enter the password\"\n                        helperText={PasswordErrText}\n                    />\n                    <div className={LS.descr}> (test  - for testing)</div>\n                </div>\n\n                <Grid container style={{paddingTop: \"50px\", paddingLeft: \"10px\"}}>\n                    <Grid item xs={12} sm={6}>\n                        <Button style={{width: \"120px\"}} onClick={onConfirm} variant={props.ConfirmButtonStyles.variant}\n                                color={props.ConfirmButtonStyles.color}>\n                            {props.ConfirmButtonText}\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button style={{width: \"120px\"}} onClick={props.GoBackButtonHandler}\n                                variant={props.GoBackButtonStyles.variant} color={props.GoBackButtonStyles.color}>\n                            {props.GoBackButtonText}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        </form>\n    </div>\n}\nexport default AuthForm","import React,{useState} from \"react\";\r\nimport AuthForm from \"../AuthForm\";\r\n\r\ntype TLoginProps = {\r\n    ComponentIsSignUp: () => void\r\n}\r\n\r\nconst SignIn: React.FC<TLoginProps> = (props) => {\r\n    const [AuthErr,SetAuthErr] = useState<string | null>(null)\r\n    const EmailHandler = (EmailFieldValue : string,PasswordFieldValue : string) => {\r\n        if (EmailFieldValue === \"test\" && PasswordFieldValue === \"test\") {\r\n            SetAuthErr(null)\r\n            localStorage.setItem(\"IsAuth\", \"true\")\r\n            window.location.reload()\r\n        }else{\r\n            SetAuthErr(\"incorrect login or password\")\r\n        }\r\n    }\r\n\r\n    return (<div className=\"SignInForm\">\r\n            <AuthForm ConfirmButtonHandler={EmailHandler} GoBackButtonHandler={props.ComponentIsSignUp}\r\n                      ConfirmButtonText={\"Login\"} GoBackButtonText={\"Sign up\"}\r\n                      ConfirmButtonStyles={{color:\"primary\",variant:\"contained\"}}\r\n                      GoBackButtonStyles={{color : \"secondary\",variant:\"outlined\"}}\r\n                      CustomErr={AuthErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignIn","import React, {useState} from \"react\";\r\nimport AuthForm from \"../AuthForm\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\ntype TRegistrationProps = {\r\n    ComponentIsSignIn: () => void\r\n    ShowSnackBar: TShowSnackBar\r\n}\r\nconst SignUp: React.FC<TRegistrationProps> = (props) => {\r\n    const [RegistrationErr, SetRegistrationErr] = useState<string | null>(null)\r\n    const onSignUp = (EmailFieldValue: string, PasswordFieldValue: string) => {\r\n        // here will be request on server for make a new account\r\n        if (true) {\r\n            // check response from server , if ok - show confirm window, else - show error\r\n            props.ShowSnackBar({\r\n                position: {horizontal: \"center\", vertical: \"top\"},\r\n                HideDuration: 5000,\r\n                severity: \"success\",\r\n                message: \"account was created, please check your email\"\r\n            })\r\n        } else {\r\n            SetRegistrationErr(\"someErr\")\r\n        }\r\n    }\r\n    return <div className=\"SignUp\">\r\n        <AuthForm ConfirmButtonHandler={onSignUp} GoBackButtonHandler={props.ComponentIsSignIn}\r\n                  ConfirmButtonText={\"Confirm\"} GoBackButtonText={\"Sign in\"}\r\n                  ConfirmButtonStyles={{color: \"secondary\", variant: \"contained\"}}\r\n                  GoBackButtonStyles={{color: \"primary\", variant: \"outlined\"}}\r\n                  CustomErr={RegistrationErr}/>\r\n\r\n    </div>\r\n}\r\nexport default SignUp","import React,{useState} from \"react\";\r\nimport SignIn from \"./Login/SignIn\";\r\nimport LS from \"./Login/LoginModal.module.css\";\r\nimport SignUp from \"./Registartion/SignUp\";\r\nimport {TShowSnackBar} from \"../../App\";\r\ntype TAuthPageProps = {\r\n    ShowSnackBar: TShowSnackBar\r\n}\r\n\r\nconst AuthPage : React.FC<TAuthPageProps> = (props) =>{\r\n    const [ComponentToDraw,SetComponentToDraw] =useState(\"login\")\r\n    const ComponentIsSignIn = ()=>SetComponentToDraw(\"login\")\r\n    const ComponentIsSignUp =() => SetComponentToDraw(\"registration\")\r\n    return <div className=\"AuthWrapper\">\r\n            <div className={LS.modal}>\r\n                {\r\n                    ComponentToDraw === \"login\"\r\n                        ?  <SignIn ComponentIsSignUp={ComponentIsSignUp}\r\n                        />\r\n                        : <SignUp ComponentIsSignIn={ComponentIsSignIn} ShowSnackBar={props.ShowSnackBar}/>\r\n                }\r\n            </div>\r\n            <div className={LS.bg}/>\r\n    </div>\r\n}\r\nexport default AuthPage","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport type TSnackBarOptions = {\r\n    HideDuration? : number\r\n    severity : \"error\" | \"info\" | \"warning\" | \"success\"\r\n    position : {\r\n        vertical : \"bottom\" | \"top\"\r\n        horizontal : \"left\" | \"right\" | \"center\"\r\n    }\r\n    message : string\r\n}\r\nexport type TSnackBarProps = {\r\n    isShowing : boolean\r\n    onHide : (event?: React.SyntheticEvent, reason?: string) => void\r\n    options : TSnackBarOptions\r\n}\r\nconst  SnackBar : React.FC<TSnackBarProps>= (props)=> {\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar  open={props.isShowing} autoHideDuration={props.options.HideDuration ? props.options.HideDuration : 3000}\r\n                      onClose={props.onHide} anchorOrigin={props.options.position}>\r\n                <Alert onClose={props.onHide} severity={props.options.severity}>\r\n                    {props.options.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\nexport default SnackBar","import React from 'react'\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport avatar from \"../../assets/imgs/avatar.jpg\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\"\r\nimport {useInput} from \"../hooks/useInput\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n            overflow: 'hidden',\r\n            padding: theme.spacing(0, 3),\r\n        },\r\n        list: {\r\n            maxWidth: 400,\r\n            margin: `${theme.spacing(1)}px auto`,\r\n            padding: theme.spacing(2),\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        FileInput: {\r\n            display: \"none\"\r\n        },\r\n        GridItem: {\r\n            paddingTop: 35\r\n        }\r\n    }),\r\n);\r\n\r\ntype TUserProfileFormProps = {}\r\n\r\nconst UserProfileForm: React.FC<TUserProfileFormProps> = (props) => {\r\n    const classes = useStyles();\r\n    const NewUserNameInput = useInput(\"\")\r\n    const NewUserKLastNameInput = useInput(\"\")\r\n\r\n    return <div className={classes.list}>\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Grid item>\r\n                <input\r\n                    accept=\"image/*\"\r\n                    className={classes.FileInput}\r\n                    id=\"contained-button-file\"\r\n                    multiple\r\n                    type=\"file\"\r\n                />\r\n                <label id=\"contained-img\" htmlFor=\"contained-button-file\">\r\n                    <img style={{width: 100, height: 100, borderRadius: \"50%\", cursor: \"pointer\"}}\r\n                         src={avatar} alt=\"user avatar\"/>\r\n                </label>\r\n            </Grid>\r\n            <Grid item className={classes.GridItem}>\r\n                <CustomInput {...NewUserNameInput.bind}\r\n                             label={\"name\"}\r\n                             placeholder={\"Please, enter your name\"}\r\n                             width={250}\r\n                />\r\n            </Grid>\r\n            <Grid item className={classes.GridItem}>\r\n                <CustomInput {...NewUserKLastNameInput.bind}\r\n                             label={\"last name\"}\r\n                             placeholder={\"Please, enter your last name\"}\r\n                             width={250}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default UserProfileForm","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport UserProfileForm from \"./UserProfileForm\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ntype TModalUserProfile = {\r\n    IsOpen : boolean\r\n    Hide : ()=>void\r\n}\r\nconst ModalUserProfile : React.FC<TModalUserProfile>=(props) =>{\r\n    const profileNameInput = useInput(\"user name\")\r\n    const profileStatusInput = useInput(\"user status\")\r\n    const SaveProfileChanges = ()=> {\r\n        // some logic with req on server, then await for response, check if res.status === 200 then\r\n        // save new profile data in reducer\r\n        props.Hide()\r\n    }\r\n\r\n    return <div>\r\n        <Dialog\r\n                open={props.IsOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={props.Hide}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Profile\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <UserProfileForm/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={SaveProfileChanges} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    <Button onClick={props.Hide} color=\"primary\">\r\n                        go back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </div>\r\n}\r\n\r\nexport default ModalUserProfile","import React, {useState} from 'react';\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport MaterialNav from \"./Components/NavBar/MaterialNavBar\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport AS from \"./App.module.css\"\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport FavoritesPage from \"./Components/CalendarAndControllButtons/Favorites/FavoritesPage\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport ChangeWorklogModalContainer from \"./Components/ChangeWorklogModal/ChangeWorklogModalContainer\";\n\nimport {\n    ChangeIssue,\n    AddIssue,\n    DeleteIssue,\n    SetIssues,\n    SetCompletedIssues,\n    TAddIssue,\n    TChangeIssue,\n    TDeleteIssue,\n    TSetIssues, TSetCompletedIssues\n} from \"./Data/IssuesReducer\";\nimport Issues from \"./Components/Issues/Issues\";\nimport {useBooleanState} from \"./Components/hooks/useBooleanState\";\nimport AuthPage from \"./Components/Auth/AuthPage\";\nimport SnackBar, {TSnackBarOptions} from \"./Components/SnackBar/SnackBar\";\nimport ModalUserProfile from \"./Components/UserProfile/ModalUserProfile\";\nimport User from \"../../my-app/src/components/Users/User\";\n\nexport type TAppOwnProps = {}\n\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    CompletedIssues: Array<string>\n    Issues: string[]\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue: TAddIssue\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    SetIssues: TSetIssues\n    SetCompletedIssues: TSetCompletedIssues\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\n\nexport type TShowSnackBar = (SnackBarOptions: TSnackBarOptions) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n\n    let WorklogChangeModalIsOpen = useBooleanState(false)\n    let FavoritesIsClicked = useBooleanState(false)\n    let UserProfileIsShowing = useBooleanState(false)\n    let [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    let [SnackBarIsShowing, SetSnackBarIsShowing] = useState(false)\n    let [SnackBarOptions, SetSnackBarOptions] = useState<TSnackBarOptions>({\n        message: \"something goes wrong\",\n        HideDuration: 3000,\n        position: {horizontal: \"center\", vertical: \"bottom\"},\n        severity: \"error\"\n    })\n\n    const OnSetTimerData = (TimerData: TTimerData) => {\n        SetTimerData(TimerData)\n    }\n\n    const ShowSnackBar = (SnackBarOptions: TSnackBarOptions) => {\n        SnackBarIsShowing && SetSnackBarIsShowing(false)\n        SetSnackBarOptions(SnackBarOptions)\n        SetSnackBarIsShowing(true)\n    }\n\n    const HideSnackBar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        SetSnackBarIsShowing(false);\n    };\n\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                    <div className=\"MainAppWrapper\">\n                        <MaterialNav OpenUserProfile={UserProfileIsShowing.Show}/>\n\n                        <Route exact path='/Issues'\n                               render={() => <Issues Issues={props.Issues}\n                                                     AddIssue={props.AddIssue}\n                                                     ChangeIssue={props.ChangeIssue}\n                                                     DeleteIssue={props.DeleteIssue}\n                                                     CompletedIssues={props.CompletedIssues}\n                                                     SetIssues={props.SetIssues}\n                                                     SetCompletedIssues={props.SetCompletedIssues}\n                               />}/>\n\n                        <Route path='/Home'\n                               render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                   <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                              OnAllClicked={FavoritesIsClicked.Hide}\n                                                              OnFavoritesClick={FavoritesIsClicked.Show}\n                                                              CurrentDate={props.CurrentDate}\n                                   />\n                               </div>}/>\n\n                        <div className={AS.MainWrapper}>\n                            <div className=\"WorklogsLayout\">\n                                <Route exact path='/Home/All'\n                                       render={() => <div className=\"WorkLogBlock\">\n                                           <div className=\"Worklogs\">\n                                               <WorkLogsContainer TimerData={TimerData}\n                                                                  openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                  ComponentToDraw={\"Worklogs\"}\n                                                                  ShowSnackBar={ShowSnackBar}\n                                                                  closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                                                  SetTimerData={SetTimerData}\n                                                                  WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                               />\n                                           </div>\n                                       </div>\n                                       }/>\n                                <Route exact path='/Home/Favorites'\n                                       render={() => <FavoritesPage FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                                    WorklogsBlocks={props.WorklogsBlocks}\n                                                                    openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                    TimerData={TimerData}\n                                                                    AddWorklog={props.AddWorklog}\n                                                                    PlayingWorklog={props.PlayingWorklog}\n                                                                    FavoritesWorklog={props.FavoritesWorklog}\n                                       />}/>\n\n                            </div>\n                            <Route path='/Home'\n                                   render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                       <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                     FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                     SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                     AddWorklog={props.AddWorklog}\n                                                     SetTimerData={OnSetTimerData}\n                                                     openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                     ChangeWorklog={props.ChangeWorklog}\n                                                     Issues={props.Issues}\n                                       />\n                                   </div>}/>\n                        </div>\n                        <ChangeWorklogModalContainer\n                            SetTimerData={SetTimerData}\n                            WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                            closeWorklogChangeModal={() => WorklogChangeModalIsOpen.Hide()}\n                            TimerData={TimerData}\n                            Issue={props.Issues}\n                        />\n                        <ModalUserProfile IsOpen={UserProfileIsShowing.isDisplayed} Hide={UserProfileIsShowing.Hide}/>\n                    </div>\n                </>\n                : <AuthPage ShowSnackBar={ShowSnackBar}/>\n            }\n            <SnackBar isShowing={SnackBarIsShowing} onHide={HideSnackBar} options={SnackBarOptions}/>\n        </div>\n\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues: state.IssuesData.Issues,\n    CompletedIssues: state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById,\n        ChangeWorklog, AddWorklog, AddToFavorite,\n        ChangeIssue, AddIssue, DeleteIssue, SetCompletedIssues, SetIssues\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__2qgrf\",\"RightLabel\":\"TimeSlider_RightLabel__1VbVI\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__3S1BR\",\"LabelValue\":\"TimeSlider_LabelValue__3KC9y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"LoginModal_modal__7AKlV\",\"bg\":\"LoginModal_bg__1AAQD\",\"InputsContainer\":\"LoginModal_InputsContainer__1FoRz\",\"LoginContainer\":\"LoginModal_LoginContainer__1zvFn\",\"PasswordContainer\":\"LoginModal_PasswordContainer__2krJV\",\"descr\":\"LoginModal_descr__GkO3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.ca981f53.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"DeleteConfirm_modal__NP0te\",\"bg\":\"DeleteConfirm_bg__2icmH\",\"ModalTextContainer\":\"DeleteConfirm_ModalTextContainer__2-EVO\",\"NewWorklogControlButtonsContainer\":\"DeleteConfirm_NewWorklogControlButtonsContainer__2Rt5s\",\"NewWorklogControlButtons\":\"DeleteConfirm_NewWorklogControlButtons__2JHii\",\"NewWorklogSubmitButtonSize\":\"DeleteConfirm_NewWorklogSubmitButtonSize__1d3dd\",\"NewWorklogControlButton\":\"DeleteConfirm_NewWorklogControlButton__3JXRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__1N-3-\",\"AllButtonBg\":\"All_AllButtonBg__3aUhh\",\"item\":\"All_item__IH3JR\",\"ActiveItem\":\"All_ActiveItem__2XSWr\"};"],"sourceRoot":""}