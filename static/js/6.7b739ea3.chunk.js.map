{"version":3,"sources":["Components/Issues/Inputs/CustomListInput.tsx","Components/Issues/IssuesList/ListHeader.tsx","Components/Issues/IssuesList/IssueListItem.tsx","Components/Issues/IssuesList/ListContent.tsx","Components/Issues/IssuesList/IssuesList.tsx","Components/Issues/Issues.tsx","Components/Issues/IssuesPage.tsx"],"names":["useStyles","makeStyles","theme","createStyles","AddIssueInput","margin","spacing","paddingBottom","CustomListInput","props","classes","className","Grid","container","justify","alignItems","direction","item","TextField","id","label","multiline","value","onChange","placeholder","style","paddingTop","Button","onClick","onSubmit","color","size","variant","SubmitButtonText","onCancel","marginLeft","CancelButtonText","cardHeader","padding","maxWidth","paddingLeft","ListHeader","items","useState","AddIssueOpened","SetAddIssueOpened","AddNewIssueInput","useInput","numberOfChecked","intersection","checked","length","a","b","filter","indexOf","not","union","avatar","setChecked","indeterminate","disabled","inputProps","title","subheader","paddingRight","el","CustomizedButton","fontColor","bgColor","fontSize","startIcon","text","bind","AddIssue","clear","IssueListItem","EditInputData","useBooleanState","EditInputValue","labelId","Issue","isDisplayed","ChangeIssue","Hide","key","width","ListItem","role","button","handleToggle","ListItemIcon","tabIndex","disableRipple","ListItemText","primary","Tooltip","arrow","placement","Show","blue","cursor","DeleteIssue","blueGrey","ListContent","currentIndex","newChecked","push","splice","List","dense","component","map","IssuesList","Card","height","Divider","root","list","backgroundColor","palette","background","paper","boxShadow","Issues","IssuesChecked","CompletedIssuesChecked","CompletedIssues","Container","SetCompletedIssues","concat","SetIssues","aria-label","IssuesPage","dispatch","useDispatch","issues","useSelector","getIssues","completedIssues","getCompletedIssues","From","OldIssue","NewIssue"],"mappings":"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","file":"static/js/6.7b739ea3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value: string\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    onCancel: () => void\r\n    SubmitButtonText: string\r\n    CancelButtonText: string\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n            },\r\n            paddingBottom: \"10px\"\r\n        }\r\n    })\r\n)\r\n\r\nexport const CustomListInput: React.FC<TCustonListInputProps> = (props) => {\r\n    const classes = useStyles()\r\n    return <div className={classes.AddIssueInput}>\r\n        <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n\r\n            <Grid item>\r\n                <TextField\r\n                    id=\"filled-multiline-flexible\"\r\n                    label=\"New issue\"\r\n                    multiline\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                    placeholder=\"Please enter the new issue\"\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item style={{paddingTop:\"1rem\"}}>\r\n                <Grid container justify=\"space-around\" alignItems=\"center\">\r\n                    <Grid item>\r\n                        <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"}>\r\n                            {props.SubmitButtonText}\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Button onClick={props.onCancel} style={{marginLeft: \"20%\"}} color={\"inherit\"} size={\"small\"}\r\n                                variant={\"contained\"}>\r\n                            {props.CancelButtonText}\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n","import React, {Dispatch, useState} from \"react\"\nimport Grid from \"@material-ui/core/Grid\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport CardHeader from \"@material-ui/core/CardHeader/CardHeader\"\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport {CustomListInput} from \"../Inputs/CustomListInput\";\nimport {useInput} from \"../../hooks/useInput\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {TAddIssue} from \"../../../Redux/IssuesReducer\";\nimport {CustomizedButton} from \"../../CustomElements/CustomizedButton/CustomizedButton\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        cardHeader: {\n            padding: theme.spacing(1, 2),\n        },\n\n        AddIssueInput: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(0),\n                maxWidth: \"30rem\"\n            },\n            paddingLeft: \"30%\",\n            paddingBottom: \"10px\"\n        }\n    })\n)\n\ntype TCardHeaderProps = {\n    checked: string[]\n    setChecked: Dispatch<string[]>\n    AddIssue: TAddIssue\n    items: string[]\n    el: \"Issue\" | \"CompletedIssue\"\n    title: React.ReactNode\n}\nexport const ListHeader: React.FC<TCardHeaderProps> = (props) => {\n    const classes = useStyles()\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\n    const AddNewIssueInput = useInput('')\n\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length\n\n    const intersection = (a: string[], b: string[]) => {\n        return a.filter((value) => b.indexOf(value) !== -1);\n    }\n\n    const handleToggleAll = (items: string[]) => () => {\n        if (numberOfChecked(items) === items.length) props.setChecked(not(props.checked, items))\n        else props.setChecked(union(props.checked, items))\n    }\n\n    const onShowAddIssueInput = () => {\n        SetAddIssueOpened(true)\n    }\n\n    const not = (a: string[], b: string[]) => {\n        return a.filter((value) => b.indexOf(value) === -1);\n    }\n\n    const union = (a: string[], b: string[]) => {\n        return [...a, ...not(b, a)];\n    }\n\n\n    const OnConfirmAddNewIssue = () => {\n        props.AddIssue(AddNewIssueInput.value)\n        AddNewIssueInput.clear()\n        SetAddIssueOpened(false)\n    }\n    const OnCancelAddNewIssue = () => {\n        AddNewIssueInput.clear()\n        SetAddIssueOpened(false)\n    }\n\n    return <div className=\"CardHeaderContainer\">\n        <Grid container justify=\"space-between\" alignItems=\"center\">\n\n            <Grid item>\n                <CardHeader className={classes.cardHeader}\n                            avatar={\n                                <Checkbox\n                                    onClick={handleToggleAll(props.items)}\n                                    checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\n                                    indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\n                                    disabled={props.items.length === 0}\n                                    inputProps={{'aria-label': 'all items selected'}}\n                                />\n                            }\n                            title={props.title}\n                            subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\n                />\n            </Grid>\n\n            <Grid item style={{paddingRight: \"0.5rem\"}}>\n                {\n                    props.el === \"Issue\" &&\n                        <CustomizedButton onClick={onShowAddIssueInput} fontColor=\"teal\" bgColor=\"white\"\n                                          fontSize=\"0.8rem\"\n                                          variant={\"outlined\"} startIcon={<AddBoxIcon/>} text=\"add issue\"/>\n                }\n            </Grid>\n\n        </Grid>\n        {\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput {...AddNewIssueInput.bind}\n                                                                       onSubmit={OnConfirmAddNewIssue}\n                                                                       onCancel={OnCancelAddNewIssue}\n                                                                       SubmitButtonText={\"Add\"}\n                                                                       CancelButtonText={\"cancel\"}/>\n        }\n    </div>\n}","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../../Redux/IssuesReducer\";\r\nimport {CustomListInput} from \"../Inputs/CustomListInput\";\r\nimport {useInput} from \"../../hooks/useInput\";\r\nimport {useBooleanState} from \"../../hooks/useBooleanState\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nexport const IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const EditInputData = useBooleanState(false)\r\n    const EditInputValue = useInput('')\r\n\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue.value)\r\n        EditInputData.Hide()\r\n        EditInputValue.clear()\r\n    }\r\n    const onCancelInput = () =>{\r\n        EditInputData.Hide()\r\n    }\r\n\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputData.isDisplayed\r\n                    ? <CustomListInput onSubmit={OnSaveNewValue}\r\n                             {...EditInputValue.bind} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container alignItems=\"center\" justify=\"space-around\">\r\n\r\n                        <Grid item  style={{width:\"85%\"}}>\r\n\r\n                            <ListItem role=\"listitem\" button\r\n                                      //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item  >\r\n\r\n                            <Grid container justify=\"space-between\" alignItems=\"center\" style={{paddingRight : \"1rem\"}}>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item style={{paddingRight : \".5rem\"}}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => EditInputData.Show()}\r\n                                                      style={{color: blue[400], cursor: \"pointer\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n                                <Grid item >\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {Dispatch} from \"react\"\nimport List from \"@material-ui/core/List\";\nimport {IssueListItem} from \"./IssueListItem\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { TChangeIssue, TDeleteIssue} from \"../../../Redux/IssuesReducer\";\n\n\ntype TListContentProps={\n    checked: string[]\n    items: string[]\n    el: \"Issue\" | \"CompletedIssue\"\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    setChecked: Dispatch<string[]>\n}\n\nexport const ListContent :React.FC<TListContentProps> = props=> {\n\n    const handleToggle = (value: string) => () => {\n        const currentIndex = props.checked.indexOf(value)\n        const newChecked = [...props.checked]\n        if (currentIndex === -1) newChecked.push(value)\n        else newChecked.splice(currentIndex, 1)\n        props.setChecked(newChecked)\n    }\n\n    return <div className=\"CardContentContainer\">\n        <List dense component=\"div\" role=\"list\">\n            {props.items.map((value: string) => {\n                return (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\n                                       handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\n                                       ChangeIssue={props.ChangeIssue}/>)\n\n            })}\n            <ListItem/>\n        </List>\n    </div>\n}\n","import React, {Dispatch} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../../Redux/IssuesReducer\";\r\nimport {ListHeader} from \"./ListHeader\";\r\nimport {ListContent} from \"./ListContent\";\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    setChecked: Dispatch<string[]>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\n\r\nexport const IssuesList: React.FC<TIssuesListProps> = (props) => {\r\n\r\n    return <Card style={{width: \"100%\", height: \"100%\"}}>\r\n\r\n        <ListHeader checked={props.checked} setChecked={props.setChecked}\r\n                    AddIssue={props.AddIssue} items={props.items}\r\n                    el={props.el} title={props.title}/>\r\n\r\n        <Divider/>\r\n\r\n        <div style={{paddingTop: \"1rem\"}}>\r\n            <ListContent checked={props.checked} items={props.items} el={props.el} DeleteIssue={props.DeleteIssue}\r\n                         ChangeIssue={props.ChangeIssue} setChecked={props.setChecked}/>\r\n        </div>\r\n\r\n\r\n    </Card>\r\n}","import React, {useState} from 'react'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Redux/IssuesReducer\"\r\nimport {IssuesList} from \"./IssuesList/IssuesList\"\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: \"2rem\"\r\n        },\r\n        list: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow: \"0px 2px 10px rgba(0,0,0,0.5)\"\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        }\r\n    })\r\n)\r\n\r\nconst not = (a: string[], b: string[]) => {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nconst intersection = (a: string[], b: string[]) => {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues: TSetIssues\r\n    SetCompletedIssues: TSetCompletedIssues\r\n}\r\n\r\n\r\nexport  const Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles()\r\n    const [checked, setChecked] = useState<string[]>([])\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked))\r\n        props.SetIssues(not(props.Issues, IssuesChecked))\r\n        setChecked(not(checked, IssuesChecked))\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked))\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked))\r\n        setChecked(not(checked, CompletedIssuesChecked))\r\n    }\r\n\r\n    return <Grid container spacing={3} alignItems=\"center\" justify=\"center\" className={classes.root}>\r\n\r\n        <Container style={{margin: 0}} maxWidth=\"xl\">\r\n            <Grid item className={classes.list}>\r\n                <IssuesList title={\"Issues\"} items={props.Issues}\r\n                            el={\"Issue\"}\r\n                            DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                            checked={checked} setChecked={setChecked}\r\n                            ChangeIssue={props.ChangeIssue}\r\n                />\r\n            </Grid>\r\n        </Container>\r\n\r\n        <Grid item>\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    className={classes.button}\r\n                    onClick={handleCheckedIssues}\r\n                    disabled={IssuesChecked.length === 0}\r\n                    aria-label=\"move selected right\"\r\n                    color={\"secondary\"}\r\n                >\r\n                    &gt;\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    className={classes.button}\r\n                    onClick={handleCheckedCompletedIssues}\r\n                    disabled={CompletedIssuesChecked.length === 0}\r\n                    aria-label=\"move selected left\"\r\n                    color={\"primary\"}\r\n                >\r\n                    &lt;\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Container style={{margin: 0, paddingBottom: \"2rem\"}} maxWidth=\"xl\">\r\n            <Grid item className={classes.list}>\r\n                <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                            el={\"CompletedIssue\"} setChecked={setChecked}\r\n                            checked={checked} AddIssue={props.AddIssue}\r\n                            DeleteIssue={props.DeleteIssue}\r\n                            ChangeIssue={props.ChangeIssue}\r\n                />\r\n            </Grid>\r\n        </Container>\r\n    </Grid>\r\n}\r\n","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCompletedIssues, getIssues} from \"../Selectors/IssuesSelectors\";\r\nimport {AddIssue, ChangeIssue, DeleteIssue, SetCompletedIssues, SetIssues} from \"../../Redux/IssuesReducer\";\r\nimport {Issues} from \"./Issues\";\r\n\r\nconst IssuesPage = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const issues = useSelector(getIssues)\r\n    const completedIssues = useSelector(getCompletedIssues)\r\n\r\n    const addIssues = (Issue: string) => dispatch(AddIssue(Issue))\r\n    const deleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => dispatch(DeleteIssue(Issue, From))\r\n    const changeIssue = (OldIssue: string, NewIssue: string) => dispatch(ChangeIssue(OldIssue, NewIssue))\r\n    const setIssues = (Issues: string[]) => dispatch(SetIssues(Issues))\r\n    const setCompletedIssues = (CompletedIssues: string[]) => dispatch(SetCompletedIssues(CompletedIssues))\r\n\r\n    return <Issues Issues={issues} CompletedIssues={completedIssues} AddIssue={addIssues} DeleteIssue={deleteIssue}\r\n                   ChangeIssue={changeIssue} SetIssues={setIssues} SetCompletedIssues={setCompletedIssues}/>\r\n}\r\nexport default IssuesPage"],"sourceRoot":""}