{"version":3,"sources":["Components/Timer/Timer.module.css","Components/CalendarAndControllButtons/All/All.module.css","Data/redux-store.ts","Data/CalendarReducer.ts","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg","Components/WorkLogs/WorkLog.module.css","Components/NavBar/NavBar.module.css","Components/hooks/useInput.ts","Data/WorkLogsReducer.ts","assets/imgs/avatar.jpg","assets/utils/ValidartorsComponents/ElementsValidators.module.css","Components/ChangeWorklogModal/CustomInput.tsx","Components/Calendar/Calendar.module.css","assets/imgs/new_worklog_button.svg","Components/Issues/IssuesSelectInput.tsx","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","assets/secondary/CreateSnackbarOptions.ts","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/calendar.svg","Components/Auth/AuthModal.module.css","Components/TimeTracking/TimeTracking.module.css","Components/CustomizedButton/CustomizedButton.tsx","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","Components/NavBar/MaterialNavBar.tsx","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/CalendarAndControllButtons/All/All.tsx","Components/CalendarAndControllButtons/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/hooks/useBooleanState.ts","assets/utils/ValidartorsComponents/ElementsValidators.js","assets/utils/validators.js","Components/Auth/SignIn/SignInForm.tsx","Components/Auth/SignIn/SignIn.tsx","Components/Auth/SignUp/SignUpForm.tsx","Components/Auth/SignUp/SignUp.tsx","Components/Auth/AuthPage.tsx","Components/SnackBar/SnackBar.tsx","Components/Progress/Progress.tsx","assets/utils/withSuspense/withSuspense.tsx","App.tsx","index.tsx","App.module.css","Data/IssuesReducer.ts","assets/secondary/CalculateTime.js","assets/secondary/GetCurrentDate.js","Components/CalendarAndControllButtons/Favorites/Favorites.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css"],"names":["module","exports","reducers","combineReducers","form","formReducer","CalendarData","CalendarReducer","WorklogsData","WorkLogsReducer","IssuesData","IssuesReducer","store","createStore","applyMiddleware","thunkMiddleWare","window","RandomStatus","arr","length","RangeError","Math","floor","random","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","push","Signature","DayNumber","DayStatus","id","randomInteger","n","p","DefaultState","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CurrentDate","GetCurrentDate","SetClickedMonthDay","Day","type","state","action","useInput","initialValue","useState","value","setValue","bind","onChange","e","target","clear","forceUpdate","val","DEL_WORKLOG","DayName","CurrentMonth","CurrentDay","min","max","rand","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","Worklogs","StartTime","EndTime","TaskField","status","NestingItems","TimerValue","Issue","IsFavorites","PlayingWorklog","WorklogToChange","FavoritesWorklogs","SearchWorklogBlock","MonthName","StateCopy","JSON","parse","stringify","getState","WorklogsBlockToBeScrolled","map","el","split","Month","Number","parseInt","document","getElementById","toString","AddWorklog","NewWorklog","DeleteWorklog","DelWorklogId","DelParentId","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","SetWorklogToChange","undefined","AddToFavorite","WorklogId","SetWorklogStatus","options","DeleteFromFavorites","ChangeFavoritesWorklog","WorklogsReducer","GetWorklogsBlockCopy","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","WorklogBlock","Index","Worklog","WLIndex","NestingItem","NestingIndex","EmptyWorklog","ParentId","WorklogToCreate","some","WBL","unshift","WB","filter","FWorklog","Object","assign","CNestingItem","FNestingItem","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","WL","WBLtrue","FavoritesWorklog","FavoritesWorklogsCopy","Nest","CustomInput","props","classes","makeStyles","theme","createStyles","root","margin","spacing","width","useStyles","className","label","placeholder","multiline","IssuesSelectInput","formControl","Item","color","noValidate","autoComplete","select","variant","fullWidth","Issues","issue","key","LineStroke","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","onClick","ContentContainer","ComponentToDraw","CurrentWorklog","WorklogInfo","ContainerEl","ShowSnackBar","message","position","horizontal","vertical","severity","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","DeleteWorklogConfirmModal","isOpen","open","onClose","aria-labelledby","aria-describedby","container","justify","alignItems","item","style","fontSize","fontWeight","paddingTop","paddingBottom","direction","DeleteModalParams","CustomizedButton","bgColor","text","startIcon","fontColor","NestingWorkLog","WorkLog","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","src","alt","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","transitionTimingFunction","transitionDuration","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","React","memo","Fragment","height","borderRadius","Bar","now","bg","CreateSnackBarOptions","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","cursor","every","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","WorklogInfoContainer","connect","WorklogsBlocks","findColorObject","colorName","green","purple","grey","red","blue","teal","common","yellow","deepOrange","orange","blueGrey","cyan","indigo","ColorButton","withStyles","palette","getContrastText","backgroundColor","Button","disabled","grow","flexGrow","menuButton","marginRight","title","display","breakpoints","up","sectionDesktop","sectionMobile","console","log","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMobileMenuOpen","Boolean","LogOut","localStorage","setItem","onUnAuth","renderMobileMenu","Menu","anchorEl","anchorOrigin","keepMounted","transformOrigin","MenuItem","IconButton","OpenUserProfile","aria-label","aria-controls","aria-haspopup","Avatar","avatar","AppBar","Toolbar","HS","NavLinks","to","Tooltip","arrow","placement","edge","event","currentTarget","prevProps","nextProps","Timer","substr","seconds","setSeconds","minutes","setMinutes","hours","setHours","isActive","setIsActive","WorklogInput","IssueInput","useEffect","interval","setInterval","clearInterval","TS","TimeRContainer","marginTop","ToFullTime","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","paddingLeft","TimeTracking","TTS","TTLayout","strokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","DropDownProgressStatus","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","this","Component","compose","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CurrentYear","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","FavoritesTextContainer","OnFavoritesClick","pink","CalendarAndControlButtons","AS","CalendarAndButtons","useBooleanState","isDisplayed","SetIsOpen","Show","Hide","FormInput","input","meta","error","touched","EVS","padding","CreateField","name","validators","component","Field","validate","required","Email","test","PassMinLength","SignInFormRedux","reduxForm","paddingRight","onSubmit","handleSubmit","authErr","helperText","Grid","ComponentIsSignUp","SignIn","history","useHistory","setAuthErr","formData","email","password","onAuth","replace","SignUpFormRedux","ComponentIsSignIn","SignUp","AuthPage","SetComponentToDraw","modal","Alert","elevation","Snackbar","isShowing","autoHideDuration","HideDuration","onHide","marginLeft","CircularProgress","withSuspense","WrappedComponent","fallback","lazy","Favorites","ChangeWorklogModalContainer","ModalUserProfile","SuspendedIssues","SuspendedFavorites","SuspendedChangeWorklogModalContainer","SuspendedModalUserProfile","CompletedIssues","ChangeIssue","AddIssue","DeleteIssue","SetCompletedIssues","SetIssues","setIsAuth","WorklogChangeModalIsOpen","UserProfileIsShowing","SnackBarState","SnackBarOptions","SetSnackBarOptions","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","WorkLogsContainer","closeWorklogChangeModal","TImeTracking_and_Calendar","IsOpen","reason","ReactDOM","basename","process","AppContainer","From","OldIssue","NewIssue","GetIssuesCopy","CompletedIssue","IssuesCopy","findIndex","Numbered","CalculateNewStartTime","CurrentTime","CurrentHours","CurrentMinutes","days","months","date","Date","getFullYear","getMonth","getDate","getDay"],"mappings":"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","file":"static/js/main.b448e9c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__1N-3-\",\"AllButtonBg\":\"All_AllButtonBg__3aUhh\",\"item\":\"All_item__IH3JR\",\"ActiveItem\":\"All_ActiveItem__2XSWr\"};","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport interface TCalendars {\r\n    [key: string]: TCalendar\r\n}\r\n\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\n\r\nexport type TCurrentDate = {\r\n    DayName: string\r\n    CurrentYear: number | string\r\n    CurrentMonth: string\r\n    CurrentDay: number | string\r\n}\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"Issue\":\"WorkLog_Issue__34BO9\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLinks\":\"NavBar_NavLinks__22adz\",\"item\":\"NavBar_item__fYm3M\"};","import {useState, ChangeEvent} from \"react\"\r\n\r\ntype defFunc = () => void\r\n\r\nexport const useInput = (initialValue: string): {\r\n    bind: {\r\n        value: string,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    },\r\n    value: string,\r\n    clear: defFunc,\r\n    forceUpdate: (val: string) => void\r\n} => {\r\n\r\n    let [value, setValue] = useState(initialValue)\r\n\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const clear = () => {\r\n        setValue(\"\")\r\n    }\r\n\r\n    const forceUpdate = (val: string) => {\r\n        setValue(val)\r\n    }\r\n    return {\r\n        bind: {value, onChange},\r\n        value,\r\n        clear,\r\n        forceUpdate\r\n    }\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241,\r\n            Issue: \"Meeting\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122,\r\n            Issue: \"QA\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null,\r\n            Issue: \"Branding\",\r\n            IsFavorites: false\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false,\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el => {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                status: \"danger\",\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n\r\n                if (WB.BlockInfo.BlockCreatedDate === CurrentDate) {\r\n\r\n                    if(Worklog.Issue === action.NewWorklog.Issue){\r\n\r\n                        if(Worklog.id !== action.NewWorklog.id){\r\n                            WB.Worklogs = WB.Worklogs.filter(FWorklog=>FWorklog.id !== action.NewWorklog.id)\r\n                            if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                                Worklog.NestingItems.map(NestingItem=>{\r\n                                    if(NestingItem.id === action.NewWorklog.id){\r\n                                        if(NestingItem.Issue === action.NewWorklog.Issue)\r\n                                            Object.assign(NestingItem,action.NewWorklog)\r\n\r\n                                    } else Worklog.NestingItems?.push(action.NewWorklog)\r\n                                })\r\n                            } else Worklog.NestingItems = [action.NewWorklog]\r\n\r\n\r\n                        }else Object.assign(Worklog,action.NewWorklog)\r\n\r\n                    }else {\r\n                        if(Worklog.id === action.NewWorklog.id) Object.assign(Worklog,action.NewWorklog)\r\n\r\n                        else if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                            Worklog.NestingItems.map(CNestingItem => {\r\n                                if(CNestingItem.id === action.NewWorklog.id && CNestingItem.Issue !== action.NewWorklog.Issue){\r\n                                    Worklog.NestingItems = Worklog.NestingItems?.filter(FNestingItem=>FNestingItem.id !== action.NewWorklog.id)\r\n                                    WB.Worklogs.push(action.NewWorklog)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog} = FindWorklogById(action.WorklogId)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId)\r\n                            Object.assign(NestingItem, action.NewWorklog)\r\n                    })\r\n                } else Object.assign(FavoritesWorklog, action.NewWorklog)\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId)\r\n                                    Object.assign(NestingItem, action.NewWorklog)\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId)\r\n                                Object.assign(Worklog, action.NewWorklog)\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG,  NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\n// export const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n//\r\n//     const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n//     // if (SendNewMessageResult.resultCode === 0) {\r\n//     //     dispatch(GetWorklogs(WorklogBlockId))\r\n//     // }\r\n// }\r\n// export type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","module.exports = __webpack_public_path__ + \"static/media/avatar.ca981f53.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"ElementsValidators_formControl__wFZV5\",\"error\":\"ElementsValidators_error__1Akph\"};","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport type TCustomInputProps = {\r\n    value : string\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>) =>void\r\n    placeholder : string\r\n    label : string\r\n    width : number\r\n}\r\n\r\nconst CustomInput: React.FC<TCustomInputProps> = (props) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                '& .MuiTextField-root': {\r\n                    margin: theme.spacing(1),\r\n                    width: props.width,\r\n                },\r\n            },\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n    return <div className={classes.root}>\r\n        <TextField\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            id=\"standard-textarea\"\r\n            label={props.label}\r\n            placeholder={props.placeholder}\r\n            multiline\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default CustomInput","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","import React, {ChangeEvent} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from \"@material-ui/core/TextField/TextField\"\r\nimport MenuItem from \"@material-ui/core/MenuItem/MenuItem\"\r\n\r\nexport type TIssuesSelectInputProps = {\r\n    Issues: string[]\r\n    onChange: (event: React.ChangeEvent<{ value: unknown; }>) => void\r\n    value?: string\r\n    width: number\r\n}\r\n\r\nconst IssuesSelectInput: React.FC<TIssuesSelectInputProps> = (props) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                width: props.width,\r\n            },\r\n            root: {\r\n                '& .MuiTextField-root': {\r\n                    margin: theme.spacing(1),\r\n                }\r\n                },\r\n            Item: {\r\n                color: \"#393a3a\",\r\n            }\r\n        })\r\n    )\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\">\r\n            <div>\r\n                <TextField\r\n                    id=\"outlined-select-issues\"\r\n                    select\r\n                    label=\"Issues\"\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth={true}\r\n                >\r\n                    {props.Issues.map((issue) => (\r\n                        <MenuItem key={issue} value={issue}>\r\n                            {issue}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n            </div>\r\n        </form>\r\n        // {/*<div>*/}\r\n        // {/*    <FormControl className={classes.formControl}>*/}\r\n        // {/*        <InputLabel htmlFor=\"grouped-native-select\">Issues</InputLabel>*/}\r\n        // {/*        <Select value={props.value} onChange={props.onChange} native defaultValue=\"\" id=\"grouped-native-select\">*/}\r\n        // {/*            <option value={\"no issue\"}> no issue</option>*/}\r\n        // {/*            <optgroup label=\"Issues\">*/}\r\n        // {/*                {props.Issues.map(Issue => <option key={Issue} className={classes.Item}*/}\r\n        // {/*                                                   value={Issue}>{Issue}</option>)}*/}\r\n        // {/*            </optgroup>*/}\r\n        // {/*        </Select>*/}\r\n        // {/*    </FormControl>*/}\r\n        // {/*</div>*/}\r\n    );\r\n}\r\n\r\nexport default IssuesSelectInput","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetDeleteModalParams: Dispatch<any>\r\n    ParentId?: number\r\n    AddToFavorite: TAddToFavorite\r\n    PlayingWorklog: TWorkLog | null\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    ShowSnackBar: TShowSnackBar\r\n\r\n    onHideMenu: () => void\r\n    WorklogInfo : TWorkLog\r\n    NestingIsShowing : boolean\r\n}\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e: React.MouseEvent<HTMLElement>) => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)) {\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId: props.WorklogInfo.id,\r\n                ParentId: props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () => {\r\n        if (!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\") {\r\n            if (props.ParentId) props.AddToFavorite(props.WorklogInfo.id)\r\n            else props.AddToFavorite(props.WorklogInfo.id)\r\n            props.ShowSnackBar({\r\n                message: \"worklog added to favorites\", position: {horizontal: \"center\", vertical: \"top\"},\r\n                severity: \"success\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () => {\r\n        if (!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\") {\r\n            let CurrentWorklog: TWorkLog = {\r\n                ...props.WorklogInfo,\r\n                TimerValue: \"00:00:00\",\r\n                id: randomInteger(0, 10000),\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from \"react\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport CustomizedButton from \"../CustomizedButton/CustomizedButton\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\"\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\"\r\nimport Grid from \"@material-ui/core/Grid/Grid\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen: boolean\r\n    onClose: () => void\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    ComponentToDraw: TComponentToDraw\r\n    DeleteFromFavorites: TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal: React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = () => {\r\n        if (props.DeleteModalParams) {\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId, props.DeleteModalParams.ParentId)\r\n                : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n    if (!props.isOpen) return null\r\n\r\n    return <Dialog\r\n        open={props.isOpen}\r\n        onClose={props.onClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n    >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"confirm window\"}</DialogTitle>\r\n        <DialogContent>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n\r\n                <Grid item style={{fontSize: \"1.275rem\", fontWeight: 600}}>\r\n                    Are you sure you want to delete the worklog?\r\n                </Grid>\r\n\r\n                <Grid style={{paddingTop:\"2rem\",paddingBottom:\"2rem\"}} item>\r\n                    <Grid container direction=\"row\" alignItems=\"center\" justify=\"space-around\">\r\n\r\n                        <Grid item>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CustomizedButton bgColor={\"teal\"} text={\"delete\"}\r\n                                                  variant={\"contained\"} fontSize={14} startIcon={<DeleteIcon/>}/>\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item>\r\n                            <div onClick={props.onClose} className=\"modal-close\">\r\n                                <CustomizedButton bgColor={\"grey\"} text={\"go back\"}\r\n                                                  variant={\"contained\"} fontSize={14} fontColor={\"common\"}/>\r\n                            </div>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n        </DialogContent>\r\n\r\n    </Dialog>\r\n\r\n}\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React from \"react\";\r\nimport WorkLog, {TWorklogProps} from \"./WorkLog\";\r\n\r\nconst NestingWorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    return <div className=\"NestedItem\">\r\n\r\n        {\r\n            props.WorklogInfo.NestingItems?.map(NestingItem =>\r\n                <div key={NestingItem.id}>\r\n                    <WorkLog {...props}\r\n                             WorklogInfo={NestingItem}\r\n                             ParentId={props.WorklogInfo.id}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {TWorkLog, CurrentDate} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams, TWorklogsBlockProps} from \"./WorkLogsBlock\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogOwnProps = {\r\n    DeleteModalIsOpen: boolean\r\n    OnDeleteModalOpen: () => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetDeleteModalParams: Dispatch<SetStateAction<TDeleteModalParams | undefined>>\r\n    WorklogInfo: TWorkLog\r\n    ParentId?: number\r\n}\r\nexport type TWorklogProps = TWorklogsBlockProps & TWorklogOwnProps\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => SetNestingIsShowing(true)\r\n    const OnHideNestingWorklogs = () => SetNestingIsShowing(false)\r\n    const OnShowMenu = () => SetShowMenu(true)\r\n    const OnHideMenu = () => SetShowMenu(false)\r\n    const onStopButtonClicked = () => props.SetIsPlayingWorklogById(false, props.WorklogInfo.id)\r\n\r\n    const onPlayButtonClicked = () => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog))\r\n\r\n            props.SetIsPlayingWorklogById(true, props.WorklogInfo.id, props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if ((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"NestingItems\", \"Issue\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props.WorklogInfo[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                <img\r\n                    className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu ? WLS.WorklogActiveBG : WLS.WorklogBG}\r\n                    src={WorklogActiveBG} alt=\"\"/>\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {\r\n                            props.WorklogInfo.NestingItems && props.WorklogInfo.NestingItems.length > 0\r\n                                ? <div className={WLS.NestingButtonPose}>\r\n                                    {\r\n                                        NestingIsShowing\r\n                                            ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                                className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                            </div>\r\n\r\n                                            : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}>\r\n                                            <span\r\n                                                className={WLS.TwwContentText}>\r\n                                                    {props.WorklogInfo.NestingItems.length}\r\n                                            </span>\r\n                                            </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                : props.WorklogInfo.StartTime && props.WorklogInfo.EndTime\r\n                                ? <div className={WLS.WorkTime}>\r\n\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.WorklogInfo.StartTime}\r\n                                    </div>\r\n\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.WorklogInfo.EndTime}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                : <div></div>\r\n                        }\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img style={{transitionTimingFunction: \"ease-out\", transitionDuration: \"0.3s\"}}\r\n                                 src={props.WorklogInfo.status === \"ok\"\r\n                                     ? CP_ok : props.WorklogInfo.status === \"warning\"\r\n                                         ? CP_warning : props.WorklogInfo.status === \"danger\"\r\n                                             ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.Issue}>\r\n                                {props.WorklogInfo.Issue}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.WorklogInfo.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.WorklogInfo.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.WorklogInfo.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu}\r\n                                 className={props.PlayingWorklog?.id === props.WorklogInfo.id || ShowMenu\r\n                                     ? WLS.WorklogMoreVerticalActive\r\n                                     : WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       isOpen={props.DeleteModalIsOpen} onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.WorklogInfo.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {\r\n            ShowMenu && <WorkLogDropDown {...props}\r\n                                         onHideMenu={OnHideMenu}\r\n                                         NestingIsShowing={NestingIsShowing}\r\n                                         ShowSnackBar={props.ShowSnackBar}\r\n            />}\r\n\r\n        {\r\n\r\n            NestingIsShowing && <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default React.memo(ProgressBar)","import {TSnackBarOptions} from \"../../Components/SnackBar/SnackBar\";\n\nconst CreateSnackBarOptions =(severity : \"error\" | \"info\" | \"warning\" | \"success\",message : string)=>(\n    {\n        message,\n        severity,\n        position : {\n            vertical : \"bottom\",\n            horizontal : \"right\"\n        }\n    } as TSnackBarOptions\n)\nexport default CreateSnackBarOptions","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate, TBlockInfo, TSendWorklogsData, TSetWorklogStatus, TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport CreateSnackBarOptions from \"../../../assets/secondary/CreateSnackbarOptions\";\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n\r\n    const OnSendWorklogData = (): void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"Issue does not exist\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"warning\", \"Please, enter the worklog name\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"something goes wrong\"))\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"success\", \"your worklog successfully logged\"))\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            // let ObjToSend: TSendWorklogsData = {\r\n            //     WorkLogsBlocks: {\r\n            //         BlockInfo: props.BlockInfo,\r\n            //         Worklogs: props.Worklogs\r\n            //     }\r\n            // }\r\n            //props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"success\", \"your worklog successfully logged\"))\r\n        } else {\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"error\", \"Issue does not exist\"))\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={FS.DateTime}>\r\n\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {\r\n                    props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                        ? <BackupIcon style={{cursor: \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                      onClick={OnSendWorklogData}\r\n                                      className={FS.DownloadIcon}/>\r\n\r\n                        : <BackupIcon color={\"disabled\"} fontSize={\"large\"} className={FS.DownloadIcon}/>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {useState} from \"react\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {TBlockInfo, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\nimport {TWorklogsContainerProps} from \"./WorkLogsContainer\";\r\n\r\nexport type TWorklogsBlockOwnProps={\r\n    Worklogs: TWorkLog[]\r\n    BlockInfo?: TBlockInfo\r\n}\r\nexport type TWorklogsBlockProps = TWorklogsContainerProps & TWorklogsBlockOwnProps\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = () => SetDeleteModalIsOpen(true)\r\n    const OnDeleteModalClose = () => SetDeleteModalIsOpen(false)\r\n\r\n\r\n    return <>\r\n        {\r\n            props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n            <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n\r\n                <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                             SummaryTime={props.BlockInfo.SummaryTime}\r\n                             SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                             Worklogs={props.Worklogs}\r\n                             BlockInfo={props.BlockInfo}\r\n                             ShowSnackBar={props.ShowSnackBar}\r\n                             SetWorklogStatus={props.SetWorklogStatus}/>\r\n            </div>\r\n        }\r\n\r\n        {\r\n            props[props.ComponentToDraw].map(el =>\r\n                <div key={el.id} className=\"worklog\">\r\n                    <WorkLog\r\n                        WorklogInfo={el}\r\n                        {...props}\r\n                        DeleteModalIsOpen={DeleteModalIsOpen}\r\n                        OnDeleteModalClose={OnDeleteModalClose}\r\n                        OnDeleteModalOpen={OnDeleteModalOpen}\r\n                        SetDeleteModalParams={SetDeleteModalParams}\r\n                        DeleteModalParams={DeleteModalParams}\r\n                        />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    </>\r\n}\r\n\r\nexport default WorkLogsBlock","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TAddToFavorite, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TWorklogsContainerOwnProps} from \"../../globalTypes/Types\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\n\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\nexport type TWorklogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorklogsContainerOwnProps\r\n\r\nconst WorkLogsContainer:React.FC<TWorklogsContainerProps> =(props)=>{\r\n\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {props.ComponentToDraw === \"Worklogs\"\r\n                    ? props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...props}\r\n                            Worklogs={props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\nconst StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorklogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog, SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SetWorklogStatus,DeleteFromFavorites\r\n})(WorkLogsContainer)","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"AuthModal_modal__2EZbn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","import React from 'react';\r\nimport {\r\n    createStyles,\r\n    withStyles,\r\n    makeStyles,\r\n} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { green, purple,blue,grey,red,common,teal,yellow,deepOrange,orange,blueGrey,cyan,indigo} from '@material-ui/core/colors'\r\n\r\ninterface ColorType {\r\n    [key : string] : string\r\n}\r\ntype color = \"green\" | \"purple\" | \"grey\" | \"red\" | \"blue\" | \"common\"\r\n    | \"teal\" | \"yellow\"| \"white\" | \"indigo\" |\"cyan\" |\"blueGrey\" | \"orange\" | \"deepOrange\"\r\n\r\ntype TCustomizedButtonProps = {\r\n    bgColor? : color\r\n    text : string\r\n    variant  : \"outlined\" | \"contained\" | \"text\"\r\n    fontSize : number | string\r\n    fontColor ? : color\r\n    startIcon ? : JSX.Element\r\n    width ?: number\r\n    disabled ?: boolean\r\n    onClick?: (data : any)=>void\r\n}\r\n\r\nconst findColorObject = (colorName:string) : ColorType  =>{\r\n    switch (colorName) {\r\n        case \"green\" : return green\r\n        case \"purple\" : return purple\r\n        case \"grey\" : return grey\r\n        case \"red\" : return red\r\n        case \"blue\" : return blue\r\n        case \"teal\" : return teal\r\n        case \"common\" : return common\r\n        case \"yellow\" : return yellow\r\n        case \"deepOrange\" : return deepOrange\r\n        case \"orange\" : return orange\r\n        case \"blueGrey\" : return blueGrey\r\n        case \"cyan\" : return cyan\r\n        case \"indigo\" : return indigo\r\n        default : return common\r\n    }\r\n\r\n}\r\n\r\nconst  CustomizedButton : React.FC<TCustomizedButtonProps>  = (props) => {\r\n\r\n    const useStyles = makeStyles((theme) =>\r\n        createStyles({\r\n            margin: {\r\n                margin: theme.spacing(1),\r\n                width : props.width && props.width\r\n            },\r\n        }),\r\n    )\r\n\r\n    const color = findColorObject(props.bgColor ?props.bgColor :\"white\")\r\n    const ColorButton = withStyles((theme) => ({\r\n        root: {\r\n            color: props.fontColor\r\n                ? props.fontColor === \"white\" ? red[50] :findColorObject(props.fontColor)[500]\r\n                :theme.palette.getContrastText(color[500]),\r\n            backgroundColor: color[500],\r\n            fontSize : props.fontSize,\r\n            '&:hover': {\r\n                backgroundColor: color[700],\r\n            },\r\n            borderRadius : \"0.6rem\"\r\n        },\r\n    }))(Button)\r\n\r\n    const classes = useStyles();\r\n    return <ColorButton  disabled={props.disabled} onClick={props.onClick}\r\n                         color={\"inherit\"} startIcon={props.startIcon ? props.startIcon : undefined} variant={props.variant}\r\n                         className={classes.margin}>\r\n        {props.text}\r\n    </ColorButton>\r\n}\r\nexport default CustomizedButton","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","import React from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport HS from \"./NavBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport avatar from \"../../assets/imgs/avatar.jpg\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n            marginLeft: \"5%\",\r\n            color: \"#FFFFFF\",\r\n            cursor: \"pointer\"\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\ntype TMaterialNavProps = {\r\n    OpenUserProfile : ()=> void\r\n    onUnAuth : ()=>void\r\n}\r\n const MaterialNav : React.FC<TMaterialNavProps> = (props) =>{\r\n    console.log(\"nav\")\r\n    const classes = useStyles();\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n    const handleMobileMenuClose = () => setMobileMoreAnchorEl(null)\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => setMobileMoreAnchorEl(event.currentTarget)\r\n    const LogOut = ()=>{\r\n        localStorage.setItem(\"IsAuth\",\"false\")\r\n        props.onUnAuth()\r\n    }\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <SettingsIcon/>\r\n                </IconButton>\r\n\r\n                Settings\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton color=\"primary\">\r\n                    <InfoIcon/>\r\n                </IconButton>\r\n                Info\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton onClick={LogOut} color=\"primary\">\r\n                    <ExitToAppIcon/>\r\n                </IconButton>\r\n                Logout\r\n            </MenuItem>\r\n            <MenuItem     onClick={props.OpenUserProfile} >\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"primary-search-account-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"primary\"\r\n                >\r\n                    <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                </IconButton>\r\n                Profile\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <div className={HS.NavLinks}>\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Home/All\">\r\n                                Worklogs\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Issues/\">\r\n                                Issues\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className={classes.grow}/>\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Tooltip title=\"Settings\" arrow placement=\"bottom\">\r\n                            <IconButton  color=\"inherit\">\r\n                                <SettingsIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                            <Tooltip title=\"Info\" arrow placement=\"bottom\">\r\n                                <IconButton color=\"inherit\">\r\n                                    <InfoIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        <Tooltip title=\"Logout\" arrow placement=\"bottom\">\r\n                            <IconButton onClick={LogOut} color=\"inherit\">\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Profile\" arrow placement=\"bottom\">\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"account of current user\"\r\n                                aria-haspopup=\"true\"\r\n                                color=\"inherit\"\r\n                                onClick={props.OpenUserProfile}\r\n                            >\r\n                                <Avatar alt={\"user avatar\"} src={avatar}/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n        </div>\r\n    );\r\n}\r\nexport default  React.memo(MaterialNav,(prevProps,nextProps)=>{\r\n    return true\r\n})","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport {red} from \"@material-ui/core/colors\"\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(true);\r\n    const WorklogInput= useInput(props.PlayingWorklog.TaskField ? props.PlayingWorklog.TaskField : \"\")\r\n    const IssueInput = useInput(props.PlayingWorklog.Issue ? props.PlayingWorklog.Issue : \"\")\r\n    const toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer = () => {\r\n        props.openWorklogChangeModal()\r\n        setIsActive(false)\r\n        let TimerData = {\r\n            TimerValue: ToFullTime(hours) + \":\" + ToFullTime(minutes) + \":\" + ToFullTime(seconds),\r\n            TimerIssue: IssueInput.value ? IssueInput.value : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInput.value ? WorklogInput.value : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <CustomInput {...WorklogInput.bind}\r\n                         label={\"Task Field\"}\r\n                         placeholder={\"Please, enter the task\"}\r\n                         width={250}\r\n            />\r\n\r\n            <div style={{marginTop : \" 10px\"}} className={\"IssuesSelectinput\"}>\r\n                <IssuesSelectInput  Issues={props.Issues}\r\n                                    {...IssueInput.bind}\r\n                                    width={250}\r\n                />\r\n            </div>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <StopIcon style={{marginTop : \"5px\", width: \"50px\",\r\n                            height: \"50px\",backgroundColor : red[400],borderRadius : \"100%\",color : red[50]}} />\r\n                    </div>\r\n                    <div style={{paddingLeft : \"5px\"}} className=\"controlButtons\" onClick={toggle}>\r\n                        {isActive ?\r\n                            <PauseCircleFilledIcon style={{width: \"60px\", height: \"60px\"}} color={\"primary\"} />\r\n                            : <PlayButton style={{width: \"60px\", height: \"60px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n    Issues : string[]\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>props.AddWorklog()\r\n\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n\r\n            <div className={TTS.strokeVert}> </div>\r\n\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                             Issues={props.Issues}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}> </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {\r\n                    //@ts-ignore\r\n                    props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = { CurrentDate: TCurrentDate}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => SetShowDropDownCalendar(true)\r\n    const onHideDropDownCalendar = () => SetShowDropDownCalendar(false)\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n\r\n            <div className={CS.CalendarContent}>\r\n\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        {\r\n            ShowDropDownCalendar &&\r\n            <>\r\n                <div className={CS.bg} onClick={onHideDropDownCalendar}/>\r\n\r\n                <DropDownCalendarContainer/>\r\n            </>\r\n        }\r\n\r\n    </div>)\r\n}\r\n\r\nexport default React.memo(Calendar,(prevProps,nextProps)=>{\r\n    if(prevProps.CurrentDate !== nextProps.CurrentDate) return false\r\n    else return true\r\n})","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} >\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n\r\n                    <div>\r\n                        <NavLink onClick={props.OnFavoritesClick}  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n\r\n                    <div style={{paddingLeft:\".5rem\"}}>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"./All/All\";\r\nimport FavoritesButton from \"./Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n    return (<div className={AS.CalendarAndButtons}>\r\n\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import {useState} from \"react\"\r\n\r\ntype defFunc = ()=> void\r\n\r\nexport const useBooleanState = (initialValue : boolean) : {isDisplayed : boolean,Show : defFunc,Hide : defFunc}  => {\r\n    let [isDisplayed,SetIsOpen] =useState(initialValue)\r\n    const Show = ()=>{\r\n        SetIsOpen(true)\r\n    }\r\n    const Hide = ()=>{\r\n        SetIsOpen(false)\r\n    }\r\n    return{\r\n        isDisplayed,Show,Hide\r\n    }\r\n}\r\n","import React from 'react'\nimport EVS from \"./ElementsValidators.module.css\"\nimport {Field} from \"redux-form\";\nimport { makeStyles } from '@material-ui/core/styles/index';\nimport TextField from '@material-ui/core/TextField/index';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            color :\"#393939\"\n        }\n    },\n}));\n\nexport const FormInput = ({input,meta,...props}) =>{\n    const classes = useStyles();\n    return <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\n        <TextField  className={classes.root}  placeholder={props.placeholder}\n                    variant=\"outlined\" {...input} {...props}/>\n        {meta.error && meta.touched ?   <div style={{padding : \"1rem\",color : \"#b20400\"}}> {meta.error}</div> : \"\"}\n    </div>\n}\n\nexport const CreateField = (placeholder,name,validators,component,props ={},text =\"\") => {\n    return <div>\n        <Field placeholder={placeholder} name={name} validate={validators}\n               component={component}  {...props}/> {text}\n    </div>\n}","import React from \"react\"\n\nexport const required = (value) => {\n    if (value) {\n        return undefined\n    } else return <div>\n        This field is required\n    </div>\n}\n\nexport const PhoneNumber =(value)=>{\n    if(/^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/.test(value)) return undefined\n    else return <div>\n        Please,enter the correct phone number\n    </div>\n}\nexport const Email = (value)=>{\n    if(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]) |(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value)) return undefined\n    else return <div>Please,enter the correct email </div>\n}\nexport const PassMinLength = (value)=>{\n    if(value.length < 6) return <div> Password must be more then 6 symbols! </div>\n    else return undefined\n}\n\nexport const MaxLengthCreator = (MaxLengthValue) => (value) => {\n    if (value && value.length > MaxLengthValue) {\n        return `Maximal length is a ${MaxLengthValue} symbols`\n    } else return undefined\n}","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport CustomizedButton from \"../../CustomizedButton/CustomizedButton\"\nimport {CreateField, FormInput} from \"../../../assets/utils/ValidartorsComponents/ElementsValidators\"\nimport {required, Email} from \"../../../assets/utils/validators\"\nimport {reduxForm, InjectedFormProps} from \"redux-form\"\nimport {TLoginFormData} from \"./SignIn\";\n\nexport type TOwnProps = {\n    ComponentIsSignUp: () => void\n    authErr: string[]\n}\n\nconst SignInForm: React.FC<InjectedFormProps<TLoginFormData, TOwnProps> & TOwnProps> = (props) => {\n    return <form style={{paddingTop: \"1.5rem\", paddingRight: \"2rem\", paddingLeft: \"2rem\"}} onSubmit={props.handleSubmit}\n                 className={\"SignInFormContainer\"}>\n\n        <div style={{fontSize: \"1.512rem\", fontWeight: 500}} className=\"SignInFormHeader\">\n            Sign in\n        </div>\n\n\n        {\n            props.authErr.length > 0 &&\n            <div style={{color: \"#ea1f09\", fontSize: \"1.275rem\", padding: \"1rem\"}} className=\"SubmitAuthFormErr\">\n                <span>\n                    {props.authErr[0]}\n                </span>\n            </div>\n        }\n\n        <div className=\"SignInEmailInput\">\n            {CreateField(\"Enter your email\", \"email\", [required, Email],\n                FormInput, {label: \"email\", fullWidth: true, helperText: \"test@g.com - for tests\"})}\n        </div>\n\n        <div className=\"SignInPassWordInput\">\n            {CreateField(\"Enter your password\", \"password\", [required],\n                FormInput, {label: \"password\", type: \"password\", fullWidth: true, helperText: \"test - for tests\"})}\n        </div>\n\n        <div style={{paddingTop: \"1rem\"}} className=\"SignInControlButton\">\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\n\n                <Grid item>\n                    <CustomizedButton onClick={props.handleSubmit} text=\"enter\"\n                                      variant=\"contained\" bgColor=\"green\"\n                                      fontSize=\"1.11rem\"/>\n                </Grid>\n\n                <Grid item>\n                    <CustomizedButton onClick={props.ComponentIsSignUp} text=\"sign up\"\n                                      variant=\"contained\" bgColor=\"blue\" fontSize=\"1.11rem\"/>\n                </Grid>\n            </Grid>\n        </div>\n\n        {props.error\n            ?\n            <div style={{paddingTop: \"2rem\", paddingLeft: \"1.12rem\", fontSize: \"1.125rem\", color: \"#ea1f09\"}}>\n                {props.error}\n            </div>\n            : null\n        }\n    </form>\n}\n\nexport const SignInFormRedux = reduxForm<TLoginFormData, TOwnProps>({\n    form: 'loginForm',\n})(SignInForm);","import React,{useState} from \"react\"\r\nimport {SignInFormRedux} from \"./SignInForm\"\r\nimport {useHistory} from 'react-router-dom'\r\n\r\ntype TSignInProps={\r\n    ComponentIsSignUp:()=>void\r\n    onAuth:()=>void\r\n}\r\nexport type TLoginFormData={\r\n    email:string,\r\n    password : string\r\n}\r\nconst SignIn:React.FC<TSignInProps> = props => {\r\n    const history=useHistory()\r\n    const [authErr,setAuthErr] = useState<string[]>([])\r\n    const handleSubmit = (formData : TLoginFormData) => {\r\n        if (formData.email === \"test@g.com\" && formData.password === \"test\") {\r\n            localStorage.setItem(\"IsAuth\", \"true\")\r\n            props.onAuth()\r\n            history.replace(\"/\")\r\n        }else setAuthErr([...authErr,\"incorrect email or password\"])\r\n    }\r\n\r\n    return <div className=\"SignInContainer\">\r\n        <SignInFormRedux onSubmit={handleSubmit} ComponentIsSignUp={props.ComponentIsSignUp} authErr={authErr}/>\r\n    </div>\r\n}\r\n\r\nexport default SignIn","import React from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\nimport CustomizedButton from \"../../CustomizedButton/CustomizedButton\"\nimport {CreateField, FormInput} from \"../../../assets/utils/ValidartorsComponents/ElementsValidators\"\nimport {required, Email, PassMinLength} from \"../../../assets/utils/validators\"\nimport DoneIcon from '@material-ui/icons/Done'\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TSignUpFormData} from \"./SignUp\";\n\ntype TOwnProps={\n    ComponentIsSignIn :()=>void\n}\n\nconst SignUpForm: React.FC<InjectedFormProps<TSignUpFormData, TOwnProps> & TOwnProps> = (props) => {\n    return <form style={{paddingTop: \"1.5rem\",paddingRight:\"2rem\",paddingLeft:\"2rem\"}}  className=\"SignUpFormContainer\"\n                 onSubmit={props.handleSubmit}>\n\n        <div style={{fontSize: \"1.512rem\", fontWeight: 500}} className=\"SignUpFormHeader\">\n            Sign up\n        </div>\n\n        <div className=\"SignUpFormNameInput\">\n            {CreateField(\"Enter your name\", \"name\", [required],\n                FormInput, {label: \"name\", fullWidth: true})}\n        </div>\n\n        <div className=\"SignUpFormEmailInput\">\n            {CreateField(\"Enter your email\", \"email\", [required, Email],\n                FormInput, {label: \"email\", fullWidth: true})}\n        </div>\n\n        <div className=\"SignUpFormPassWordInput\">\n            {CreateField(\"Enter your password\", \"password\", [required, PassMinLength],\n                FormInput, {\n                    label: \"password\", fullWidth: true,\n                    type: \"password\", helperText: \"password must be more then 6 letters\"\n                })}\n        </div>\n\n        <div style={{paddingTop: \"1rem\"}} className=\"SignUpControlButtonsContainer\">\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\n                <Grid item>\n                    <CustomizedButton onClick={props.handleSubmit} text=\"complete\"\n                                      variant=\"contained\" bgColor=\"purple\"\n                                      fontSize=\"1.11rem\" startIcon={<DoneIcon/>}/>\n                </Grid>\n                <Grid item>\n                    <CustomizedButton onClick={props.ComponentIsSignIn} text=\"sign in\"\n                                      variant=\"contained\" bgColor=\"teal\"\n                                      fontSize=\"1.11rem\"/>\n                </Grid>\n            </Grid>\n        </div>\n\n        {props.error\n            ?\n            <div style={{paddingTop:\"2rem\",paddingLeft:\"1.12rem\", fontSize: \"1.125rem\", color: \"#ea1f09\"}}>\n                {props.error}\n            </div>\n            : null\n        }\n    </form>\n}\n\nexport const SignUpFormRedux = reduxForm<TSignUpFormData,TOwnProps>({form: 'SignUpForm'})(SignUpForm)\n","import React from \"react\"\r\nimport {SignUpFormRedux} from \"./SignUpForm\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\ntype TSignUpProps={\r\n    ComponentIsSignIn:()=>void\r\n    ShowSnackBar : TShowSnackBar\r\n}\r\nexport type TSignUpFormData={\r\n    email:string,\r\n    password : string\r\n    name : string\r\n}\r\n\r\nexport const SignUp : React.FC<TSignUpProps> = (props) => {\r\n    const handleSubmit = (formData: TSignUpFormData) => {\r\n        props.ShowSnackBar({message: \"Account was create. Check your email!\",severity:\"success\",position:{\r\n                vertical:\"top\",horizontal:\"center\"\r\n            }})\r\n        console.log(formData)\r\n    }\r\n\r\n    return <div   className=\"SignUpContainer\">\r\n        <SignUpFormRedux onSubmit={handleSubmit} ComponentIsSignIn={props.ComponentIsSignIn} />\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\nimport LS from \"./AuthModal.module.css\";\r\nimport {SignUp} from \"./SignUp/SignUp\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\ntype TAuthPageProps = {\r\n    ShowSnackBar: TShowSnackBar\r\n    onAuth: () => void\r\n    onUnAuth: () => void\r\n}\r\n\r\n\r\nconst AuthPage: React.FC<TAuthPageProps> = (props) => {\r\n    const [ComponentToDraw, SetComponentToDraw] = useState(\"login\")\r\n    const ComponentIsSignIn = () => SetComponentToDraw(\"login\")\r\n    const ComponentIsSignUp = () => SetComponentToDraw(\"registration\")\r\n    return <div className={LS.modal}>\r\n        {\r\n            ComponentToDraw === \"login\"\r\n                ? <SignIn ComponentIsSignUp={ComponentIsSignUp} onAuth={props.onAuth}/>\r\n                : <SignUp ComponentIsSignIn={ComponentIsSignIn} ShowSnackBar={props.ShowSnackBar}/>\r\n        }\r\n    </div>\r\n}\r\nexport default (AuthPage)\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport type TSnackBarOptions = {\r\n    HideDuration? : number\r\n    severity : \"error\" | \"info\" | \"warning\" | \"success\"\r\n    position : {\r\n        vertical : \"bottom\" | \"top\"\r\n        horizontal : \"left\" | \"right\" | \"center\"\r\n    }\r\n    message : string\r\n}\r\nexport type TSnackBarProps = {\r\n    isShowing : boolean\r\n    onHide : (event?: React.SyntheticEvent, reason?: string) => void\r\n    options : TSnackBarOptions\r\n}\r\nconst  SnackBar : React.FC<TSnackBarProps>= (props)=> {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar  open={props.isShowing} autoHideDuration={props.options.HideDuration ? props.options.HideDuration : 3000}\r\n                      onClose={props.onHide} anchorOrigin={props.options.position}>\r\n\r\n                <Alert onClose={props.onHide} severity={props.options.severity}>\r\n                    {props.options.message}\r\n                </Alert>\r\n\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default React.memo(SnackBar,(prevProps,nextProps)=>{\r\n    if(prevProps.isShowing !== nextProps.isShowing) return false\r\n    else  return true\r\n})","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function Progress() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n}","import React, {Suspense} from \"react\"\r\nimport Progress from \"../../../Components/Progress/Progress\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <Suspense fallback={<Progress/>}>\r\n            <WrappedComponent {...props}/>\r\n        </Suspense>\r\n    }\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport MaterialNav from \"./Components/NavBar/MaterialNavBar\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport AS from \"./App.module.css\"\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport {\n    ChangeIssue, AddIssue, DeleteIssue, SetIssues, SetCompletedIssues,\n    TAddIssue, TChangeIssue, TDeleteIssue, TSetIssues, TSetCompletedIssues\n} from \"./Data/IssuesReducer\";\nimport {useBooleanState} from \"./Components/hooks/useBooleanState\";\nimport AuthPage from \"./Components/Auth/AuthPage\";\nimport SnackBar, {TSnackBarOptions} from \"./Components/SnackBar/SnackBar\";\nimport {withSuspense} from \"./assets/utils/withSuspense/withSuspense\";\n\n//////////////////////////// lazy loading ////////////////////////////////////////\nconst Issues = React.lazy(() => import(\"./Components/Issues/Issues\"))\nconst Favorites = React.lazy(() => import(\"./Components/CalendarAndControllButtons/Favorites/FavoritesPage\"))\nconst ChangeWorklogModalContainer = React.lazy(() => import(\"./Components/ChangeWorklogModal/ChangeWorklogModalContainer\"))\nconst ModalUserProfile = React.lazy(() => import(\"./Components/UserProfile/ModalUserProfile\"))\nconst SuspendedIssues = withSuspense(Issues)\nconst SuspendedFavorites = withSuspense(Favorites)\nconst SuspendedChangeWorklogModalContainer = withSuspense(ChangeWorklogModalContainer)\nconst SuspendedModalUserProfile = withSuspense(ModalUserProfile)\n//////////////////////////// lazy loading ////////////////////////////////////////\n\nexport type TAppOwnProps = {}\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    CompletedIssues: Array<string>\n    Issues: string[]\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue: TAddIssue\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    SetIssues: TSetIssues\n    SetCompletedIssues: TSetCompletedIssues\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\nexport type TShowSnackBar = (SnackBarOptions: TSnackBarOptions) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n    const [, setIsAuth] = useState<boolean | null>(null)\n    const WorklogChangeModalIsOpen = useBooleanState(false)\n    const FavoritesIsClicked = useBooleanState(false)\n    const UserProfileIsShowing = useBooleanState(false)\n    const [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    const SnackBarState = useBooleanState(false)\n    const [SnackBarOptions, SetSnackBarOptions] = useState<TSnackBarOptions>({\n        message: \"something goes wrong\",\n        HideDuration: 3000,\n        position: {horizontal: \"center\", vertical: \"bottom\"},\n        severity: \"error\"\n    })\n\n    const OnSetTimerData = (TimerData: TTimerData | undefined) => SetTimerData(TimerData)\n    const onAuth = () => setIsAuth(true)\n    const onUnAuth = () => setIsAuth(false)\n\n    const ShowSnackBar = (SnackBarOptions: TSnackBarOptions) => {\n        SnackBarState.isDisplayed && SnackBarState.Hide()\n        SetSnackBarOptions(SnackBarOptions)\n        SnackBarState.Show()\n    }\n    const HideSnackBar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        SnackBarState.Hide()\n    }\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Switch>\n                        <Route exact path='/'\n                               render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                        <div className=\"MainAppWrapper\">\n                            <MaterialNav OpenUserProfile={UserProfileIsShowing.Show} onUnAuth={onUnAuth}/>\n\n                            <Route exact path='/Issues'\n                                   render={() => <SuspendedIssues Issues={props.Issues}\n                                                                  AddIssue={props.AddIssue}\n                                                                  ChangeIssue={props.ChangeIssue}\n                                                                  DeleteIssue={props.DeleteIssue}\n                                                                  CompletedIssues={props.CompletedIssues}\n                                                                  SetIssues={props.SetIssues}\n                                                                  SetCompletedIssues={props.SetCompletedIssues}\n                                   />}/>\n\n                            <Route path='/Home'\n                                   render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                       <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                                  OnAllClicked={FavoritesIsClicked.Hide}\n                                                                  OnFavoritesClick={FavoritesIsClicked.Show}\n                                                                  CurrentDate={props.CurrentDate}\n                                       />\n                                   </div>}/>\n\n                            <div className={AS.MainWrapper}>\n                                <div className=\"WorklogsLayout\">\n\n                                    <Route exact path='/Home/All'\n                                           render={() => <div className=\"WorkLogBlock\">\n                                               <div className=\"Worklogs\">\n                                                   <WorkLogsContainer TimerData={TimerData}\n                                                                      openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                      ComponentToDraw={\"Worklogs\"}\n                                                                      ShowSnackBar={ShowSnackBar}\n                                                                      closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                                                      SetTimerData={OnSetTimerData}\n                                                                      WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                                   />\n                                               </div>\n                                           </div>\n                                           }/>\n                                    <Route exact path='/Home/Favorites'\n                                           render={() => <SuspendedFavorites\n                                               FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                               WorklogsBlocks={props.WorklogsBlocks}\n                                               openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                               TimerData={TimerData}\n                                               AddWorklog={props.AddWorklog}\n                                               PlayingWorklog={props.PlayingWorklog}\n                                               FavoritesWorklog={props.FavoritesWorklog}\n                                               SetTimerData={OnSetTimerData}\n                                               ShowSnackBar={ShowSnackBar}\n                                               closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                               WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                               ComponentToDraw=\"FavoritesWorklogs\"\n                                           />}/>\n\n                                </div>\n\n                                <div className=\"TimeTrackingLayout\">\n\n                                    <Route path='/Home'\n                                           render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                               <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                             FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                             SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                             AddWorklog={props.AddWorklog}\n                                                             SetTimerData={OnSetTimerData}\n                                                             openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                             ChangeWorklog={props.ChangeWorklog}\n                                                             Issues={props.Issues}\n                                               />\n                                           </div>}/>\n                                </div>\n\n                            </div>\n\n                            <SuspendedChangeWorklogModalContainer\n                                SetTimerData={OnSetTimerData}\n                                WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                TimerData={TimerData}\n                                Issues={props.Issues}\n                            />\n\n                            <SuspendedModalUserProfile IsOpen={UserProfileIsShowing.isDisplayed}\n                                                       Hide={UserProfileIsShowing.Hide}/>\n                        </div>\n                    </Switch>\n                </>\n                : <AuthPage onAuth={onAuth} onUnAuth={onUnAuth} ShowSnackBar={ShowSnackBar}/>\n            }\n            <SnackBar isShowing={SnackBarState.isDisplayed} onHide={HideSnackBar} options={SnackBarOptions}/>\n        </div>\n\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues: state.IssuesData.Issues,\n    CompletedIssues: state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById, ChangeWorklog, AddWorklog, AddToFavorite,\n        ChangeIssue, AddIssue, DeleteIssue, SetCompletedIssues, SetIssues\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\nconst SET_ISSUES = \"ISSUES/SET_ISSUES\"\r\nconst SET_COMPLETED_ISSUES = \"ISSUES/SET_COMPLETED_ISSUES\"\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Meeting\", \"QA\",\r\n        \"API Middleware\", \"Amendment\", \"Branding\", \"Profit increase\", \"Project Design\",\"Customer\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue>\r\n    | ReturnType<TChangeIssue> | ReturnType<TSetIssues> | ReturnType<TSetCompletedIssues>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SET_ISSUES :{\r\n            return {\r\n                ...state,\r\n                Issues: action.Issues\r\n            }\r\n        }\r\n        case SET_COMPLETED_ISSUES :{\r\n            return {\r\n                ...state,\r\n                CompletedIssues: action.CompletedIssues\r\n            }\r\n        }\r\n\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issue\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssue\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  SetIssues = (Issues : string[]) =>{\r\n    return{type : SET_ISSUES, Issues } as const\r\n}\r\nexport type TSetIssues = typeof SetIssues\r\n\r\nexport const  SetCompletedIssues = (CompletedIssues : string[]) =>{\r\n    return{type : SET_COMPLETED_ISSUES, CompletedIssues } as const\r\n}\r\nexport type TSetCompletedIssues = typeof SetCompletedIssues\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","\r\n\r\nexport const ToFullTime = (value,hours) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n\r\n         return  `${ToFullTime(CurrentHours - hours) === 24? \"00\" : ToFullTime(CurrentHours - hours)}:${ToFullTime(CurrentMinutes - minutes)}`\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","const days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = () => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    return {\r\n        DayName,\r\n        CurrentYear,\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__CZPxc\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__2CwNk\",\"item\":\"Favorites_item__3AZR3\",\"ActiveItem\":\"Favorites_ActiveItem__1WRgW\",\"FavoritesText\":\"Favorites_FavoritesText__3YH1W\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3vOLp\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__2099c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};"],"sourceRoot":""}