{"version":3,"sources":["assets/imgs/new_worklog_button.svg","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg","Components/NavBar/NavBar.module.css","Components/WorkLogs/WorkLog.module.css","Components/Calendar/Calendar.module.css","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/calendar.svg","Components/TimeTracking/TimeTracking.module.css","Components/ChangeWorklogModal/ModalWindow.module.css","Components/Favorites/Favorites.module.css","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","API/requests.ts","assets/secondary/GetCurrentDate.ts","Data/WorkLogsReducer.ts","Data/CalendarReducer.ts","Data/IssuesReducer.ts","Data/redux-store.ts","Components/NavBar/MaterialNavBar.tsx","assets/secondary/DifferenceInTime.js","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/secondary/CalculateTime.js","Components/ChangeWorklogModal/CustomInput.tsx","Components/Issues/IssuesSelectInput.tsx","Components/hooks/useInput.ts","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/Favorites/FavoritesPage.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/All/All.tsx","Components/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueLeftLabel.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ChangeWorklogModal/TimeSlider/TimeSlider.tsx","Components/ChangeWorklogModal/ChangeWorklogModal.tsx","Components/ChangeWorklogModal/ChangeWorklogModalContainer.tsx","Components/Issues/CustomListInput.tsx","Components/Issues/IssueListItem.tsx","Components/Issues/IssuesList.tsx","Components/Issues/Issues.tsx","Components/hooks/useBooleanState.ts","Components/Auth/AuthForm.tsx","Components/Auth/Login/SignIn.tsx","Components/Auth/Registartion/SignUp.tsx","Components/Auth/AuthPage.tsx","Components/SnackBar/SnackBar.tsx","App.tsx","index.tsx","App.module.css","Components/ChangeWorklogModal/TimeSlider/TimeSlider.module.css","Components/Auth/Login/LoginModal.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css","Components/DeleteConfirmModal/DeleteConfirm.module.css","Components/Timer/Timer.module.css","Components/All/All.module.css"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","API","WorklogData","post","response","data","days","months","GetCurrentDate","date","Date","CurrentYear","getFullYear","CurrentMonth","getMonth","CurrentDay","getDate","DayName","getDay","DEL_WORKLOG","CurrentDate","randomInteger","min","max","rand","Math","random","floor","DefaultState","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","id","Worklogs","StartTime","EndTime","TaskField","status","NestingItems","TimerValue","Issue","IsFavorites","PlayingWorklog","WorklogToChange","FavoritesWorklogs","AddWorklog","NewWorklog","type","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","WorkLogId","SetWorklogToChange","undefined","AddToFavorite","WorklogId","WorklogsReducer","state","action","GetWorklogsBlockCopy","JSON","parse","stringify","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","map","WorklogBlock","Index","Worklog","WLIndex","length","NestingItem","NestingIndex","EmptyWorklog","ParentId","WorklogToCreate","some","WBL","unshift","WB","filter","FWorklog","push","CNestingItem","FNestingItem","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","DelParentId","DelWorklogId","WL","WBLtrue","options","target","FavoritesWorklog","FavoritesWorklogsCopy","Nest","RandomStatus","arr","RangeError","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","Signature","DayNumber","DayStatus","n","p","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CalendarReducer","Day","Issues","CompletedIssues","IssuesReducer","GetIssuesCopy","From","CompletedIssue","IssuesCopy","findIndex","value","OldIssue","NewIssue","reducers","combineReducers","form","formReducer","CalendarData","WorklogsData","WorkLogsReducer","IssuesData","store","createStore","applyMiddleware","thunkMiddleWare","window","useStyles","makeStyles","theme","createStyles","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","sectionDesktop","sectionMobile","React","memo","classes","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","LogOut","localStorage","setItem","location","reload","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","renderMobileMenu","IconButton","color","aria-label","aria-controls","aria-haspopup","className","AppBar","position","Toolbar","HS","NavLinks","item","to","Tooltip","arrow","placement","edge","DifferenceInTime","differentRes","hours","minuts","TimesArr","firstDate","secondDate","string","split","different","round","abs","LineStroke","props","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","ContentContainer","ComponentToDraw","CurrentWorklog","ContainerEl","e","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","DeleteWorklogConfirmModal","isOpen","DS","modal","ModalTextContainer","NewWorklogControlButtonsContainer","NewWorklogControlButtons","DeleteModalParams","DeleteWorklog","DeleteFromFavorites","style","green","cursor","fontSize","marginLeft","MS","bg","NestingWorkLog","key","WorkLog","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","src","alt","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","transitionTimingFunction","transitionDuration","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","Fragment","width","height","borderRadius","Bar","now","WorklogInfo","CreateSnackBarOptions","severity","message","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","ShowSnackBar","SetWorklogStatus","every","ObjToSend","SendWorklogBlockThunk","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","toString","WorklogInfoContainer","el","WorkLogsContainer","this","WorklogsBlocks","paddingTop","Component","compose","connect","WorklogBlockData","dispatch","a","ToFullTime","Numbered","Number","parseInt","CalculateNewStartTime","CurrentTime","minutes","CurrentHours","CurrentMinutes","CustomInput","root","margin","TextField","onChange","label","placeholder","multiline","IssuesSelectInput","formControl","minWidth","Item","FormControl","InputLabel","htmlFor","Select","native","defaultValue","useInput","initialValue","setValue","bind","clear","forceUpdate","val","Timer","substr","seconds","setSeconds","setMinutes","setHours","isActive","setIsActive","WorklogInput","IssueInput","useEffect","interval","clearInterval","setInterval","TS","TimeRContainer","marginTop","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","backgroundColor","red","paddingLeft","TimeTracking","TTS","TTLayout","strokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","FavoritesPage","NoFavoritesIssuesContainer","FavoritesText","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","MonthName","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","StateCopy","getState","WorklogsBlockToBeScrolled","Month","document","getElementById","SearchWorklogBlock","SetClickedMonthDay","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","DropDownProgressStatus","text","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","Calendar","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","FavoritesTextContainer","OnFavoritesClick","pink","CalendarAndControlButtons","AS","CalendarAndButtons","RightLabel","LeftLabel","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","querySelectorAll","SliderWidth","getComputedStyle","SliderPoseStart","SliderPoseEnd","LeftMargin","RightMargin","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","step","ChangeWorklogModal","ModalWorklogInput","ModalIssueInput","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","EmptyWorklogTimerEndHours","getHours","getMinutes","EmptyWorklogTimeValues","close","preventDefault","closeWorklogChangeModal","WorklogChangeModalIsOpen","ModalTitle","ModalSlider","ModalTextFields","NewWorklogContentContainer","ModalInputError","Obj","NewWL","ChangeFavoritesWorklog","CloseButtonMargin","ChangeWorklogModalContainer","CustomListInput","AddIssueInput","Grid","innerWidth","container","Button","onSubmit","size","variant","SubmitButtonText","onCancel","CancelButtonText","IssueListItem","EditInputIsShowing","SetEditInputIsShowing","EditInputValue","labelId","ChangeIssue","sm","ListItem","role","button","handleToggle","ListItemIcon","Checkbox","checked","indexOf","tabIndex","disableRipple","inputProps","ListItemText","primary","blue","DeleteIssue","blueGrey","IssuesList","items","AddIssueOpened","SetAddIssueOpened","AddNewIssueInput","not","b","currentIndex","newChecked","splice","setChecked","numberOfChecked","Card","CardHeader","cardHeader","avatar","indeterminate","subheader","startIcon","AddIssue","Divider","List","list","dense","component","padding","palette","background","paper","overflow","paddingBottom","intersection","IssuesChecked","CompletedIssuesChecked","alignItems","direction","SetCompletedIssues","concat","SetIssues","useBooleanState","isDisplayed","SetIsOpen","Show","Hide","AuthForm","EmailInputValue","SetEmailInputValue","PasswordInputValue","SetPasswordInputValue","EmailErrText","SetEmailErrText","PasswordErrText","SetPasswordErrText","autoComplete","InputsContainer","error","helperText","PasswordContainer","xs","CustomErr","ConfirmButtonHandler","ConfirmButtonStyles","ConfirmButtonText","GoBackButtonHandler","GoBackButtonStyles","GoBackButtonText","SignIn","AuthErr","SetAuthErr","EmailFieldValue","PasswordFieldValue","ComponentIsSignUp","SignUp","RegistrationErr","HideDuration","ComponentIsSignIn","AuthPage","SetComponentToDraw","Alert","elevation","SnackBar","Snackbar","isShowing","autoHideDuration","onHide","SnackBarIsShowing","SetSnackBarIsShowing","SnackBarOptions","SetSnackBarOptions","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","TImeTracking_and_Calendar","reason","ReactDOM","basename","process","AppContainer"],"mappings":"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","file":"static/js/main.0fd935b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLinks\":\"NavBar_NavLinks__22adz\",\"item\":\"NavBar_item__fYm3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"Issue\":\"WorkLog_Issue__34BO9\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__2RI0C\",\"bg\":\"ModalWindow_bg__8X2Z5\",\"ModalTitle\":\"ModalWindow_ModalTitle__3-dof\",\"ModalSlider\":\"ModalWindow_ModalSlider__3oV3v\",\"ModalTextFields\":\"ModalWindow_ModalTextFields__3ZTaV\",\"NewWorklogContentContainer\":\"ModalWindow_NewWorklogContentContainer__2fUp5\",\"NewWorklogContentTitle\":\"ModalWindow_NewWorklogContentTitle__3PjFx\",\"ModalInputError\":\"ModalWindow_ModalInputError__2Aqa5\",\"NewWorklogContentInput\":\"ModalWindow_NewWorklogContentInput__35xPA\",\"NewWorklogControlButtonsContainer\":\"ModalWindow_NewWorklogControlButtonsContainer__2gc4P\",\"NewWorklogControlButtons\":\"ModalWindow_NewWorklogControlButtons__1dXL9\",\"NewWorklogControlButton\":\"ModalWindow_NewWorklogControlButton__2ig_v\",\"CloseButtonMargin\":\"ModalWindow_CloseButtonMargin__zOi3Y\",\"NewWorklogSubmitButton\":\"ModalWindow_NewWorklogSubmitButton__RioTJ\",\"Err\":\"ModalWindow_Err__UprFu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__3VELL\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__dnGPa\",\"item\":\"Favorites_item__1W2Lk\",\"ActiveItem\":\"Favorites_ActiveItem__3T7aT\",\"FavoritesText\":\"Favorites_FavoritesText__2x9PR\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3tIde\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__BfuKk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","import axios from \"axios\";\r\nimport {TSendWorklogsData} from \"../Data/WorkLogsReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://localhost:5000/api/1.0/'\r\n})\r\n\r\n\r\nexport type TDefRes = {\r\n    resultCode : number\r\n    messages: Array<string>\r\n    data : any\r\n}\r\n\r\nexport const API = {\r\n    async SendWorklogBlock(WorklogData : TSendWorklogsData) {\r\n        const response = await instance.post<TDefRes>(`Worklogs`,WorklogData)\r\n        return response.data\r\n    }\r\n}\r\n\r\n","import {TCurrentDate} from \"../../Data/CalendarReducer\";\r\nconst days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = (): TCurrentDate => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    let CurrentDate: TCurrentDate = {\r\n        DayName,\r\n        CurrentYear,\r\n        //@ts-ignore\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n    return CurrentDate\r\n\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {API} from \"../API/requests\"\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241,\r\n            Issue: \"Meeting\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122,\r\n            Issue: \"QA\",\r\n            IsFavorites: false\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null,\r\n            Issue: \"Branding\",\r\n            IsFavorites: false\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127,\r\n                Issue: \"Project Design\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false,\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null,\r\n                Issue: \"Profit increase\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Project Design\",\r\n                    IsFavorites: false\r\n                }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Sun,October 4\",\r\n                SummaryStatus: \"danger\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 4\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412416,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"12:30\",\r\n                TaskField: \"Create request by API\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                TimerValue: \"02:30:00\",\r\n                id: 2131241241251217,\r\n                Issue: \"API Middleware\",\r\n                IsFavorites: false\r\n            }, {\r\n                StartTime: \"12:20\",\r\n                EndTime: \"13:40\",\r\n                TaskField: \"Fixed buttons positions\",\r\n                status: \"warning\",\r\n                TimerValue: \"01:20:00\",\r\n                id: 21312412551418,\r\n                NestingItems: null,\r\n                Issue: \"Amendment\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 1232132132419,\r\n                    TimerValue: \"01:30:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Profit increase\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512420,\r\n                    TimerValue: \"03:20:00\",\r\n                    NestingItems: null,\r\n                    Issue: \"Branding\",\r\n                    IsFavorites: false\r\n                }]\r\n        }, {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Set,October 3\",\r\n                SummaryStatus: \"ok\",\r\n                SummaryTime: \"08:00:00\",\r\n                id: 5\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                TaskField: \"Team standup\",\r\n                NestingItems: null,\r\n                status: \"ok\",\r\n                TimerValue: \"01:00:00\",\r\n                id: 31232175895321,\r\n                Issue: \"Meeting\",\r\n                IsFavorites: false\r\n            },\r\n                {\r\n                    StartTime: \"10:30\",\r\n                    EndTime: \"11:30\",\r\n                    TaskField: \"Meeting with QA\",\r\n                    status: \"ok\",\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:00:00\",\r\n                    id: 76967845623522,\r\n                    Issue: \"QA\",\r\n                    IsFavorites: false\r\n                }, {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:55\",\r\n                    TaskField: \"Meeting with costumer\",\r\n                    status: \"danger\",\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:55:00\",\r\n                    id: 12312434256623,\r\n                    Issue: \"Customer\",\r\n                    IsFavorites: false\r\n                }\r\n            ]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el => {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                status: \"danger\",\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n\r\n                if (WB.BlockInfo.BlockCreatedDate === CurrentDate) {\r\n\r\n                    if(Worklog.Issue === action.NewWorklog.Issue){\r\n\r\n                        if(Worklog.id !== action.NewWorklog.id){\r\n                            WB.Worklogs = WB.Worklogs.filter(FWorklog=>FWorklog.id !== action.NewWorklog.id)\r\n                            if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                                Worklog.NestingItems.map(NestingItem=>{\r\n                                    if(NestingItem.id === action.NewWorklog.id){\r\n                                        if(NestingItem.Issue === action.NewWorklog.Issue){\r\n                                            debugger\r\n                                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                            NestingItem.Issue = action.NewWorklog.Issue\r\n                                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                        }\r\n                                    } else Worklog.NestingItems?.push(action.NewWorklog)\r\n                                })\r\n                            } else {\r\n                                Worklog.NestingItems = [action.NewWorklog]\r\n                            }\r\n\r\n                        }else{\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.status = action.NewWorklog.status\r\n                        }\r\n                    }else {\r\n                        if(Worklog.id === action.NewWorklog.id){\r\n                            Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                            Worklog.Issue = action.NewWorklog.Issue\r\n                            Worklog.TaskField = action.NewWorklog.TaskField\r\n                            Worklog.StartTime = action.NewWorklog.StartTime\r\n                            Worklog.EndTime = action.NewWorklog.EndTime\r\n                            Worklog.status = action.NewWorklog.status\r\n                        }\r\n                        else if(Worklog.NestingItems && Worklog.NestingItems?.length > 0){\r\n                            Worklog.NestingItems.map(CNestingItem => {\r\n                                if(CNestingItem.id === action.NewWorklog.id && CNestingItem.Issue !== action.NewWorklog.Issue){\r\n                                    Worklog.NestingItems = Worklog.NestingItems?.filter(FNestingItem=>FNestingItem.id !== action.NewWorklog.id)\r\n                                    WB.Worklogs.push(action.NewWorklog)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog, ...Indexes} = FindWorklogById(action.WorklogId)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId) {\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                        }\r\n                    })\r\n                } else {\r\n                    FavoritesWorklog.TaskField = action.NewWorklog.TaskField\r\n                    FavoritesWorklog.Issue = action.NewWorklog.Issue\r\n                    FavoritesWorklog.StartTime = action.NewWorklog.StartTime\r\n                    FavoritesWorklog.EndTime = action.NewWorklog.EndTime\r\n                    FavoritesWorklog.TimerValue = action.NewWorklog.TimerValue\r\n                }\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId) {\r\n                                    NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                    NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                    NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                    NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                    NestingItem.Issue = action.NewWorklog.Issue\r\n                                }\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId) {\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                            }\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (WorkLogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG, WorkLogId, NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\nexport const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n\r\n    const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n    // if (SendNewMessageResult.resultCode === 0) {\r\n    //     dispatch(GetWorklogs(WorklogBlockId))\r\n    // }\r\n}\r\nexport type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport type TCalendars = {\r\n    January: TCalendar\r\n    February: TCalendar\r\n    March: TCalendar\r\n    April: TCalendar\r\n    May: TCalendar\r\n    June: TCalendar\r\n    July: TCalendar\r\n    August: TCalendar\r\n    September: TCalendar\r\n    October: TCalendar\r\n    November: TCalendar\r\n    December: TCalendar\r\n}\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\nexport type TCurrentDate = {\r\n    DayName : string\r\n    CurrentYear: number | string\r\n    CurrentMonth: keyof typeof DefaultState.Calendars\r\n    CurrentDay: number | string\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\nconst SET_ISSUES = \"ISSUES/SET_ISSUES\"\r\nconst SET_COMPLETED_ISSUES = \"ISSUES/SET_COMPLETED_ISSUES\"\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Meeting\", \"QA\",\r\n        \"API Middleware\", \"Amendment\", \"Branding\", \"Profit increase\", \"Project Design\",\"Customer\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue>\r\n    | ReturnType<TChangeIssue> | ReturnType<TSetIssues> | ReturnType<TSetCompletedIssues>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case SET_ISSUES :{\r\n            return {\r\n                ...state,\r\n                Issues: action.Issues\r\n            }\r\n        }\r\n        case SET_COMPLETED_ISSUES :{\r\n            return {\r\n                ...state,\r\n                CompletedIssues: action.CompletedIssues\r\n            }\r\n        }\r\n\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issue\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssue\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const  SetIssues = (Issues : string[]) =>{\r\n    return{type : SET_ISSUES, Issues } as const\r\n}\r\nexport type TSetIssues = typeof SetIssues\r\n\r\nexport const  SetCompletedIssues = (CompletedIssues : string[]) =>{\r\n    return{type : SET_COMPLETED_ISSUES, CompletedIssues } as const\r\n}\r\nexport type TSetCompletedIssues = typeof SetCompletedIssues\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issue\" | \"CompletedIssue\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport HS from \"./NavBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n            marginLeft: \"5%\",\r\n            color: \"#FFFFFF\",\r\n            cursor: \"pointer\"\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default React.memo(function MaterialNav(){\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n        handleMobileMenuClose();\r\n    };\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const LogOut = ()=>{\r\n        localStorage.setItem(\"IsAuth\",\"false\")\r\n        window.location.reload()\r\n    }\r\n\r\n    const menuId = 'primary-search-account-menu';\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                <IconButton color=\"inherit\">\r\n                    <SettingsIcon/>\r\n                </IconButton>\r\n\r\n                Settings\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton color=\"inherit\">\r\n                    <InfoIcon/>\r\n                </IconButton>\r\n                Info\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton onClick={LogOut} color=\"inherit\">\r\n                    <ExitToAppIcon/>\r\n                </IconButton>\r\n                Logout\r\n            </MenuItem>\r\n            <MenuItem onClick={handleProfileMenuOpen}>\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"primary-search-account-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <AccountCircle/>\r\n                </IconButton>\r\n                Profile\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <div className={HS.NavLinks}>\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Home/All\">\r\n                                Worklogs\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                        <div className={HS.item}>\r\n                            <NavLink to=\"/Issues/\">\r\n                                Issues\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className={classes.grow}/>\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Tooltip title=\"Settings\" arrow placement=\"bottom\">\r\n                            <IconButton color=\"inherit\">\r\n                                <SettingsIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                            <Tooltip title=\"Info\" arrow placement=\"bottom\">\r\n                                <IconButton color=\"inherit\">\r\n                                    <InfoIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        <Tooltip title=\"Logout\" arrow placement=\"bottom\">\r\n                            <IconButton onClick={LogOut} color=\"inherit\">\r\n                                <ExitToAppIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Profile\" arrow placement=\"bottom\">\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"account of current user\"\r\n                                aria-controls={menuId}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleProfileMenuOpen}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <AccountCircle/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </div>\r\n    );\r\n})","export const DifferenceInTime = (TimesArr = []) => {\r\n    let firstDate = TimesArr[0];\r\n    let secondDate = TimesArr[1];\r\n    let getDate = (string) => new Date(0, 0, 0, string.split(':')[0], string.split(':')[1]);\r\n    let different = (getDate(secondDate) - getDate(firstDate));\r\n    let differentRes, hours, minuts;\r\n    if (different > 0) {\r\n        differentRes = different;\r\n        hours = Math.floor((differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(((differentRes % 86400000) % 3600000) / 60000);\r\n    } else {\r\n        differentRes = Math.abs((getDate(firstDate) - getDate(secondDate)));\r\n        hours = Math.floor(24 - (differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(60 - ((differentRes % 86400000) % 3600000) / 60000);\r\n    }\r\n    if(minuts < 10 ){\r\n        minuts =  minuts + \"0\"\r\n    }\r\n    if (hours < 10) {\r\n        return \"0\" + hours + ':' + minuts + \":00\";\r\n    } else {\r\n        return hours + ':' + minuts + \":00\";\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    onHideMenu : ()=> void\r\n    OnDeleteModalOpen : (e : React.MouseEvent<HTMLElement>)=> void\r\n    SetDeleteModalParams : Dispatch<any>\r\n    ParentId ? : number\r\n    PlayingWorklog: TWorkLog | null\r\n    AddToFavorite : TAddToFavorite\r\n    WorklogId : number\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    Issue?: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    NestingIsShowing: boolean\r\n    BlockInfo?: TBlockInfo\r\n}\r\n\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e : React.MouseEvent<HTMLElement>)=>{\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog )\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)){\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId : props.WorklogId,\r\n                ParentId : props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () =>{\r\n        if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\"){\r\n            if(props.ParentId)  props.AddToFavorite(props.WorklogId)\r\n            else props.AddToFavorite(props.WorklogId)\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () =>{\r\n   if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\" ) {\r\n            let CurrentWorklog : TWorkLog = {\r\n                id: randomInteger(0, 10000),\r\n                TaskField: props.TaskField,\r\n                Issue: props.Issue,\r\n                StartTime: props.StartTime,\r\n                EndTime: props.EndTime,\r\n                NestingItems: props.NestingItems,\r\n                status: props.status,\r\n                TimerValue: \"00:00:00\",\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from \"react\";\r\nimport DS from \"./DeleteConfirm.module.css\"\r\nimport ConfirmButton from \"../../assets/imgs/confirmButton.svg\"\r\nimport DeclineButton from \"../../assets/imgs/declineButton.svg\"\r\nimport MS from \"../ChangeWorklogModal/ModalWindow.module.css\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { green } from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen : boolean\r\n    onClose: ()=> void\r\n    WorkLogToDeleteId : number\r\n    DeleteWorklog : TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams : TDeleteModalParams | undefined\r\n    ComponentToDraw : TComponentToDraw\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal : React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = (e: React.MouseEvent<HTMLElement>) => {\r\n        if(props.DeleteModalParams){\r\n           props.ComponentToDraw === \"Worklogs\"\r\n               ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId,props.DeleteModalParams.ParentId)\r\n               : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n        if (!props.isOpen) return null\r\n\r\n        return (\r\n            <div className=\"DeleteConfirmModal\">\r\n                <div className={DS.modal}>\r\n                    <div className={DS.ModalTextContainer}>\r\n                        Are you sure you want to delete the worklog?\r\n                    </div>\r\n                    <div className={DS.NewWorklogControlButtonsContainer}>\r\n                        <div className={DS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor : \"pointer\"}}  fontSize=\"large\" />\r\n                               {/* <img className={DS.NewWorklogSubmitButtonSize}\r\n                                     src={ConfirmButton} alt={\"submit\"}/>*/}\r\n                            </div>\r\n                            <div className=\"modal-close\">\r\n                                <ClearIcon onClick={props.onClose}  style={{cursor : \"pointer\", marginLeft : \"50px\"}}  fontSize=\"large\" color=\"action\" />\r\n                        {/*        <img onClick={props.onClose} className={DS.NewWorklogControlButton}\r\n                                     src={DeclineButton} alt={\"decline\"}/>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={MS.bg} onClick={e => props.onClose}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog, TDeleteFromFavorites, TDeleteWorklog, TNestingItem,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange, TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\n\r\n\r\nexport type TNestingWorkLogProps = {\r\n    NestingItems?: Array<TNestingItem> | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    ParentId?: number\r\n    id : number\r\n    SetDeleteModalParams: any\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst NestingWorkLog: React.FC<TNestingWorkLogProps> = (props) => {\r\n\r\n    return (<div className=\"NestedItem\">\r\n        {props.NestingItems?.map(NestingItem=>{\r\n            return(\r\n                <WorkLog {...props}\r\n                        key={NestingItem.id}\r\n                         StartTime={NestingItem.StartTime}\r\n                         EndTime={NestingItem.EndTime}\r\n                         TaskField={NestingItem.TaskField}\r\n                         TimerValue={NestingItem.TimerValue}\r\n                         status={NestingItem.status}\r\n                         id={NestingItem.id}\r\n                         ParentId={props.id}\r\n                         NestingItems={null}\r\n                         Issue={NestingItem.Issue}\r\n                         DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n            )})\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {\r\n    TSetIsPlayingWorklogById,\r\n    TNestingItem,\r\n    TWorkLog,\r\n    TDeleteWorklog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TAddWorklog, TBlockInfo, TDeleteFromFavorites, CurrentDate\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogProps = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    Issue?: string | null\r\n    id: number\r\n    IsFavorites? : boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    ParentId?: number\r\n\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    SetDeleteModalParams: Dispatch<any>\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => {\r\n        SetNestingIsShowing(true)\r\n    }\r\n\r\n    const OnHideNestingWorklogs = () => {\r\n        SetNestingIsShowing(false)\r\n    }\r\n    const OnShowMenu = () => {\r\n        SetShowMenu(true)\r\n    }\r\n    const OnHideMenu = () => {\r\n        SetShowMenu(false)\r\n    }\r\n\r\n    const onPlayButtonClicked = () => {\r\n    if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n        || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n        props.SetIsPlayingWorklogById(true, props.id,props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    }\r\n    const onStopButtonClicked = () => {\r\n        props.SetIsPlayingWorklogById(false, props.id)\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"NestingItems\", \"Issue\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return  (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                {\r\n                     <img className={props.PlayingWorklog?.id === props.id || ShowMenu? WLS.WorklogActiveBG :WLS.WorklogBG}\r\n                          src={WorklogActiveBG} alt=\"\"/>\r\n                }\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {props.NestingItems && props.NestingItems.length > 0\r\n                            ? <div className={WLS.NestingButtonPose}>\r\n                                {NestingIsShowing\r\n                                    ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                        className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                    </div>\r\n\r\n                                    : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}> <span\r\n                                        className={WLS.TwwContentText}>\r\n                                {props.NestingItems.length}\r\n                            </span>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            : props.StartTime && props.EndTime ? <div className={WLS.WorkTime}>\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.StartTime}\r\n                                    </div>\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.EndTime}\r\n                                    </div>\r\n                                </div>\r\n                                : <div> </div>}\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img style={{transitionTimingFunction : \"ease-out\", transitionDuration : \"0.3s\"}} src={props.status === \"ok\"\r\n                                ? CP_ok : props.status === \"warning\"\r\n                                    ? CP_warning : props.status === \"danger\"\r\n                                        ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.Issue}>\r\n                                {props.Issue}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div  className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu} className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreVerticalActive\r\n                                :WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       WorkLogToDeleteId={props.id} isOpen={props.DeleteModalIsOpen}\r\n                                       onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {ShowMenu && <WorkLogDropDown {...props}\r\n                                      onHideMenu={OnHideMenu}\r\n                                      WorklogId={props.id}\r\n                                      NestingIsShowing={NestingIsShowing}\r\n\r\n        />}\r\n\r\n        {NestingIsShowing &&  <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default React.memo(ProgressBar)","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate,\r\n    TBlockInfo,\r\n    TSendWorklogBlockThunk,\r\n    TSendWorklogsData,\r\n    TSetWorklogStatus,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport {TSnackBarOptions} from \"../../SnackBar/SnackBar\";\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n    const CreateSnackBarOptions =(severity : \"error\" | \"info\" | \"warning\" | \"success\",message : string)=>{\r\n        return {\r\n               message,\r\n               severity,\r\n                position : {\r\n                    vertical : \"bottom\",\r\n                    horizontal : \"right\"\r\n                }\r\n        } as TSnackBarOptions\r\n    }\r\n    const OnSendWorklogData = () : void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"Issue does not exist\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"warning\",\"Please, enter the worklog name\"))\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"something goes wrong\"))\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.ShowSnackBar(CreateSnackBarOptions(\"success\",\"your worklog successfully logged\"))\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            let ObjToSend: TSendWorklogsData = {\r\n                WorkLogsBlocks: {\r\n                    BlockInfo: props.BlockInfo,\r\n                    Worklogs: props.Worklogs\r\n                }\r\n            }\r\n            props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"success\",\"your worklog successfully logged\"))\r\n        }\r\n        else {\r\n            props.ShowSnackBar(CreateSnackBarOptions(\"error\",\"Issue does not exist\"))\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n                <div className={FS.DateTime}>\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n                </div>\r\n                {props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                    ? <BackupIcon style={{cursor : \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                onClick={OnSendWorklogData}\r\n                                className={FS.DownloadIcon}>\r\n                    </BackupIcon>\r\n\r\n                    : <BackupIcon color={\"disabled\"} fontSize={\"large\"}\r\n                                         className={FS.DownloadIcon}>\r\n                     </BackupIcon>\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {DifferenceInTime} from \"../../assets/secondary/DifferenceInTime\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo, TDeleteFromFavorites,\r\n    TDeleteWorklog,\r\n    TSendWorklogBlockThunk,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogStatus,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\n\r\nexport type TWorklogsBlockProps = {\r\n    BlockInfo?: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    AddToFavorite: TAddToFavorite\r\n    AddWorklog: TAddWorklog\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    ShowSnackBar: TShowSnackBar\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = (e: React.MouseEvent<HTMLElement>) => {\r\n        SetDeleteModalIsOpen(true)\r\n    }\r\n    const OnDeleteModalClose = () => {\r\n        SetDeleteModalIsOpen(false)\r\n    }\r\n\r\n    return (<>\r\n        {props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n        <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n            <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                         SummaryTime={props.BlockInfo.SummaryTime}\r\n                         SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                         Worklogs={props.Worklogs}\r\n                         SendWorklogBlockThunk={props.SendWorklogBlockThunk}\r\n                         BlockInfo={props.BlockInfo}\r\n                         ShowSnackBar={props.ShowSnackBar}\r\n                         SetWorklogStatus={props.SetWorklogStatus}\r\n            />\r\n        </div>\r\n        }\r\n\r\n        {\r\n                props[props.ComponentToDraw].map(el => {\r\n                    return <div key={el.id} className=\"worklog\">\r\n                        <WorkLog\r\n                            {...el}\r\n                            {...props}\r\n                            TimerValue={el.TimerValue\r\n                                ? el.TimerValue\r\n                                : el.StartTime && el.EndTime\r\n                                    ? DifferenceInTime([el.StartTime, el.EndTime])\r\n                                    : null}\r\n                            DeleteModalIsOpen={DeleteModalIsOpen}\r\n                            OnDeleteModalClose={OnDeleteModalClose}\r\n                            OnDeleteModalOpen={OnDeleteModalOpen}\r\n                            SetDeleteModalParams={SetDeleteModalParams}\r\n                            DeleteModalParams={DeleteModalParams}\r\n                            AddWorklog={props.AddWorklog}\r\n                            DeleteWorklog={props.DeleteWorklog }\r\n                            DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n                    </div>\r\n                })\r\n        }\r\n\r\n    </>)\r\n}\r\n\r\nexport default WorkLogsBlock","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite, SendWorklogBlockThunk,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TSendWorklogBlockThunk, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TShowSnackBar} from \"../../App\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\nexport type TWorkLogsContainerOwnProps = {\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    ShowSnackBar: TShowSnackBar\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\ntype TDialogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorkLogsContainerOwnProps\r\n\r\nclass WorkLogsContainer extends React.Component<TDialogsContainerProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {this.props.ComponentToDraw === \"Worklogs\"\r\n                    ? this.props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...this.props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...this.props}\r\n                            Worklogs={this.props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default compose(connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorkLogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog,\r\n    SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SendWorklogBlockThunk,SetWorklogStatus,DeleteFromFavorites\r\n}))\r\n    //@ts-ignore\r\n    (WorkLogsContainer)","\r\n\r\nexport const ToFullTime = (value,hours) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n\r\n         return  `${ToFullTime(CurrentHours - hours) === 24? \"00\" : ToFullTime(CurrentHours - hours)}:${ToFullTime(CurrentMinutes - minutes)}`\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport type TCustomInputProps = {\r\n    value : string\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>) =>void\r\n    placeholder : string\r\n    label : string\r\n    width : number\r\n}\r\n\r\nconst CustomInput: React.FC<TCustomInputProps> = (props) => {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                '& .MuiTextField-root': {\r\n                    margin: theme.spacing(1),\r\n                    width: props.width,\r\n                },\r\n            },\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n    return <div className={classes.root}>\r\n        <TextField\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            id=\"standard-textarea\"\r\n            label={props.label}\r\n            placeholder={props.placeholder}\r\n            multiline\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default CustomInput","import React, {ChangeEvent} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport type TIssuesSelectInputProps = {\r\n    Issues : string[]\r\n    onChange : (event:  React.ChangeEvent<{  value: unknown; }>  ) =>void\r\n    value? : string\r\n    width : number\r\n}\r\n\r\nconst IssuesSelectInput : React.FC<TIssuesSelectInputProps> = (props) =>{\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: props.width,\r\n            },\r\n            Item : {\r\n                color : \"#393a3a\",\r\n            }\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"grouped-native-select\">Issues</InputLabel>\r\n                <Select  value={props.value} onChange={props.onChange} native defaultValue=\"\" id=\"grouped-native-select\">\r\n                    <option value={\"no issue\"}> no issue </option>\r\n                    <optgroup label=\"Issues\">\r\n                        {props.Issues.map(Issue=>      <option key={Issue} className={classes.Item} value={Issue}>{Issue}</option>)}\r\n                    </optgroup>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IssuesSelectInput","import {useState, ChangeEvent} from \"react\"\r\n\r\ntype defFunc = () => void\r\n\r\nexport const useInput = (initialValue: string): {\r\n    bind: {\r\n        value: string,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    },\r\n    value: string,\r\n    clear: defFunc,\r\n    forceUpdate: (val: string) => void\r\n} => {\r\n\r\n    let [value, setValue] = useState(initialValue)\r\n\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const clear = () => {\r\n        setValue(\"\")\r\n    }\r\n\r\n    const forceUpdate = (val: string) => {\r\n        setValue(val)\r\n    }\r\n\r\n    return {\r\n        bind: {value, onChange},\r\n        value,\r\n        clear,\r\n        forceUpdate\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\nimport CustomInput from \"../ChangeWorklogModal/CustomInput\";\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport {red} from \"@material-ui/core/colors\"\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(false);\r\n    const WorklogInput= useInput(\"\")\r\n    const IssueInput = useInput(props.Issues ? props.Issues : \"\")\r\n\r\n\r\n\r\n    const toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer = () => {\r\n        props.openWorklogChangeModal()\r\n        setIsActive(!isActive)\r\n        let TimerData = {\r\n            TimerValue: ToFullTime(hours) + \":\" + ToFullTime(minutes) + \":\" + ToFullTime(seconds),\r\n            TimerIssue: IssueInput.value ? IssueInput.value : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInput.value ? WorklogInput.value : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <CustomInput {...WorklogInput.bind}\r\n                         label={\"Task Field\"}\r\n                         placeholder={\"Please, enter the task\"}\r\n                         width={250}\r\n            />\r\n\r\n            <div style={{marginTop : \" 10px\"}} className={\"IssuesSelectinput\"}>\r\n                <IssuesSelectInput  Issues={props.Issues}\r\n                                    {...IssueInput.bind}\r\n                                    width={250}\r\n                />\r\n            </div>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <StopIcon style={{marginTop : \"5px\", width: \"50px\",\r\n                            height: \"50px\",backgroundColor : red[400],borderRadius : \"100%\",color : red[50]}} />\r\n                    </div>\r\n                    <div style={{paddingLeft : \"5px\"}} className=\"controlButtons\" onClick={toggle}>\r\n                        {!isActive ?\r\n                            <PauseCircleFilledIcon style={{width: \"60px\", height: \"60px\"}} color={\"primary\"} />\r\n                            : <PlayButton style={{width: \"60px\", height: \"60px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n    Issues : string[]\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>{\r\n        props.AddWorklog()\r\n    }\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n            <div className={TTS.strokeVert}>\r\n                {/*<img src={StrokeVert} alt=\"stroke-vert\"/>*/}\r\n            </div>\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                             Issues={props.Issues}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}>\r\n                            {/*<img src={StrokeHoriz} alt=\"\"/>*/}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React from \"react\";\r\nimport TTS from \"../TimeTracking/TimeTracking.module.css\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\";\r\nimport {TAddWorklog, TTimerData, TWorkLog, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsContainer from \"../WorkLogs/WorkLogsContainer\";\r\n\r\nexport type TFavoritesPageProps = {\r\n    FavoritesIsClicked: boolean\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    TimerData: TTimerData | undefined\r\n    openWorklogChangeModal: () => void\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog : TWorkLog | null\r\n    FavoritesWorklog : Array<TWorkLog>\r\n}\r\n\r\nconst FavoritesPage: React.FC<TFavoritesPageProps> = (props) => {\r\n    const AddNewFavoritesWorklog = () =>{\r\n       !props.PlayingWorklog &&  props.AddWorklog(undefined,true)\r\n    }\r\n    return (<div>\r\n        {\r\n            props.FavoritesWorklog.length > 0\r\n                    ? <div className=\"Favorites-Worklogs\">\r\n                        <WorkLogsContainer TimerData={props.TimerData}\r\n                                           openWorklogChangeModal={props.openWorklogChangeModal}\r\n                                           ComponentToDraw={\"FavoritesWorklogs\"}/>\r\n                    </div>\r\n\r\n                    : <div className={FS.NoFavoritesIssuesContainer}>\r\n\r\n                        <div className={FS.FavoritesText}>\r\n                            There is no favorites issues yet\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"60px\"}} className={TTS.NewWorklog}>\r\n                            <div  className={TTS.NewWorklogButtonPose}>\r\n                                <img onClick={AddNewFavoritesWorklog} className={TTS.NewWorklogButtonSize}\r\n                                     src={NewWorklogButton}\r\n                                     alt=\"new_worklog_button\"/>\r\n                            </div>\r\n\r\n                            <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n\r\n                                <div className={TTS.NewWorklogButtonDescription}>\r\n                                    new favorite\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n    </div>)\r\n}\r\n\r\nexport default FavoritesPage","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = {\r\n    CurrentDate: TCurrentDate\r\n}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(true)\r\n    }\r\n    const onHideDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(false)\r\n    }\r\n\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n            <div className={CS.CalendarContent}>\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {ShowDropDownCalendar && <>\r\n            <div className={CS.bg}\r\n                 onClick={onHideDropDownCalendar}/>\r\n            <DropDownCalendarContainer/>\r\n        </>}\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Calendar","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} >\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n                    <div>\r\n                        <NavLink onClick={props.OnFavoritesClick}  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"../All/All\";\r\nimport FavoritesButton from \"../Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n    return (<div className={AS.CalendarAndButtons}>\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +75 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +15 + \"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect, Dispatch, SetStateAction} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {\r\n    TChangeFavoritesWorklog,\r\n    TChangeWorklog,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {green} from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\nimport IssuesSelectInput from \"../Issues/IssuesSelectInput\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nexport type TModalWindowProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    TimerData: TTimerData | undefined\r\n    ChangeWorklog: TChangeWorklog\r\n    WorklogToChange: TWorkLog | null\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n    Issues: string[]\r\n}\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowProps> = (props) => {\r\n\r\n    let ModalWorklogInput = useInput(props.WorklogToChange && props.WorklogToChange.TaskField ? props.WorklogToChange.TaskField : \"\")\r\n    let ModalIssueInput = useInput(props.WorklogToChange && props.WorklogToChange.Issue ? props.WorklogToChange.Issue : \"\")\r\n\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n\r\n\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let date = new Date()\r\n    let CurrentTime = ToFullTime(date.getHours()) + \":\" + ToFullTime(date.getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && ModalWorklogInput.forceUpdate(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && ModalIssueInput.forceUpdate(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && ModalWorklogInput.forceUpdate(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && ModalIssueInput.forceUpdate(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalWorklogInput.value.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalIssueInput.value.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalWorklogInput.value.length > 0\r\n            && ModalIssueInput.value.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalWorklogInput.value,\r\n                Issue: ModalIssueInput.value,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if (NewWL.IsFavorites) {\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            } else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            ModalWorklogInput.clear()\r\n            ModalIssueInput.clear()\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal();\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n        ModalWorklogInput.clear()\r\n        ModalIssueInput.clear()\r\n    }\r\n\r\n\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n    return (\r\n        <div className=\"timer-modal\">\r\n            <div className={MS.modal}>\r\n                <div className={MS.ModalTitle}>New worklog</div>\r\n                <div className={MS.ModalSlider}>\r\n\r\n                    {ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                    <TimeSlider value={ModalTimeLineValues}\r\n                                disabled={false}\r\n                                step={10}\r\n                                SetTimerValue={SetModalTimeLineValues}\r\n                    />\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                <form name=\"NewWorklogContent\" action=\"\">\r\n                    <div className={MS.ModalTextFields}>\r\n                        <div className={MS.NewWorklogContentContainer}>\r\n\r\n                            <CustomInput {...ModalWorklogInput.bind}\r\n                                         label={\"Task Field\"}\r\n                                         placeholder={\"Please, enter the task\"}\r\n                                         width={500}\r\n                            />\r\n\r\n                            {\r\n                                NewWorklogNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog name</div>\r\n                            }\r\n                            <div style={{marginTop : \"20px\"}} className=\"issue-select-input\">\r\n                                {\r\n                                    //@ts-ignore\r\n                                    <IssuesSelectInput Issues={props.Issues}\r\n                                        {...ModalIssueInput.bind}\r\n                                                       width={500}\r\n                                    />\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            {\r\n                                NewIssueNameIsFilled &&\r\n                                <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue name</div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={MS.NewWorklogControlButtonsContainer}>\r\n                        <div className={MS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor: \"pointer\"}} fontSize=\"large\"/>\r\n                            </div>\r\n                            <div className={MS.CloseButtonMargin}>\r\n                                <ClearIcon style={{cursor: \"pointer\"}} fontSize=\"large\" onClick={close} color=\"action\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeWorklogModal","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n// import {withRouter} from 'react-router-dom'\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange,ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    Issue : string[]\r\n\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog : TChangeFavoritesWorklog\r\n}\r\ntype TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nclass ChangeWorklogModalContainer extends React.Component<TModalWindowContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ChangeWorklogModal closeWorklogChangeModal={this.props.closeWorklogChangeModal}\r\n                                WorklogChangeModalIsOpen={this.props.WorklogChangeModalIsOpen}\r\n                                SetIsPlayingWorklogById={this.props.SetIsPlayingWorklogById}\r\n                                PlayingWorklog={this.props.PlayingWorklog}\r\n                                TimerData={this.props.TimerData}\r\n                                WorklogToChange={this.props.WorklogToChange}\r\n                                ChangeWorklog={this.props.ChangeWorklog}\r\n                                SetTimerData={this.props.SetTimerData}\r\n                                SetWorklogToChange={this.props.SetWorklogToChange}\r\n                                ChangeFavoritesWorklog={this.props.ChangeFavoritesWorklog}\r\n                                Issues={this.props.Issue}\r\n\r\n            />\r\n            )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default compose(connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog,ChangeFavoritesWorklog\r\n}))(ChangeWorklogModalContainer)","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value : string\r\n    classes : {AddIssueInput : string}\r\n    onChange : (event: React.ChangeEvent<HTMLInputElement>)=>void\r\n    onSubmit : ()=> void\r\n    onCancel : () => void\r\n    SubmitButtonText : string\r\n    CancelButtonText : string\r\n}\r\n\r\nconst CustomListInput : React.FC<TCustonListInputProps> = (props) =>{\r\n    return <div className={props.classes.AddIssueInput}>\r\n        <TextField\r\n            id=\"filled-multiline-flexible\"\r\n            label=\"New issue\"\r\n            multiline\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            placeholder=\"Please enter the new issue\"\r\n        />\r\n        <Grid style={window.innerWidth > 1400 ? {paddingTop : \"10px\",paddingLeft :\"15%\"}: {paddingTop : \"10px\"}} container>\r\n            <Grid item >\r\n                <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.SubmitButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n                <Button onClick={props.onCancel} style={{marginLeft : \"20%\"}} color={\"inherit\"} size={\"small\"} variant={\"contained\"} >\r\n                    {props.CancelButtonText}\r\n                </Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default CustomListInput","import React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    classes :any\r\n}\r\n\r\nconst IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const [EditInputIsShowing, SetEditInputIsShowing] = useState(false)\r\n    const EditInputValue = useInput('')\r\n\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue.value)\r\n        SetEditInputIsShowing(false)\r\n        EditInputValue.clear()\r\n    }\r\n    const onCancelInput = () =>{\r\n        SetEditInputIsShowing(false)\r\n    }\r\n\r\n\r\n\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputIsShowing\r\n                    ? <CustomListInput classes={props.classes} onSubmit={OnSaveNewValue}\r\n                             {...EditInputValue.bind} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container>\r\n\r\n                        <Grid item  sm={10}>\r\n                            <ListItem role=\"listitem\" button\r\n                                        //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item  sm={2}>\r\n\r\n                            <Grid style={{marginTop: \"11px\"}} container>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item sm={4}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => SetEditInputIsShowing(true)}\r\n                                                      style={{color: blue[400], cursor: \"pointer\", marginLeft: \"40%\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid item sm={4}>\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"40%\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\", marginLeft: \"90%\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IssueListItem","import React, {Dispatch, useState} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport IssueListItem from \"./IssueListItem\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\n\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    classes : any\r\n    checked : string[]\r\n    setChecked : Dispatch<any>\r\n    AddIssue : TAddIssue\r\n    DeleteIssue : TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nconst IssuesList : React.FC<TIssuesListProps> = (props) =>{\r\n\r\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\r\n    const AddNewIssueInput = useInput('')\r\n\r\n\r\n     const not = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) === -1);\r\n    }\r\n\r\n    const  intersection = (a: string[], b: string[]) => {\r\n        return a.filter((value) => b.indexOf(value) !== -1);\r\n    }\r\n\r\n\r\n    const  union = (a: string[], b: string[]) => {\r\n        return [...a, ...not(b, a)];\r\n    }\r\n\r\n    const handleToggle = (value: string) => () => {\r\n        const currentIndex = props.checked.indexOf(value);\r\n        const newChecked = [...props.checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        props.setChecked(newChecked);\r\n    }\r\n\r\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length;\r\n\r\n    const handleToggleAll = (items: string[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            props.setChecked(not(props.checked, items));\r\n        } else {\r\n            props.setChecked(union(props.checked, items));\r\n        }\r\n    }\r\n\r\n    const onShowAddIssueInput = () => {\r\n        SetAddIssueOpened(true)\r\n    }\r\n\r\n\r\n    const OnConfirmAddNewIssue = () => {\r\n        props.AddIssue(AddNewIssueInput.value)\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n    const OnCancelAddNewIssue = () => {\r\n        AddNewIssueInput.clear()\r\n        SetAddIssueOpened(false)\r\n    }\r\n\r\n    return  <Card>\r\n        <Grid container>\r\n            <Grid item sm={9}>\r\n                <CardHeader\r\n                    className={props.classes.cardHeader}\r\n                    avatar={\r\n                        <Checkbox\r\n                            onClick={handleToggleAll(props.items)}\r\n                            checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\r\n                            indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\r\n                            disabled={props.items.length === 0}\r\n                            inputProps={{'aria-label': 'all items selected'}}\r\n                        />\r\n                    }\r\n                    title={props.title}\r\n                    subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\r\n                />\r\n            </Grid>\r\n            <Grid item sm={3}>\r\n                {\r\n                    props.el === \"Issue\"\r\n                    && <div style={window.innerWidth < 1400 ?{paddingTop : \"10%\" }\r\n                    :window.innerWidth <1750 ?  {paddingTop : \"10%\",paddingLeft : \"15%\"}\r\n                    :{paddingTop : \"8%\",paddingLeft : \"30%\"}}>\r\n                        <Tooltip title=\"Create new issue\" arrow placement=\"top\">\r\n                            <Button onClick={onShowAddIssueInput} size=\"small\" color=\"secondary\"\r\n                                    variant={\"outlined\"} startIcon={<AddOutlinedIcon/>}>\r\n                                add issue\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                }\r\n            </Grid>\r\n\r\n        </Grid>\r\n        {\r\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput {...AddNewIssueInput.bind} classes={props.classes}\r\n                                                                       onSubmit={OnConfirmAddNewIssue}\r\n                                                                       onCancel={OnCancelAddNewIssue} SubmitButtonText={\"Add\"}\r\n                                                                       CancelButtonText={\"cancel\"}/>\r\n        }\r\n\r\n        <Divider/>\r\n\r\n        <List className={props.classes.list} dense component=\"div\" role=\"list\">\r\n            {props.items.map((value: string) => {\r\n                return  (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\r\n                                        handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\r\n                                        ChangeIssue={props.ChangeIssue} classes={props.classes}/>)\r\n\r\n            })}\r\n            <ListItem/>\r\n\r\n        </List>\r\n    </Card>\r\n}\r\n\r\nexport default IssuesList","import React, {useState} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Data/IssuesReducer\";\r\nimport IssuesList from \"./IssuesList\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"6%\",\r\n        },\r\n        cardHeader: {\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        list: {\r\n\r\n            width: window.innerWidth < 600 ? 300\r\n                : window.innerWidth < 900 ? 500\r\n                        :window.innerWidth < 1610 ? 600\r\n                        :window.innerWidth < 1800 ? 700\r\n                            : 800,\r\n            height : window.innerWidth < 600 ? 250\r\n                : window.innerWidth < 900 ? 400\r\n                    :window.innerWidth < 1200 ? 500\r\n                        :window.innerWidth < 1800 ? 650\r\n                            : 800\r\n            ,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        },\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n                width: window.innerWidth < 900 ? '15ch' : window.innerWidth < 1400 ? \"25ch\" : window.innerWidth < 1650\r\n                    ? \"30ch\" : \"45ch\"\r\n            },\r\n            paddingLeft: \"30%\",\r\n            paddingBottom: \"10px\"\r\n        }\r\n    }),\r\n)\r\n\r\nfunction not(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues : TSetIssues\r\n    SetCompletedIssues : TSetCompletedIssues\r\n}\r\n\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState<string[]>([]);\r\n\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked));\r\n        props.SetIssues(not(props.Issues, IssuesChecked));\r\n        setChecked(not(checked, IssuesChecked));\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked));\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked));\r\n        setChecked(not(checked, CompletedIssuesChecked));\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n                <Grid item>\r\n                    <IssuesList title={\"Issues\"} items={props.Issues}\r\n                                el={\"Issue\"} classes={classes}\r\n                                DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                                checked={checked} setChecked={setChecked}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedIssues}\r\n                            disabled={IssuesChecked.length === 0}\r\n                            aria-label=\"move selected right\"\r\n                            color={\"secondary\"}\r\n                        >\r\n                            &gt;\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedCompletedIssues}\r\n                            disabled={CompletedIssuesChecked.length === 0}\r\n                            aria-label=\"move selected left\"\r\n                            color={\"primary\"}\r\n                        >\r\n                            &lt;\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                                el={\"CompletedIssue\"} setChecked={setChecked}\r\n                                checked={checked} AddIssue={props.AddIssue}\r\n                                DeleteIssue={props.DeleteIssue} classes={classes}\r\n                                ChangeIssue={props.ChangeIssue}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Issues","import {useState} from \"react\"\r\n\r\ntype defFunc = ()=> void\r\n\r\nexport const useBooleanState = (initialValue : boolean) : {isDisplayed : boolean,Show : defFunc,Hide : defFunc}  => {\r\n    let [isDisplayed,SetIsOpen] =useState(initialValue)\r\n    const Show = ()=>{\r\n        SetIsOpen(true)\r\n    }\r\n    const Hide = ()=>{\r\n        SetIsOpen(false)\r\n    }\r\n    return{\r\n        isDisplayed,Show,Hide\r\n    }\r\n}\r\n","import React, {useState} from \"react\";\nimport LS from \"./Login/LoginModal.module.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ntype TRegistrationProps = {\n    ConfirmButtonHandler: (EmailInputValue : string, PasswordInputValue : string) => void\n    GoBackButtonHandler: () => void\n    ConfirmButtonText: string\n    GoBackButtonText: string\n    CustomErr : string | null\n    ConfirmButtonStyles :{\n        variant: \"contained\" | \"outlined\"  | \"text\"\n        color: \"primary\" | \"secondary\" | \"default\" | \"inherit\"\n    }\n    GoBackButtonStyles :{\n        variant: \"contained\" | \"outlined\"  | \"text\"\n        color: \"primary\" | \"secondary\" | \"default\" | \"inherit\"\n    }\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: 300,\n        },\n    },\n}));\n\nconst AuthForm: React.FC<TRegistrationProps> = (props) => {\n    const classes = useStyles();\n    const [EmailInputValue, SetEmailInputValue] = useState(\"\")\n    const [PasswordInputValue, SetPasswordInputValue] = useState(\"\")\n    const [EmailErrText, SetEmailErrText] = useState<string | null>()\n    const [PasswordErrText, SetPasswordErrText] = useState<string | null>()\n    const OnEmailFieldChange = (e: any) => SetEmailInputValue(e.target.value)\n    const OnPasswordFieldChange = (e: any) => SetPasswordInputValue(e.target.value)\n    const onConfirm = () => {\n        // this handler create for create validations to inputs and call prop confirm handler\n        if(EmailInputValue.length <1 || PasswordInputValue.length <1){\n            if(EmailInputValue.length < 1) SetEmailErrText(\"this field is required\")\n            else SetEmailErrText(null)\n            if(PasswordInputValue.length < 1) SetPasswordErrText(\"this field is required\")\n            else SetPasswordErrText(null)\n        }else{\n            if(props.CustomErr){\n                SetEmailErrText(props.CustomErr)\n                SetPasswordErrText(props.CustomErr)\n            }\n            else{\n                props.ConfirmButtonHandler(EmailInputValue,PasswordInputValue)\n                SetEmailInputValue(\"\")\n                SetPasswordInputValue(\"\")\n                SetEmailErrText(null)\n                SetPasswordErrText(null)\n            }\n        }\n\n    }\n    return <div className=\"AuthForm\">\n        <form className={classes.root} autoComplete=\"off\">\n            <div className={LS.InputsContainer}>\n                <div className=\"LoginInput\">\n\n                    <TextField\n                        onChange={OnEmailFieldChange}\n                        error={!!EmailErrText}\n                        id=\"standard-error-helper-text\"\n                        label=\"email\"\n                        value={EmailInputValue}\n                        placeholder=\"Please, enter the login\"\n                        helperText={EmailErrText}\n                    />\n\n                </div>\n\n                <div className={LS.PasswordContainer}>\n\n                    <TextField\n                        onChange={OnPasswordFieldChange}\n                        error={!!PasswordErrText}\n                        type={\"password\"}\n                        id=\"standard-error-helper-text\"\n                        label=\"password\"\n                        value={PasswordInputValue}\n                        placeholder=\"Please, enter the password\"\n                        helperText={PasswordErrText}\n                    />\n\n                </div>\n\n                <Grid container style={{paddingTop: \"50px\", paddingLeft: \"10px\"}}>\n                    <Grid item xs={12} sm={6}>\n                        <Button style={{width: \"120px\"}} onClick={onConfirm} variant={props.ConfirmButtonStyles.variant}\n                                color={props.ConfirmButtonStyles.color}>\n                            {props.ConfirmButtonText}\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button style={{width: \"120px\"}} onClick={props.GoBackButtonHandler}\n                                variant={props.GoBackButtonStyles.variant} color={props.GoBackButtonStyles.color}>\n                            {props.GoBackButtonText}\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </div>\n        </form>\n    </div>\n}\nexport default AuthForm","import React,{useState} from \"react\";\r\nimport AuthForm from \"../AuthForm\";\r\n\r\ntype TLoginProps = {\r\n    ComponentIsSignUp: () => void\r\n}\r\n\r\nconst SignIn: React.FC<TLoginProps> = (props) => {\r\n    const [AuthErr,SetAuthErr] = useState<string | null>(null)\r\n    const EmailHandler = (EmailFieldValue : string,PasswordFieldValue : string) => {\r\n        if (EmailFieldValue === \"test\" && PasswordFieldValue === \"test\") {\r\n            SetAuthErr(null)\r\n            localStorage.setItem(\"IsAuth\", \"true\")\r\n            window.location.reload()\r\n        }else{\r\n            SetAuthErr(\"incorrect login or password\")\r\n        }\r\n    }\r\n\r\n    return (<div className=\"SignInForm\">\r\n            <AuthForm ConfirmButtonHandler={EmailHandler} GoBackButtonHandler={props.ComponentIsSignUp}\r\n                      ConfirmButtonText={\"Login\"} GoBackButtonText={\"Sign up\"}\r\n                      ConfirmButtonStyles={{color:\"primary\",variant:\"contained\"}}\r\n                      GoBackButtonStyles={{color : \"secondary\",variant:\"outlined\"}}\r\n                      CustomErr={AuthErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignIn","import React, {useState} from \"react\";\r\nimport AuthForm from \"../AuthForm\";\r\nimport {TShowSnackBar} from \"../../../App\";\r\n\r\ntype TRegistrationProps = {\r\n    ComponentIsSignIn: () => void\r\n    ShowSnackBar: TShowSnackBar\r\n}\r\nconst SignUp: React.FC<TRegistrationProps> = (props) => {\r\n    const [RegistrationErr, SetRegistrationErr] = useState<string | null>(null)\r\n    const onSignUp = (EmailFieldValue: string, PasswordFieldValue: string) => {\r\n        // here will be request on server for make a new account\r\n        if (true) {\r\n            // check response from server , if ok - show confirm window, else - show error\r\n            props.ShowSnackBar({\r\n                position: {horizontal: \"center\", vertical: \"top\"},\r\n                HideDuration: 5000,\r\n                severity: \"success\",\r\n                message: \"account was created, please check your email\"\r\n            })\r\n        } else {\r\n            SetRegistrationErr(\"someErr\")\r\n        }\r\n    }\r\n    return <div className=\"SignUp\">\r\n        <AuthForm ConfirmButtonHandler={onSignUp} GoBackButtonHandler={props.ComponentIsSignIn}\r\n                  ConfirmButtonText={\"Confirm\"} GoBackButtonText={\"Sign in\"}\r\n                  ConfirmButtonStyles={{color: \"secondary\", variant: \"contained\"}}\r\n                  GoBackButtonStyles={{color: \"primary\", variant: \"outlined\"}}\r\n                  CustomErr={RegistrationErr}/>\r\n\r\n    </div>\r\n}\r\nexport default SignUp","import React,{useState} from \"react\";\r\nimport SignIn from \"./Login/SignIn\";\r\nimport LS from \"./Login/LoginModal.module.css\";\r\nimport SignUp from \"./Registartion/SignUp\";\r\nimport {TShowSnackBar} from \"../../App\";\r\ntype TAuthPageProps = {\r\n    ShowSnackBar: TShowSnackBar\r\n}\r\n\r\nconst AuthPage : React.FC<TAuthPageProps> = (props) =>{\r\n    const [ComponentToDraw,SetComponentToDraw] =useState(\"login\")\r\n    const ComponentIsSignIn = ()=>SetComponentToDraw(\"login\")\r\n    const ComponentIsSignUp =() => SetComponentToDraw(\"registration\")\r\n    return <div className=\"AuthWrapper\">\r\n            <div className={LS.modal}>\r\n                {\r\n                    ComponentToDraw === \"login\"\r\n                        ?  <SignIn ComponentIsSignUp={ComponentIsSignUp}\r\n                        />\r\n                        : <SignUp ComponentIsSignIn={ComponentIsSignIn} ShowSnackBar={props.ShowSnackBar}/>\r\n                }\r\n            </div>\r\n            <div className={LS.bg}/>\r\n    </div>\r\n}\r\nexport default AuthPage","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport type TSnackBarOptions = {\r\n    HideDuration? : number\r\n    severity : \"error\" | \"info\" | \"warning\" | \"success\"\r\n    position : {\r\n        vertical : \"bottom\" | \"top\"\r\n        horizontal : \"left\" | \"right\" | \"center\"\r\n    }\r\n    message : string\r\n}\r\nexport type TSnackBarProps = {\r\n    isShowing : boolean\r\n    onHide : (event?: React.SyntheticEvent, reason?: string) => void\r\n    options : TSnackBarOptions\r\n}\r\nconst  SnackBar : React.FC<TSnackBarProps>= (props)=> {\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar  open={props.isShowing} autoHideDuration={props.options.HideDuration ? props.options.HideDuration : 3000}\r\n                      onClose={props.onHide} anchorOrigin={props.options.position}>\r\n                <Alert onClose={props.onHide} severity={props.options.severity}>\r\n                    {props.options.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\nexport default SnackBar","import React, {useState} from 'react';\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport MaterialNav from \"./Components/NavBar/MaterialNavBar\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport AS from \"./App.module.css\"\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport FavoritesPage from \"./Components/Favorites/FavoritesPage\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport ChangeWorklogModalContainer from \"./Components/ChangeWorklogModal/ChangeWorklogModalContainer\";\n\nimport {\n    ChangeIssue,\n    AddIssue,\n    DeleteIssue,\n    SetIssues,\n    SetCompletedIssues,\n    TAddIssue,\n    TChangeIssue,\n    TDeleteIssue,\n    TSetIssues, TSetCompletedIssues\n} from \"./Data/IssuesReducer\";\nimport Issues from \"./Components/Issues/Issues\";\nimport {useBooleanState} from \"./Components/hooks/useBooleanState\";\nimport AuthPage from \"./Components/Auth/AuthPage\";\nimport SnackBar, {TSnackBarOptions} from \"./Components/SnackBar/SnackBar\";\n\nexport type TAppOwnProps = {}\n\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    CompletedIssues: Array<string>\n    Issues: string[]\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue: TAddIssue\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    SetIssues: TSetIssues\n    SetCompletedIssues: TSetCompletedIssues\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\n\nexport type TShowSnackBar = (SnackBarOptions: TSnackBarOptions) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n\n    const WorklogChangeModalIsOpen = useBooleanState(false)\n    let FavoritesIsClicked = useBooleanState(false)\n    let [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    let [SnackBarIsShowing, SetSnackBarIsShowing] = useState(false)\n    let [SnackBarOptions, SetSnackBarOptions] = useState<TSnackBarOptions>({\n        message: \"something goes wrong\",\n        HideDuration: 3000,\n        position: {horizontal: \"center\", vertical: \"bottom\"},\n        severity: \"error\"\n    })\n\n    const OnSetTimerData = (TimerData: TTimerData) => {\n        SetTimerData(TimerData)\n    }\n\n    const ShowSnackBar = (SnackBarOptions: TSnackBarOptions) => {\n        SnackBarIsShowing && SetSnackBarIsShowing(false)\n        SetSnackBarOptions(SnackBarOptions)\n        SetSnackBarIsShowing(true)\n    }\n\n    const HideSnackBar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        SetSnackBarIsShowing(false);\n    };\n\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                    <div className=\"MainAppWrapper\">\n                        <MaterialNav/>\n\n                        <Route exact path='/Issues'\n                               render={() => <Issues Issues={props.Issues}\n                                                     AddIssue={props.AddIssue}\n                                                     ChangeIssue={props.ChangeIssue}\n                                                     DeleteIssue={props.DeleteIssue}\n                                                     CompletedIssues={props.CompletedIssues}\n                                                     SetIssues={props.SetIssues}\n                                                     SetCompletedIssues={props.SetCompletedIssues}\n                               />}/>\n\n                        <Route path='/Home'\n                               render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                   <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                              OnAllClicked={FavoritesIsClicked.Hide}\n                                                              OnFavoritesClick={FavoritesIsClicked.Show}\n                                                              CurrentDate={props.CurrentDate}\n                                   />\n                               </div>}/>\n\n\n                        <div className={AS.MainWrapper}>\n                            <div className=\"WorklogsLayout\">\n\n                                <Route exact path='/Home/All'\n                                       render={() => <div className=\"WorkLogBlock\">\n                                           <div className=\"Worklogs\">\n                                               <WorkLogsContainer TimerData={TimerData}\n                                                                  openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                  ComponentToDraw={\"Worklogs\"}\n                                                                  ShowSnackBar={ShowSnackBar}\n                                                                  closeWorklogChangeModal={WorklogChangeModalIsOpen.Hide}\n                                                                  SetTimerData={SetTimerData}\n                                                                  WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                                               />\n                                           </div>\n                                       </div>\n                                       }/>\n\n                                <Route exact path='/Home/Favorites'\n                                       render={() => <FavoritesPage FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                                    WorklogsBlocks={props.WorklogsBlocks}\n                                                                    openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                                    TimerData={TimerData}\n                                                                    AddWorklog={props.AddWorklog}\n                                                                    PlayingWorklog={props.PlayingWorklog}\n                                                                    FavoritesWorklog={props.FavoritesWorklog}\n                                       />}/>\n\n                            </div>\n                            <Route path='/Home'\n                                   render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                       <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                     FavoritesIsClicked={FavoritesIsClicked.isDisplayed}\n                                                     SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                     AddWorklog={props.AddWorklog}\n                                                     SetTimerData={OnSetTimerData}\n                                                     openWorklogChangeModal={WorklogChangeModalIsOpen.Show}\n                                                     ChangeWorklog={props.ChangeWorklog}\n                                                     Issues={props.Issues}\n                                       />\n                                   </div>}/>\n                        </div>\n                        <ChangeWorklogModalContainer\n                            SetTimerData={SetTimerData}\n                            WorklogChangeModalIsOpen={WorklogChangeModalIsOpen.isDisplayed}\n                            closeWorklogChangeModal={() => WorklogChangeModalIsOpen.Hide()}\n                            TimerData={TimerData}\n                            Issue={props.Issues}\n                        />\n\n                    </div>\n\n                </>\n\n                : <AuthPage ShowSnackBar={ShowSnackBar}/>\n\n            }\n            <SnackBar isShowing={SnackBarIsShowing} onHide={HideSnackBar} options={SnackBarOptions}/>\n        </div>\n\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues: state.IssuesData.Issues,\n    CompletedIssues: state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById,\n        ChangeWorklog, AddWorklog, AddToFavorite,\n        ChangeIssue, AddIssue, DeleteIssue, SetCompletedIssues, SetIssues\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__2qgrf\",\"RightLabel\":\"TimeSlider_RightLabel__1VbVI\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__3S1BR\",\"LabelValue\":\"TimeSlider_LabelValue__3KC9y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"LoginModal_modal__7AKlV\",\"bg\":\"LoginModal_bg__1AAQD\",\"InputsContainer\":\"LoginModal_InputsContainer__1FoRz\",\"LoginContainer\":\"LoginModal_LoginContainer__1zvFn\",\"PasswordContainer\":\"LoginModal_PasswordContainer__2krJV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"DeleteConfirm_modal__NP0te\",\"bg\":\"DeleteConfirm_bg__2icmH\",\"ModalTextContainer\":\"DeleteConfirm_ModalTextContainer__2-EVO\",\"NewWorklogControlButtonsContainer\":\"DeleteConfirm_NewWorklogControlButtonsContainer__2Rt5s\",\"NewWorklogControlButtons\":\"DeleteConfirm_NewWorklogControlButtons__2JHii\",\"NewWorklogSubmitButtonSize\":\"DeleteConfirm_NewWorklogSubmitButtonSize__1d3dd\",\"NewWorklogControlButton\":\"DeleteConfirm_NewWorklogControlButton__3JXRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__2raAa\",\"AllButtonBg\":\"All_AllButtonBg__18uYw\",\"item\":\"All_item__2aEna\",\"ActiveItem\":\"All_ActiveItem__129Oh\"};"],"sourceRoot":""}