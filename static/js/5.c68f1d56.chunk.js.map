{"version":3,"sources":["Components/ChangeWorklogModal/TimeSlider/TimeSlider.module.css","Components/ChangeWorklogModal/TimeSlider/SliderValueLeftLabel.tsx","Components/ChangeWorklogModal/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ChangeWorklogModal/TimeSlider/TimeSlider.tsx","Components/ChangeWorklogModal/ChangeWorklogModalForm.tsx","Components/ChangeWorklogModal/ChangeWorklogModal.tsx"],"names":["module","exports","LeftLabel","props","className","LS","Label","style","display","StartTime","Position","left","offsetLeft","LabelImage","LabelValue","RightLabel","EndTime","right","offsetRight","findPosX","obj","curleft","offsetParent","x","TimeSlider","useState","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","document","querySelectorAll","el","SliderWidth","getComputedStyle","width","SliderPoseStart","SliderPoseEnd","Number","parseInt","substr","length","LeftMargin","RightMargin","useEffect","setTimerValues","value","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","onChange","step","start","end","ChangeWorklogModalReduxForm","reduxForm","form","paddingTop","paddingRight","paddingLeft","onSubmit","handleSubmit","CreateField","required","FormInput","label","fullWidth","IssuesFormInput","issues","container","direction","justify","alignItems","item","CustomizedButton","onClick","fontColor","bgColor","text","variant","fontSize","startIcon","onClose","error","color","React","memo","worklogToChange","useSelector","getWorklogToChange","getIssues","WFS","useWorklogsFunctions","parsedTimerDate","parseTimeStr","TimerValue","CurrentTime","ToFullTime","Date","getHours","getMinutes","EmptyWorklogTimeValues","CalculateNewStartTime","String","hours","minutes","timerValues","close","closeWorklogChangeModal","setWorklogToChange","setIsPlayingWorklogById","worklogChangeModalIsOpen","open","aria-labelledby","aria-describedby","id","initialValues","FormData","IsFavorites","changeFavoritesWorklog","changeWorklog","prevProps","nextProps"],"mappings":"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","file":"static/js/5.c68f1d56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"TimeSlider_Label__2XAEy\",\"LabelImage\":\"TimeSlider_LabelImage__3A7OL\",\"LabelValue\":\"TimeSlider_LabelValue__3KC9y\"};","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    StartTime : string | null | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nexport const LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n    return <div className={LS.Label}\r\n                style={{display : `${!props.StartTime &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +30 + \"px\"}` }}>\r\n            <div className={LS.LabelImage} />\r\n            <div className={LS.LabelValue}> {props.StartTime && props.StartTime && props.StartTime } </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    EndTime : string | null | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nexport const RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n    return <div className={LS.Label}\r\n                style={{ display : `${!props.EndTime && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +\"px\" }`}}>\r\n            <div className={LS.LabelImage} />\r\n            <div className={LS.LabelValue}> {props.EndTime && props.EndTime && props.EndTime } </div>\r\n    </div>\r\n}\r\n\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch, SetStateAction} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport {LeftLabel} from \"./SliderValueLeftLabel\";\r\nimport {RightLabel} from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\nimport {TTimerValues} from \"../ChangeWorklogModal\";\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled?: boolean\r\n    value: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    setTimerValues: Dispatch<SetStateAction<TTimerValues>>\r\n}\r\n\r\n\r\nexport const TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    const [LeftPose, SetLeftPose] = useState<number>()\r\n    const [RightPose, SetRightPose] = useState<number>()\r\n    const [LeftOffset, SetLeftOffset] = useState<number>()\r\n    const [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n        // SetLeftPose(el[0].getBoundingClientRect())\r\n        // SetRightPose(el[1].getBoundingClientRect())\r\n        let SliderWidth = getComputedStyle(slider[0], null).width\r\n        // slider start pose\r\n        let SliderPoseStart = findPosX(slider[0])\r\n        // get slider pose\r\n        let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n        //get offsets  for left and right labels\r\n        let LeftMargin = findPosX(el[0])\r\n        let RightMargin = findPosX(el[1])\r\n        SetLeftOffset(SliderPoseStart)\r\n        SetRightOffset(SliderPoseEnd)\r\n        SetLeftPose(LeftMargin)\r\n        SetRightPose(RightMargin)\r\n    }\r\n\r\n    useEffect(() => {\r\n             props.setTimerValues(props.value)\r\n            TimerButtonsInit()\r\n        }, [props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n       props.setTimerValues(time)\r\n    }\r\n\r\n    const changeCompleteHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"23:59\"}\r\n            minValue={props.minValue ? props.minValue : \"00:01\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={props.value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} StartTime={props.value?.start}/>\r\n        <RightLabel Position={RightPose} EndTime={props.value?.end} offsetRight={RightOffset}/>\r\n    </>);\r\n}\r\n","import React from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport {CustomizedButton} from \"../CustomElements/CustomizedButton/CustomizedButton\"\r\nimport {CreateField, FormInput, IssuesFormInput} from \"../../assets/utils/ValidartorsComponents/ElementsValidators\"\r\nimport {required} from \"../../assets/utils/validators\"\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport {TWorkLog} from \"../../Redux/WorkLogsReducer\";\r\n\r\ntype TOwnProps = {\r\n    onClose: () => void\r\n    issues : string[]\r\n}\r\n\r\nconst ChangeWorklogForm: React.FC<InjectedFormProps<TWorkLog | null, TOwnProps> & TOwnProps> = (props) => {\r\n    return <div style={{paddingTop: \"1.5rem\", paddingRight: \"2rem\", paddingLeft: \"2rem\"}}\r\n                 className=\"SignUpFormContainer\"\r\n                 onSubmit={props.handleSubmit}>\r\n\r\n        <div className=\"ChangeWorklogFormTaskFieldInput\">\r\n            {CreateField(\"Enter the task name\", \"TaskField\", [required], FormInput, {label: \"task name\", fullWidth: true})}\r\n        </div>\r\n\r\n        <div className=\"ChangeWorklogFormIssuesInput\">\r\n            {CreateField(\"chose issue\", \"Issue\", [required], IssuesFormInput,\r\n                {label: \"issues\", fullWidth: true,issues : props.issues})}\r\n        </div>\r\n\r\n        <div style={{paddingTop: \"1rem\"}} className=\"SignUpControlButtonsContainer\">\r\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\r\n                <Grid item>\r\n                    <CustomizedButton onClick={props.handleSubmit} fontColor=\"blue\" bgColor=\"white\" text=\"save\"\r\n                                      variant=\"outlined\" fontSize=\".9rem\" startIcon={<SaveIcon/>}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <CustomizedButton onClick={props.onClose} text=\"close\"\r\n                                      variant=\"outlined\" fontColor=\"blueGrey\" fontSize=\".9rem\"/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n        {props.error\r\n            ?\r\n            <div style={{paddingTop: \"2rem\", paddingLeft: \"1.12rem\", fontSize: \"1.125rem\", color: \"#ea1f09\"}}>\r\n                {props.error}\r\n            </div>\r\n            : null\r\n        }\r\n    </div>\r\n}\r\n\r\nexport const ChangeWorklogModalReduxForm = reduxForm<TWorkLog | null, TOwnProps>({form: 'ChangeWorklogModalForm'})(ChangeWorklogForm)\r\n","import React, {useEffect, useState,} from \"react\"\r\nimport {TimeSlider} from \"./TimeSlider/TimeSlider\"\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\"\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\"\r\nimport Grid from \"@material-ui/core/Grid/Grid\"\r\nimport { TWorkLog} from \"../../Redux/WorkLogsReducer\";\r\nimport {ChangeWorklogModalReduxForm} from \"./ChangeWorklogModalForm\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport {parseTimeStr} from \"../../assets/secondary/ParseTimeStr\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getWorklogToChange} from \"../../assets/utils/Selectors/WorklogsSelectors\";\r\nimport {getIssues} from \"../../assets/utils/Selectors/IssuesSelectors\";\r\nimport {useWorklogsFunctions} from \"../hooks/useWorklogsFunctions\";\r\n\r\n\r\nexport type TTimerValues = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\ntype TChangeWorklogModalProps ={\r\n    closeWorklogChangeModal: () => void\r\n    worklogChangeModalIsOpen: boolean\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TChangeWorklogModalProps> = (props) => {\r\n    const worklogToChange = useSelector(getWorklogToChange)\r\n    const issues = useSelector(getIssues)\r\n\r\n    const WFS = useWorklogsFunctions()\r\n\r\n    const parsedTimerDate =  parseTimeStr(worklogToChange?.TimerValue ? worklogToChange.TimerValue : \"00:00:00\")\r\n    const CurrentTime = ToFullTime(new Date().getHours()) + \":\" + ToFullTime(new Date().getMinutes())\r\n    const EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, String(parsedTimerDate.hours), String(parsedTimerDate.minutes)) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n    const [timerValues, setTimerValues] = useState<TTimerValues>({\r\n        start : \"08:00\",\r\n        end : \"22:00\"\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n            setTimerValues({\r\n                end: worklogToChange?.EndTime ? worklogToChange?.EndTime as string | null : EmptyWorklogTimeValues.end,\r\n                start: worklogToChange?.StartTime ? worklogToChange.StartTime  as string | null : EmptyWorklogTimeValues.start\r\n            })\r\n    }, [worklogToChange])\r\n\r\n\r\n    const close = () => {\r\n        props.closeWorklogChangeModal()\r\n        WFS.setWorklogToChange(null)\r\n        WFS.setIsPlayingWorklogById(false)\r\n    }\r\n\r\n    const handleSubmit = (FormData: TWorkLog | null) => {\r\n\r\n        if (worklogToChange) {\r\n            if (worklogToChange.IsFavorites) WFS.changeFavoritesWorklog(worklogToChange.id,\r\n                {...worklogToChange, ...FormData, ...{StartTime: timerValues.start, EndTime: timerValues.end}})\r\n            else WFS.changeWorklog({\r\n                ...worklogToChange, ...FormData, ...{\r\n                    StartTime: timerValues.start,\r\n                    EndTime: timerValues.end\r\n                }\r\n            })\r\n            WFS.setIsPlayingWorklogById(false, worklogToChange.id)\r\n            close()\r\n        }\r\n    }\r\n\r\n\r\n    if (!props.worklogChangeModalIsOpen) return null;\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.worklogChangeModalIsOpen}\r\n            onClose={props.closeWorklogChangeModal}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"New worklog\"}</DialogTitle>\r\n            <DialogContent>\r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n\r\n                    <Grid item className=\"TimeSLider\" style={{paddingTop: \"10%\"}}>\r\n                        <TimeSlider value={timerValues} step={10} setTimerValues={setTimerValues}/>\r\n                    </Grid>\r\n\r\n                    <Grid item style={{paddingTop: \"3rem\"}} className=\"Inputs\">\r\n                        <ChangeWorklogModalReduxForm initialValues={worklogToChange}\r\n                                                     onSubmit={handleSubmit} onClose={close} issues={issues}/>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </DialogContent>\r\n        </Dialog>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(ChangeWorklogModal, (prevProps, nextProps) => {\r\n    if (prevProps.worklogChangeModalIsOpen !== nextProps.worklogChangeModalIsOpen) return false\r\n    else return true\r\n})\r\n\r\n"],"sourceRoot":""}