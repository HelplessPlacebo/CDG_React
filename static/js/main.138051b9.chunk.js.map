{"version":3,"sources":["Components/WorkLogs/WorkLog.module.css","Components/Calendar/Calendar.module.css","assets/imgs/settings.svg","assets/imgs/door.svg","assets/imgs/avatar.svg","assets/imgs/play-button.svg","Components/LineStroke/LineStroke.module.css","assets/imgs/worklogMoreButtonBG.svg","assets/imgs/worklogMoreVertical.svg","assets/imgs/danger_cp.svg","assets/imgs/warning_cp.svg","assets/imgs/ok_cp.svg","assets/imgs/arrow-up.svg","assets/imgs/stop_button.svg","assets/imgs/ActiveWorklogBG.svg","assets/imgs/stroke_vert.svg","assets/imgs/stroke_horiz.svg","assets/imgs/new_worklog_button_shadowed.svg","assets/imgs/TT-stop-button.svg","assets/imgs/TT-pause-button.svg","assets/imgs/calendar.svg","Components/TimeTracking/TimeTracking.module.css","Components/ModalWindow/ModalWindow.module.css","Components/NavBar/NavBar.module.css","Components/Favorites/Favorites.module.css","Components/WorkLogs/WorklogInfo/WorklogInfo.module.css","Components/Tooltip/Tooltip.module.css","App.module.css","Components/ModalWindow/TimeSlider/TimeSlider.module.css","serviceWorker.ts","API/requests.ts","assets/secondary/GetCurrentDate.ts","Data/WorkLogsReducer.ts","Data/CalendarReducer.ts","Data/IssuesReducer.ts","Data/redux-store.ts","Components/NavBar/NavBar.tsx","assets/secondary/DifferenceInTime.js","Components/LineStroke/LineStroke.tsx","Components/WorkLogs/DropDown/WorklogDropDown.tsx","Components/DeleteConfirmModal/DeleteConfirmModal.tsx","Components/WorkLogs/NestingWorkLog.tsx","Components/WorkLogs/WorkLog.tsx","Components/ProgressBar/ProgressBar.tsx","Components/WorkLogs/WorklogInfo/WorklogInfo.tsx","Components/WorkLogs/WorkLogsBlock.tsx","Components/WorkLogs/WorkLogsContainer.tsx","assets/secondary/CalculateTime.js","Components/Timer/Timer.jsx","Components/TimeTracking/TimeTracking.tsx","Components/Favorites/FavoritesPage.tsx","Components/Calendar/CalendarDay.tsx","Components/Calendar/DropDownCalendarFooterElement.tsx","Components/Calendar/DropDownCalendar.tsx","Components/Calendar/DropDownCalendarContainer.tsx","Components/Calendar/Calendar.tsx","Components/All/All.tsx","Components/Favorites/FavoritesButton.tsx","Components/CalendarAndControllButtons/CalendarAndControlButtons.tsx","Components/ModalWindow/TimeSlider/SliderValueLeftLabel.tsx","Components/ModalWindow/TimeSlider/SliderValueRightLabel.tsx","assets/secondary/FindElementPose.js","Components/ModalWindow/TimeSlider/TimeSlider.tsx","Components/ModalWindow/ChangeWorklogModal.tsx","Components/ModalWindow/ChangeWorklogModalContainer.tsx","Components/LoginPage/LoginModal.tsx","Components/Tooltip/Tooltip.tsx","Components/Issues/Issues.tsx","App.tsx","index.tsx","Components/Timer/Timer.module.css","Components/WorkLogs/DropDown/WorklogDropDown.module.css","Components/LoginPage/LoginModal.module.css","Components/DeleteConfirmModal/DeleteConfirm.module.css","Components/All/All.module.css","assets/imgs/new_worklog_button.svg","assets/imgs/CalendarDayStatusDanger.svg","assets/imgs/CalendarDayStatusWarning.svg","assets/imgs/CalendarDayStatusOK.svg"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","API","WorklogData","post","response","data","days","months","GetCurrentDate","date","Date","CurrentYear","getFullYear","CurrentMonth","getMonth","CurrentDay","getDate","DayName","getDay","DEL_WORKLOG","CurrentDate","randomInteger","min","max","rand","Math","random","floor","DefaultState","WorkLogsBlocks","BlockInfo","BlockCreatedDate","SummaryStatus","SummaryTime","id","Worklogs","StartTime","EndTime","JiraCode","TaskField","status","IsNesting","NestingItems","TimerValue","PlayingWorklog","WorklogToChange","FavoritesWorklogs","AddWorklog","NewWorklog","IsFavorites","type","SetIsPlayingWorklogById","IsPlaying","ElementId","ChangeWorklog","WorkLogId","SetWorklogToChange","undefined","AddToFavorite","WorklogId","WorklogsReducer","state","action","GetWorklogsBlockCopy","JSON","parse","stringify","FindWorklogById","WorklogsBlocksCopy","SoughtWorklog","WorklogBlockIndex","WorklogIndex","NestingWorklogIndex","map","WorklogBlock","Index","Worklog","WLIndex","length","NestingItem","NestingIndex","EmptyWorklog","Issue","ParentId","WorklogToCreate","some","WBL","unshift","WB","NewWorklogs","NewNestingWorklogs","FilteredWorklogBlockCopy","index","DelParentId","push","filter","DelWorklogId","WL","WBLtrue","console","log","options","target","FavoritesWorklog","FavoritesWorklogsCopy","Nest","RandomStatus","arr","RangeError","RandomDaysCreate","statuses","IntroDaysCount","OutroDaysCount","DaysCount","MaxDaysLength","OutArr","IntroDaysArr","OutroDaysArr","DaysArr","j","Signature","DayNumber","DayStatus","n","p","Calendars","January","February","March","April","May","June","July","August","September","October","November","December","ClickedMonthDay","CalendarReducer","Day","Issues","CompletedIssues","IssuesReducer","GetIssuesCopy","From","CompletedIssue","IssuesCopy","findIndex","value","OldIssue","NewIssue","reducers","combineReducers","form","formReducer","CalendarData","WorklogsData","WorkLogsReducer","IssuesData","store","createStore","applyMiddleware","thunkMiddleWare","NavBar","props","className","HS","navContainer","navLinksContainer","NavLinksPosition","NavLinks","item","to","NavIconsContainer","NavIcons","SmallIcons","src","settings","alt","LogOutIcon","AvatarIcons","AvatarIcon","DifferenceInTime","differentRes","hours","minuts","TimesArr","firstDate","secondDate","string","split","different","round","abs","LineStroke","LS","lineStroke","WorkLogDropDown","onMouseLeave","onHideMenu","WLDD","Container","onClick","ContentContainer","ComponentToDraw","CurrentWorklog","ContainerEl","e","SetDeleteModalParams","WorkLogToDeleteId","OnDeleteModalOpen","DeleteWorklogConfirmModal","isOpen","DS","modal","ModalTextContainer","NewWorklogControlButtonsContainer","NewWorklogControlButtons","DeleteModalParams","DeleteWorklog","DeleteFromFavorites","onClose","style","color","green","cursor","fontSize","marginLeft","MS","bg","NestingWorkLog","key","WorkLog","useState","ShowMenu","SetShowMenu","NestingIsShowing","SetNestingIsShowing","WLS","WorkLogs","WorklogBlockContainerActive","WorklogBlockContainer","WorklogActiveBG","WorklogBG","WorklogActive","NestingButtonPose","NestingBG","TwwContentImg","ArrowUp","TwwContentText","WorkTime","Minus","ColorPointPoseActive","ColorPointPose","CP_ok","CP_warning","CP_danger","keys","i","openWorklogChangeModal","WorklogContentContainer","TimerValueContainer","ControlButtonsContainer","StopButton","PlayButton","WorklogMoreButtonActive","WorklogMoreButton","WLMoreButtonBG","onMouseEnter","WorklogMoreVerticalActive","WorklogMoreVertical","WLMoreButtonVertical","DeleteModalIsOpen","OnDeleteModalClose","WLlinestrokeActive","WLlinestroke","ProgressBar","Fragment","width","height","borderRadius","Bar","now","WorklogInfo","FS","SummaryWorklogInfo","DateBlockContainer","DateBlockSize","DateOfCreation","DateTime","Progress","showTooltip","text","SetWorklogStatus","every","ObjToSend","SendWorklogBlockThunk","DownloadIcon","WLlineStrokeContainer","WorkLogsBlock","SetDeleteModalIsOpen","toString","WorklogInfoContainer","el","WorkLogsContainer","this","WorklogsBlocks","paddingTop","React","Component","compose","connect","WorklogBlockData","dispatch","a","ToFullTime","Numbered","Number","parseInt","CalculateNewStartTime","CurrentTime","minutes","CurrentHours","CurrentMinutes","Timer","substr","seconds","setSeconds","setMinutes","setHours","isActive","setIsActive","WorklogInputValue","SetWorklogInputValue","IssueInputValue","SetIssueInputValue","useEffect","interval","clearInterval","setInterval","TS","TimeRContainer","TimerWorklogName","placeholder","defaultValue","onChange","TimerIssueName","TimerControlButtonsContainer","TimerControlButtons","TimerData","TimerIssue","TimerTaskField","SetTimerData","TTStopButton","TTPauseButton","TimeTracking","TTS","TTLayout","strokeVert","StrokeVert","TTContent","TimetrackingHeaderContainer","TimetrackingHeader","TimeTrackingLogo","TTMainContentRoot","NewWorklogContainer","FavoritesIsClicked","NewWorklogButtonPose","NewWorklogButtonSize","NewWorklogButtonShadowed","NewWorklogButton","NewWorklogButtonDescriptionContainer","NewWorklogButtonDescription","TTHorizStrokePose","StrokeHoriz","FavoritesPage","NoFavoritesIssuesContainer","FavoritesText","CalendarDay","DayIsClicked","SetDayIsClicked","WrappedDay","MonthName","CDS","DayBgClicked","DayBgCurrentDay","DayBgDefault","WorklogsBlockToBeScroled","StateCopy","getState","WorklogsBlockToBeScrolled","Month","document","getElementById","SearchWorklogBlock","SetClickedMonthDay","scrollIntoView","block","inline","behavior","DropDownCalendarDayFaded","DropDownCalendarDay","DropDownCalendarDayNumberClicked","DropDownCalendarDayNumber","paddingLeft","OK","Warn","Danger","EmptyStatus","DropDownCalendarFooterElement","CS","marginTop","DropDownProgressStatus","DropDownCalendar","DropDownCalendarHeader","DropDOwnCalendarContentContainer","DropDownCalendarContent","DropDownCalendarDayNames","day","DropDownCalendarFooterContainer","DropDownCalendarFooter","DropDownCalendarContainer","Calendar","ShowDropDownCalendar","SetShowDropDownCalendar","CalendarContainer","CalendarContent","CalendarDate","CalendarIcon","All","AllS","AllButtonBg","AllButtonBgActive","ActiveItem","OnAllClicked","FavoritesButton","FavoritesButtonBgActive","FavoritesButtonBg","OnFavoritesClick","FavoritesTextContainer","pink","CalendarAndControlButtons","AS","CalendarAndButtons","RightLabel","LeftLabel","display","Position","left","offsetLeft","LeftLabelImage","LabelValue","start","right","offsetRight","end","findPosX","obj","curleft","offsetParent","x","TimeSlider","SetValue","LeftPose","SetLeftPose","RightPose","SetRightPose","LeftOffset","SetLeftOffset","RightOffset","SetRightOffset","TimerButtonsInit","slider","querySelectorAll","SliderWidth","getComputedStyle","SliderPoseStart","SliderPoseEnd","LeftMargin","RightMargin","disabled","format","maxValue","minValue","name","onChangeStart","time","onChangeComplete","SetTimerValue","innerHTML","UpdateLabelsValue","step","ChangeWorklogModal","ModalNewWorklogName","SetModalNewWorklogName","ModalNewIssueName","SetModalNewIssueName","ModalTimeLineValues","SetModalTimeLineValues","NewWorklogNameIsFilled","SetNewWorklogNameIsFilled","NewIssueNameIsFilled","SetNewIssueNameIsFilled","EmptyWorklogTimerMinutes","EmptyWorklogTimerEndHours","getHours","getMinutes","EmptyWorklogTimeValues","close","preventDefault","closeWorklogChangeModal","WorklogChangeModalIsOpen","ModalTitle","ModalSlider","ModalTextFields","NewWorklogContentContainer","NewWorklogContentTitle","marginCheck","currentTarget","NewWorklogContentInput","ModalInputError","Obj","NewWL","ChangeFavoritesWorklog","CloseButtonMargin","ChangeWorklogModalContainer","useStyles","makeStyles","theme","root","margin","spacing","LoginModal","classes","LoginFieldValue","SetLoginFieldValue","PasswordFieldValue","SetPasswordFieldValue","ErrorText","SetErrorText","autoComplete","InputsContainer","LoginContainer","TextField","error","label","helperText","PasswordContainer","Button","localStorage","setItem","reload","variant","Tooltip","TooltipIsShowed","TooltipContainer","TooltipContent","StatusAndCloseButtonContainer","TooltipInfo","TooltipStatusOk","TooltipStatusWarning","TooltipStatusDanger","hideTooltil","TooltipCloseButtonContainer","TooltipTextContainer","createStyles","backgroundColor","cardHeader","padding","list","palette","background","paper","overflow","button","not","b","indexOf","intersection","checked","setChecked","setLeft","setRight","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","splice","numberOfChecked","items","handleToggleAll","customList","title","Card","CardHeader","avatar","Checkbox","indeterminate","inputProps","subheader","Divider","List","dense","component","role","labelId","ListItem","ListItemIcon","tabIndex","disableRipple","ListItemText","primary","Grid","container","alignItems","direction","size","concat","aria-label","ChangeIssue","AddIssue","DeleteIssue","SetWorklogChangeModalIsOpen","SetFavoritesIsClicked","SetTooltipIsShowed","SetTooltipInfo","OnSetTimerData","getItem","exact","path","render","CalendarAndButtonsContainer","MainWrapper","TImeTracking_and_Calendar","ReactDOM","basename","process","AppContainer","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.138051b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorklogInfoContainer\":\"WorkLog_WorklogInfoContainer__3vBgc\",\"WorklogBG\":\"WorkLog_WorklogBG__3k2mr\",\"WorklogBlockContainer\":\"WorkLog_WorklogBlockContainer__k3upz\",\"WorklogActive\":\"WorkLog_WorklogActive__1k6f0\",\"WorklogMoreButton\":\"WorkLog_WorklogMoreButton__1p1cl\",\"WorklogMoreVertical\":\"WorkLog_WorklogMoreVertical__2_aPH\",\"WorklogActiveBG\":\"WorkLog_WorklogActiveBG__sZgBP\",\"WorklogMoreVerticalActive\":\"WorkLog_WorklogMoreVerticalActive__LDc95\",\"WorklogMoreButtonActive\":\"WorkLog_WorklogMoreButtonActive__2ibnn\",\"WorklogBlockContainerActive\":\"WorkLog_WorklogBlockContainerActive__awb7y\",\"WLInfoButton\":\"WorkLog_WLInfoButton__2amtG\",\"WLlinestroke\":\"WorkLog_WLlinestroke__2SPgZ\",\"WLlinestrokeActive\":\"WorkLog_WLlinestrokeActive__1wEjg\",\"ColorPointPose\":\"WorkLog_ColorPointPose__2v3Y0\",\"ColorPointPoseActive\":\"WorkLog_ColorPointPoseActive__3Ylmy\",\"WorklogBlock\":\"WorkLog_WorklogBlock__3MTew\",\"WorkTime\":\"WorkLog_WorkTime__35AHM\",\"StartTime\":\"WorkLog_StartTime__pO95X\",\"EndTime\":\"WorkLog_EndTime__6ivO2\",\"Minus\":\"WorkLog_Minus__3ysDf\",\"WorklogContentContainer\":\"WorkLog_WorklogContentContainer__Pdl3q\",\"JiraCode\":\"WorkLog_JiraCode__3cju4\",\"TaskField\":\"WorkLog_TaskField__3WyCE\",\"ProgressBarContainer\":\"WorkLog_ProgressBarContainer__2t-30\",\"TimerValueContainer\":\"WorkLog_TimerValueContainer__3bCeV\",\"TimerValue\":\"WorkLog_TimerValue__yfMTJ\",\"ControlButtonsContainer\":\"WorkLog_ControlButtonsContainer__cqNYJ\",\"PlayButton\":\"WorkLog_PlayButton__2v57W\",\"StopButton\":\"WorkLog_StopButton__1uogg\",\"NestingButtonPose\":\"WorkLog_NestingButtonPose__-jdPs\",\"NestingBG\":\"WorkLog_NestingBG__ALW79\",\"TwwContentText\":\"WorkLog_TwwContentText__1n6ua\",\"WorkLogSliderPose\":\"WorkLog_WorkLogSliderPose__2XB8U\",\"TwwContentImg\":\"WorkLog_TwwContentImg__2jKRv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalendarContainer\":\"Calendar_CalendarContainer__I7VPR\",\"CalendarContent\":\"Calendar_CalendarContent__7J52V\",\"CalendarIcon\":\"Calendar_CalendarIcon__35v8Z\",\"CalendarDate\":\"Calendar_CalendarDate__1Fc1O\",\"DropDownCalendar\":\"Calendar_DropDownCalendar__rOVL_\",\"DropDownCalendarHeader\":\"Calendar_DropDownCalendarHeader__mMkPr\",\"DropDOwnCalendarContentContainer\":\"Calendar_DropDOwnCalendarContentContainer__1ekcD\",\"DropDownCalendarContent\":\"Calendar_DropDownCalendarContent__3lJK4\",\"DropDownCalendarFooterContainer\":\"Calendar_DropDownCalendarFooterContainer__dEO85\",\"DropDownCalendarFooter\":\"Calendar_DropDownCalendarFooter__3v4wV\",\"DropDownCalendarFooterElement\":\"Calendar_DropDownCalendarFooterElement__2gCAC\",\"DropDownCalendarProgressLineDanger\":\"Calendar_DropDownCalendarProgressLineDanger__k_JjF\",\"DropDownCalendarProgressLineOk\":\"Calendar_DropDownCalendarProgressLineOk__1Tedt\",\"DropDownCalendarProgressLineWarning\":\"Calendar_DropDownCalendarProgressLineWarning__3NPVW\",\"DropDownProgressStatus\":\"Calendar_DropDownProgressStatus__1Hffx\",\"DayBgClicked\":\"Calendar_DayBgClicked__10_xV\",\"DayBgCurrentDay\":\"Calendar_DayBgCurrentDay__35shH\",\"DayBgDefault\":\"Calendar_DayBgDefault__138Ia\",\"DropDownCalendarDay\":\"Calendar_DropDownCalendarDay__1TvNk\",\"DropDownCalendarDayFaded\":\"Calendar_DropDownCalendarDayFaded__3wmG5\",\"DropDownCalendarDayNumber\":\"Calendar_DropDownCalendarDayNumber__3_jQu\",\"DropDownCalendarDayNumberClicked\":\"Calendar_DropDownCalendarDayNumberClicked__YFrra\",\"DropDownCalendarDayNames\":\"Calendar_DropDownCalendarDayNames__qcAdr\",\"bg\":\"Calendar_bg__2aViC\",\"EmptyStatus\":\"Calendar_EmptyStatus__weaVf\"};","module.exports = __webpack_public_path__ + \"static/media/settings.6677f6c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/door.ffe979f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.462c6cf4.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-button.f9fec951.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineStroke\":\"LineStroke_lineStroke__2pI3T\"};","module.exports = __webpack_public_path__ + \"static/media/worklogMoreButtonBG.622f8f21.svg\";","module.exports = __webpack_public_path__ + \"static/media/worklogMoreVertical.37dfcf19.svg\";","module.exports = __webpack_public_path__ + \"static/media/danger_cp.49659e50.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning_cp.c2d1e025.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok_cp.08ca5cee.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up.0dc941bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop_button.1eb1b96f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ActiveWorklogBG.215a57fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/stroke_vert.437b2938.svg\";","module.exports = __webpack_public_path__ + \"static/media/stroke_horiz.2e15c5b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button_shadowed.6b0a0400.svg\";","module.exports = __webpack_public_path__ + \"static/media/TT-stop-button.3d2bae0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/TT-pause-button.8e7efc77.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.daeb1a9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimetrackingHeaderContainer\":\"TimeTracking_TimetrackingHeaderContainer__ON8us\",\"TTLayout\":\"TimeTracking_TTLayout__3veO9\",\"TTContent\":\"TimeTracking_TTContent__EuSq7\",\"TTMainContentRoot\":\"TimeTracking_TTMainContentRoot__1SdVC\",\"TimetrackingHeader\":\"TimeTracking_TimetrackingHeader__2_M3q\",\"TimeTrackingLogo\":\"TimeTracking_TimeTrackingLogo__3Gymw\",\"MoreIconSizeContainer\":\"TimeTracking_MoreIconSizeContainer__CtFXl\",\"MoreIconSize\":\"TimeTracking_MoreIconSize__3hJsc\",\"NewWorklogContainer\":\"TimeTracking_NewWorklogContainer__1Htpq\",\"NewWorklog\":\"TimeTracking_NewWorklog__3l1DI\",\"NewWorklogButtonSize\":\"TimeTracking_NewWorklogButtonSize__1ylBg\",\"NewWorklogButtonPose\":\"TimeTracking_NewWorklogButtonPose__MG6O9\",\"NewWorklogButtonDescriptionContainer\":\"TimeTracking_NewWorklogButtonDescriptionContainer__1V2I5\",\"NewWorklogButtonDescription\":\"TimeTracking_NewWorklogButtonDescription__29EUZ\",\"TTHorizStrokePose\":\"TimeTracking_TTHorizStrokePose__1WjLF\",\"strokeVert\":\"TimeTracking_strokeVert__yTsLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__fVvss\",\"bg\":\"ModalWindow_bg__1aHSY\",\"ModalTitle\":\"ModalWindow_ModalTitle__1JK9n\",\"ModalSlider\":\"ModalWindow_ModalSlider__21VHJ\",\"ModalTextFields\":\"ModalWindow_ModalTextFields__1xPvH\",\"NewWorklogContentContainer\":\"ModalWindow_NewWorklogContentContainer__3XnfK\",\"NewWorklogContentTitle\":\"ModalWindow_NewWorklogContentTitle__3V0FN\",\"ModalInputError\":\"ModalWindow_ModalInputError__2UZpA\",\"NewWorklogContentInput\":\"ModalWindow_NewWorklogContentInput__3GqOw\",\"marginCheck\":\"ModalWindow_marginCheck__2Ndhx\",\"NewWorklogControlButtonsContainer\":\"ModalWindow_NewWorklogControlButtonsContainer__308FZ\",\"NewWorklogControlButtons\":\"ModalWindow_NewWorklogControlButtons__2T_1s\",\"NewWorklogControlButton\":\"ModalWindow_NewWorklogControlButton__3fYoB\",\"CloseButtonMargin\":\"ModalWindow_CloseButtonMargin__DWcBR\",\"NewWorklogSubmitButton\":\"ModalWindow_NewWorklogSubmitButton__r5R_e\",\"Err\":\"ModalWindow_Err__1uJOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"NavBar_navContainer__3sKle\",\"navLinksContainer\":\"NavBar_navLinksContainer__3UvKn\",\"NavLinksPosition\":\"NavBar_NavLinksPosition__2Jq8r\",\"NavLinks\":\"NavBar_NavLinks__22adz\",\"NavLinksItem\":\"NavBar_NavLinksItem__jDCJP\",\"ActiveLink\":\"NavBar_ActiveLink__2agTU\",\"NavIconsContainer\":\"NavBar_NavIconsContainer__2r9Fj\",\"NavIcons\":\"NavBar_NavIcons__1XxNH\",\"SmallIcons\":\"NavBar_SmallIcons__atSWj\",\"AvatarIcons\":\"NavBar_AvatarIcons__yrk4o\",\"item\":\"NavBar_item__fYm3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FavoritesButtonBg\":\"Favorites_FavoritesButtonBg__3VELL\",\"FavoritesButtonBgActive\":\"Favorites_FavoritesButtonBgActive__dnGPa\",\"item\":\"Favorites_item__1W2Lk\",\"ActiveItem\":\"Favorites_ActiveItem__3T7aT\",\"FavoritesText\":\"Favorites_FavoritesText__2x9PR\",\"NoFavoritesIssuesContainer\":\"Favorites_NoFavoritesIssuesContainer__3tIde\",\"FavoritesTextContainer\":\"Favorites_FavoritesTextContainer__BfuKk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SummaryWorklogInfo\":\"WorklogInfo_SummaryWorklogInfo__4-4NV\",\"DateBlockContainer\":\"WorklogInfo_DateBlockContainer__1o7Kx\",\"DateBlockSize\":\"WorklogInfo_DateBlockSize__2QW4p\",\"DownloadIcon\":\"WorklogInfo_DownloadIcon__3DNZg\",\"DateTime\":\"WorklogInfo_DateTime__3Z9a0\",\"Progress\":\"WorklogInfo_Progress__25Rn6\",\"WLlineStrokeContainer\":\"WorklogInfo_WLlineStrokeContainer__1Sgro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TooltipContainer\":\"Tooltip_TooltipContainer__1GAZV\",\"TooltipContent\":\"Tooltip_TooltipContent__3cqtU\",\"StatusAndCloseButtonContainer\":\"Tooltip_StatusAndCloseButtonContainer__3sV8b\",\"TooltipCloseButtonContainer\":\"Tooltip_TooltipCloseButtonContainer__XoffU\",\"TooltipStatusWarning\":\"Tooltip_TooltipStatusWarning__1X3_l\",\"TooltipStatusDanger\":\"Tooltip_TooltipStatusDanger__3M61h\",\"TooltipStatusOk\":\"Tooltip_TooltipStatusOk__3odhk\",\"TooltipTextContainer\":\"Tooltip_TooltipTextContainer__QJNFQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWrapper\":\"App_MainWrapper__3UVmf\",\"CalendarAndButtonsContainer\":\"App_CalendarAndButtonsContainer__1qylj\",\"CalendarAndButtons\":\"App_CalendarAndButtons__gi3vH\",\"TImeTracking_and_Calendar\":\"App_TImeTracking_and_Calendar__2wagN\",\"AppContainer\":\"App_AppContainer__3te8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeftLabel\":\"TimeSlider_LeftLabel__1cFI_\",\"RightLabel\":\"TimeSlider_RightLabel__itdny\",\"LeftLabelImage\":\"TimeSlider_LeftLabelImage__1Hskt\",\"LabelValue\":\"TimeSlider_LabelValue__3snvI\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {TSendWorklogsData} from \"../Data/WorkLogsReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://localhost:5000/api/1.0/'\r\n})\r\n\r\n\r\nexport type TDefRes = {\r\n    resultCode : number\r\n    messages: Array<string>\r\n    data : any\r\n}\r\n\r\nexport const API = {\r\n    async SendWorklogBlock(WorklogData : TSendWorklogsData) {\r\n        const response = await instance.post<TDefRes>(`Worklogs`,WorklogData)\r\n        return response.data\r\n    }\r\n}\r\n\r\n","import {TCurrentDate} from \"../../Data/CalendarReducer\";\r\nconst days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May',\r\n    'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nexport const GetCurrentDate = (): TCurrentDate => {\r\n    let date = new Date()\r\n    let CurrentYear = date.getFullYear()\r\n    let CurrentMonth = months[date.getMonth()]\r\n    let CurrentDay = date.getDate()\r\n    let DayName = days[ date.getDay() ];\r\n\r\n    let CurrentDate: TCurrentDate = {\r\n        DayName,\r\n        CurrentYear,\r\n        //@ts-ignore\r\n        CurrentMonth,\r\n        CurrentDay\r\n    }\r\n    return CurrentDate\r\n\r\n}\r\n","import store, {GlobalState} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {API} from \"../API/requests\"\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\nconst ADD_WORKLOG = \"WORKLOGS/ADD_WORKLOG\"\r\nconst DEL_WORKLOG = \"WORKLOGS/DEL_WORKLOG\"\r\nconst SET_IS_PLAYING_WORKLOG_BY_ID = \"WORKLOGS/SET_IS_PLAYING_WORKLOG_BY_ID\"\r\nconst CHANGE_WORKLOG = \"WORKLOGS/CHANGE_WORKLOG\"\r\nconst SET_WORKLOG_TO_CHANGE = \"WORKLOGS/SET_WORKLOG_TO_CHANGE\"\r\nconst ADD_TO_FAVORITE = \"WORKLOGS/ADD_TO_FAVORITE\"\r\nconst SET_WORKLOG_STATUS = \"WORKLOGS/SET_WORKLOG_STATUS\"\r\nconst DELETE_FROM_FAVORITES = \"WORKLOGS/DELETE_FROM_FAVORITES\"\r\nconst CHANGE_FAVORITES_WORKLOG = \"WORKLOGS/CHANGE_FAVORITES_WORKLOG\"\r\nexport const CurrentDate = `${GetCurrentDate().DayName + \",\" + GetCurrentDate().CurrentMonth} ${GetCurrentDate().CurrentDay}`\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport type TNestingItem = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    JiraCode: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    Issue?: string | null\r\n    id: number\r\n    TimerValue: string | null\r\n}\r\n\r\nexport type TBlockInfo = {\r\n    BlockCreatedDate: string\r\n    SummaryStatus: \"ok\" | \"warning\" | \"danger\" | string\r\n    SummaryTime: string | null\r\n    id: number\r\n}\r\n\r\nexport type TWorkLog = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    JiraCode: string | null\r\n    TaskField: string | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    id: number\r\n    Issue?: string | null\r\n    ParentId?: number\r\n    IsFavorites?: boolean\r\n}\r\n\r\nexport type  TWorklogBlock = {\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n}\r\n\r\nexport type TTimerData = {\r\n    TimerValue: string\r\n    TimerIssue: string\r\n    TimerTaskField: string\r\n}\r\nexport type TSendWorklogsData = {\r\n    WorkLogsBlocks: TWorklogBlock\r\n}\r\n\r\nlet DefaultState = {\r\n    WorkLogsBlocks: [{\r\n        BlockInfo: {\r\n            BlockCreatedDate: \"Wed,October 7\",\r\n            SummaryStatus: \"ok\",\r\n            SummaryTime: \"07:05:00\",\r\n            id: 1\r\n        },\r\n        Worklogs: [{\r\n            StartTime: \"09:00\",\r\n            EndTime: \"11:00\",\r\n            JiraCode: \"JRM-310\",\r\n            TaskField: \"Team standup\",\r\n            status: \"warning\",\r\n            IsNesting: false,\r\n            NestingItems: null,\r\n            TimerValue: \"02:00:00\",\r\n            id: 444553452341241\r\n        }, {\r\n            StartTime: \"10:00\",\r\n            EndTime: \"11:15\",\r\n            JiraCode: \"JRM-310\",\r\n            TaskField: \"Meeting with QA\",\r\n            status: \"ok\",\r\n            NestingItems: null,\r\n            IsNesting: false,\r\n            TimerValue: \"01:15:00\",\r\n            id: 213124124125122\r\n        }, {\r\n            StartTime: \"09:00\",\r\n            EndTime: \"10:00\",\r\n            JiraCode: \"JRM-310\",\r\n            TaskField: \"Company Branding\",\r\n            status: \"warning\",\r\n            IsNesting: false,\r\n            TimerValue: \"03:50:00\",\r\n            id: 2131241255143,\r\n            NestingItems: null\r\n        },\r\n            {\r\n                StartTime: \"11:30\",\r\n                EndTime: \"13:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Marketing strategy\",\r\n                status: \"warning\",\r\n                id: 123213213244,\r\n                TimerValue: \"01:30:00\",\r\n                NestingItems: null,\r\n                IsNesting: false\r\n            },\r\n            {\r\n                StartTime: \"13:20\",\r\n                EndTime: \"16:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Moodboarding\",\r\n                status: \"ok\",\r\n                id: 1232312351245,\r\n                TimerValue: \"03:20:00\",\r\n                NestingItems: null,\r\n                IsNesting: false\r\n            }]\r\n    },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Tue,October 6\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 2\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Team standup\",\r\n                status: \"danger\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 444553452341246\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Design Meeting\",\r\n                status: \"ok\",\r\n                NestingItems: null,\r\n                IsNesting: false,\r\n                TimerValue: \"01:15:00\",\r\n                id: 213124124125127\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                IsNesting: true,\r\n                TimerValue: \"04:50:00\",\r\n                id: 2131241255148,\r\n                NestingItems: [{\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 123213213249,\r\n                    TimerValue: \"01:30:00\",\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512410,\r\n                    TimerValue: \"03:20:00\",\r\n                }]\r\n            }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Mon,October 5\",\r\n                SummaryStatus: \"warning\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 3\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412411,\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"11:15\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Fixing control buttons on navigation bar\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"02:45:00\",\r\n                id: 2131241241251212,\r\n            }, {\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Company Branding\",\r\n                status: \"warning\",\r\n                IsNesting: false,\r\n                TimerValue: \"03:50:00\",\r\n                id: 21312412551413,\r\n                NestingItems: null\r\n            },\r\n                {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Create layout for main menu\",\r\n                    status: \"danger\",\r\n                    id: 1232132132414,\r\n                    TimerValue: \"01:00:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Create layout for inputs\",\r\n                    status: \"ok\",\r\n                    id: 12323123512415,\r\n                    TimerValue: \"03:20:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null\r\n                }]\r\n        },\r\n        {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Sun,October 4\",\r\n                SummaryStatus: \"danger\",\r\n                SummaryTime: \"06:05:00\",\r\n                id: 4\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Team standup\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"01:00:00\",\r\n                id: 4445534523412416\r\n            }, {\r\n                StartTime: \"10:00\",\r\n                EndTime: \"12:30\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Create request by API\",\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                NestingItems: null,\r\n                TimerValue: \"02:30:00\",\r\n                id: 2131241241251217\r\n            }, {\r\n                StartTime: \"12:20\",\r\n                EndTime: \"13:40\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Fixed buttons positions\",\r\n                status: \"warning\",\r\n                IsNesting: false,\r\n                TimerValue: \"01:20:00\",\r\n                id: 21312412551418,\r\n                NestingItems: null\r\n            },\r\n                {\r\n                    StartTime: \"11:30\",\r\n                    EndTime: \"13:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Marketing strategy\",\r\n                    status: \"warning\",\r\n                    id: 1232132132419,\r\n                    TimerValue: \"01:30:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null\r\n                }, {\r\n                    StartTime: \"13:20\",\r\n                    EndTime: \"16:00\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Moodboarding\",\r\n                    status: \"ok\",\r\n                    id: 12323123512420,\r\n                    TimerValue: \"03:20:00\",\r\n                    IsNesting: false,\r\n                    NestingItems: null\r\n                }]\r\n        }, {\r\n            BlockInfo: {\r\n                BlockCreatedDate: \"Set,October 3\",\r\n                SummaryStatus: \"ok\",\r\n                SummaryTime: \"08:00:00\",\r\n                id: 5\r\n            },\r\n            Worklogs: [{\r\n                StartTime: \"09:00\",\r\n                EndTime: \"10:00\",\r\n                JiraCode: \"JRM-310\",\r\n                TaskField: \"Team standup\",\r\n                NestingItems: null,\r\n                status: \"ok\",\r\n                IsNesting: false,\r\n                TimerValue: \"01:00:00\",\r\n                id: 31232175895321\r\n            },\r\n                {\r\n                    StartTime: \"10:30\",\r\n                    EndTime: \"11:30\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Meeting with QA\",\r\n                    status: \"ok\",\r\n                    NestingItems: null,\r\n                    IsNesting: false,\r\n                    TimerValue: \"01:00:00\",\r\n                    id: 76967845623522\r\n                }, {\r\n                    StartTime: \"12:00\",\r\n                    EndTime: \"13:55\",\r\n                    JiraCode: \"JRM-310\",\r\n                    TaskField: \"Meeting with costumer\",\r\n                    status: \"danger\",\r\n                    IsNesting: false,\r\n                    NestingItems: null,\r\n                    TimerValue: \"01:55:00\",\r\n                    id: 12312434256623\r\n                }\r\n            ]\r\n        }] as Array<TWorklogBlock>,\r\n    PlayingWorklog: null as TWorkLog | null,\r\n    WorklogToChange: null as TWorkLog | null,\r\n    FavoritesWorklogs: [] as Array<TWorkLog>\r\n}\r\n\r\nexport const SearchWorklogBlock = (MonthName: string, DayNumber: number): Element | null => {\r\n    let StateCopy: DefaultWorklogsState = JSON.parse(JSON.stringify(store.getState().WorklogsData))\r\n    let WorklogsBlockToBeScrolled: HTMLElement | null = null\r\n    StateCopy.WorkLogsBlocks.map(el => {\r\n        let [Month, Day] = [...el.BlockInfo.BlockCreatedDate?.split(\",\")[1].split(\" \")]\r\n        if (Month === MonthName && Number.parseInt(Day) === DayNumber) {\r\n            WorklogsBlockToBeScrolled = document.getElementById(el.BlockInfo.id.toString())\r\n        }\r\n    })\r\n    return WorklogsBlockToBeScrolled\r\n}\r\n\r\n\r\ntype  DefaultWorklogsState = typeof DefaultState\r\n\r\n\r\ntype TWorklogsReducerActions = ReturnType<TAddWorklog> | ReturnType<TDeleteWorklog>\r\n    | ReturnType<TSetIsPlayingWorklogById> | ReturnType<TChangeWorklog>\r\n    | ReturnType<TSetWorklogToChange> | ReturnType<TAddToFavorite> | ReturnType<TSetWorklogStatus>\r\n    | ReturnType<TDeleteFromFavorites> | ReturnType<TChangeFavoritesWorklog>\r\n\r\ntype TWorklogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TWorklogsReducerActions>\r\n\r\nconst WorklogsReducer = (state = DefaultState, action: TWorklogsReducerActions): DefaultWorklogsState => {\r\n\r\n    const GetWorklogsBlockCopy = (): Array<TWorklogBlock> => {\r\n        return JSON.parse(JSON.stringify(state.WorkLogsBlocks))\r\n    }\r\n\r\n\r\n    const FindWorklogById = (id: number | undefined): {\r\n        SoughtWorklog: TWorkLog\r\n        WorklogBlockIndex: number | undefined\r\n        WorklogIndex: number | undefined\r\n        NestingWorklogIndex: number | undefined\r\n    } => {\r\n        let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n        let SoughtWorklog = {} as TWorkLog\r\n        let WorklogBlockIndex = undefined as number | undefined\r\n        let WorklogIndex = undefined as number | undefined\r\n        let NestingWorklogIndex = undefined as number | undefined\r\n\r\n        WorklogsBlocksCopy.map((WorklogBlock, Index) => {\r\n            WorklogBlock.Worklogs.map((Worklog, WLIndex) => {\r\n\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0 && Worklog.id !== id) {\r\n                    Worklog.NestingItems?.map((NestingItem, NestingIndex) => {\r\n                        if (NestingItem.id === id) {\r\n\r\n                            SoughtWorklog = {\r\n                                ...NestingItem\r\n                            }\r\n                            WorklogBlockIndex = Index\r\n                            NestingWorklogIndex = NestingIndex\r\n                            WorklogIndex = WLIndex\r\n                        }\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === id) {\r\n                        WorklogBlockIndex = Index\r\n                        SoughtWorklog = Worklog\r\n                        WorklogIndex = WLIndex\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        return {SoughtWorklog, WorklogBlockIndex, WorklogIndex, NestingWorklogIndex}\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_WORKLOG: {\r\n\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let EmptyWorklog: TWorkLog = {\r\n                StartTime: null,\r\n                EndTime: null,\r\n                id: randomInteger(0, 10000),\r\n                NestingItems: null,\r\n                TaskField: null,\r\n                Issue: null,\r\n                TimerValue: \"00:00:00\",\r\n                JiraCode: \"JRM-310\",\r\n                status: \"danger\",\r\n                IsNesting: false,\r\n                ParentId: undefined,\r\n                IsFavorites: action.IsFavorites\r\n            }\r\n            let WorklogToCreate = {} as TWorkLog\r\n\r\n            action.NewWorklog\r\n                ? WorklogToCreate = action.NewWorklog\r\n                : WorklogToCreate = EmptyWorklog\r\n\r\n            if (WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)) {\r\n                WorklogsBlocksCopy.map(WBL => {\r\n                    WBL.BlockInfo.BlockCreatedDate === CurrentDate && WBL.Worklogs.unshift(WorklogToCreate)\r\n                })\r\n            } else {\r\n                WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        id: randomInteger(0, 10000),\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        SummaryTime: \"00:00:00\"\r\n                    }, Worklogs: [\r\n                        WorklogToCreate\r\n                    ]\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                PlayingWorklog: WorklogToCreate,\r\n                FavoritesWorklogs: action.IsFavorites ? [...state.FavoritesWorklogs, EmptyWorklog] : []\r\n            }\r\n        }\r\n\r\n        case SET_IS_PLAYING_WORKLOG_BY_ID: {\r\n            let SoughtWorklog = FindWorklogById(action.ElementId).SoughtWorklog\r\n            action.IsFavorites ? SoughtWorklog.IsFavorites = true : SoughtWorklog.IsFavorites = false\r\n            return {\r\n                ...state,\r\n                PlayingWorklog: action.IsPlaying ?\r\n                    SoughtWorklog\r\n                    : null\r\n            }\r\n        }\r\n        case CHANGE_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n\r\n            WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                // if (Worklog.Issue === action.NewWorklog.Issue) {\r\n                //     console.log(Worklog)\r\n                // }\r\n                if (Worklog.NestingItems && Worklog.NestingItems.length > 0) {\r\n                    Worklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorkLogId) {\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                        }\r\n\r\n                    })\r\n                } else {\r\n                    if (Worklog.id === action.WorkLogId) {\r\n                        Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                        Worklog.Issue = action.NewWorklog.Issue\r\n                        Worklog.TaskField = action.NewWorklog.TaskField\r\n                        Worklog.StartTime = action.NewWorklog.StartTime\r\n                        Worklog.EndTime = action.NewWorklog.EndTime\r\n                        Worklog.status = action.NewWorklog.status\r\n                    }\r\n                }\r\n            }))\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DEL_WORKLOG: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let NewWorklogs: Array<Array<TWorkLog>> = []\r\n            let NewNestingWorklogs: Array<Array<TNestingItem> | undefined> = []\r\n            let FilteredWorklogBlockCopy = [] as Array<TWorklogBlock>\r\n\r\n            WorklogsBlocksCopy.map((WBL, index) => {\r\n\r\n                if (action.DelParentId) {\r\n                    WBL.Worklogs.map((Worklog, WLIndex) => {\r\n                        if (Worklog.id === action.DelParentId) {\r\n                            NewNestingWorklogs.push(Worklog.NestingItems?.filter(NestingItem => NestingItem.id !== action.DelWorklogId))\r\n                            WorklogsBlocksCopy[index].Worklogs[WLIndex].NestingItems = NewNestingWorklogs[index]\r\n                        }\r\n                    })\r\n                } else {\r\n                    NewWorklogs.push(WBL.Worklogs.filter(WL => WL.id !== action.DelWorklogId))\r\n                    WorklogsBlocksCopy[index].Worklogs = NewWorklogs[index]\r\n                }\r\n                if (WBL.Worklogs.length === 0) {\r\n                    FilteredWorklogBlockCopy = WorklogsBlocksCopy.filter(WBLtrue => WBLtrue !== WBL)\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: FilteredWorklogBlockCopy.length > 0 ? FilteredWorklogBlockCopy : WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case SET_WORKLOG_TO_CHANGE : {\r\n            return {\r\n                ...state,\r\n                WorklogToChange: action.WorklogToChange ? action.WorklogToChange : null\r\n            }\r\n        }\r\n        case ADD_TO_FAVORITE : {\r\n            let {SoughtWorklog, ...Indexes} = FindWorklogById(action.WorklogId)\r\n            console.log(SoughtWorklog)\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: [...state.FavoritesWorklogs, SoughtWorklog]\r\n            }\r\n        }\r\n        case SET_WORKLOG_STATUS: {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            if (action.options.target === \"worklog\") {\r\n                WorklogsBlocksCopy.map(WB => WB.Worklogs.map(Worklog => {\r\n                    if (Worklog.id === action.options.id) Worklog.status = action.options.status\r\n                }))\r\n            } else {\r\n                WorklogsBlocksCopy.map(WB => {\r\n                    if (WB.BlockInfo.id === action.options.id) WB.BlockInfo.SummaryStatus = action.options.status\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy\r\n            }\r\n        }\r\n        case DELETE_FROM_FAVORITES : {\r\n            return {\r\n                ...state,\r\n                FavoritesWorklogs: state.FavoritesWorklogs.filter(FavoritesWorklog => FavoritesWorklog.id !== action.WorklogId)\r\n            }\r\n        }\r\n        case CHANGE_FAVORITES_WORKLOG : {\r\n            let WorklogsBlocksCopy: Array<TWorklogBlock> = GetWorklogsBlockCopy()\r\n            let FavoritesWorklogsCopy: Array<TWorkLog> = JSON.parse(JSON.stringify(state.FavoritesWorklogs))\r\n            FavoritesWorklogsCopy.map(FavoritesWorklog => {\r\n                if (FavoritesWorklog.NestingItems && FavoritesWorklog.NestingItems?.length > 0) {\r\n                    FavoritesWorklog.NestingItems.map(NestingItem => {\r\n                        if (NestingItem.id === action.WorklogId) {\r\n                            NestingItem.TaskField = action.NewWorklog.TaskField\r\n                            NestingItem.Issue = action.NewWorklog.Issue\r\n                            NestingItem.StartTime = action.NewWorklog.StartTime\r\n                            NestingItem.EndTime = action.NewWorklog.EndTime\r\n                            NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                        }\r\n                    })\r\n                } else {\r\n                    FavoritesWorklog.TaskField = action.NewWorklog.TaskField\r\n                    FavoritesWorklog.Issue = action.NewWorklog.Issue\r\n                    FavoritesWorklog.StartTime = action.NewWorklog.StartTime\r\n                    FavoritesWorklog.EndTime = action.NewWorklog.EndTime\r\n                    FavoritesWorklog.TimerValue = action.NewWorklog.TimerValue\r\n                }\r\n            })\r\n\r\n            WorklogsBlocksCopy.some(WBL => WBL.BlockInfo.BlockCreatedDate === CurrentDate)\r\n                ? WorklogsBlocksCopy.map(WBL => {\r\n\r\n                    WBL.Worklogs.some(Worklog => Worklog.id === action.WorklogId\r\n                        || Worklog.NestingItems?.some(Nest => Nest.id === action.WorklogId))\r\n\r\n                        ? WBL.Worklogs.some(Worklog => Worklog.NestingItems && Worklog.NestingItems.length > 0)\r\n                        ? WBL.Worklogs.map(Worklog => {\r\n                            Worklog.NestingItems?.map(NestingItem => {\r\n                                if (NestingItem.id === action.WorklogId) {\r\n                                    NestingItem.TimerValue = action.NewWorklog.TimerValue\r\n                                    NestingItem.StartTime = action.NewWorklog.StartTime\r\n                                    NestingItem.EndTime = action.NewWorklog.EndTime\r\n                                    NestingItem.TaskField = action.NewWorklog.TaskField\r\n                                    NestingItem.Issue = action.NewWorklog.Issue\r\n                                }\r\n                            })\r\n                        })\r\n                        : WBL.Worklogs.map(Worklog => {\r\n                            if (Worklog.id === action.WorklogId) {\r\n                                Worklog.TimerValue = action.NewWorklog.TimerValue\r\n                                Worklog.StartTime = action.NewWorklog.StartTime\r\n                                Worklog.EndTime = action.NewWorklog.EndTime\r\n                                Worklog.TaskField = action.NewWorklog.TaskField\r\n                                Worklog.Issue = action.NewWorklog.Issue\r\n                            }\r\n                        })\r\n                        : WBL.Worklogs.unshift(action.NewWorklog)\r\n                })\r\n                : WorklogsBlocksCopy.unshift({\r\n                    BlockInfo: {\r\n                        BlockCreatedDate: CurrentDate,\r\n                        SummaryStatus: \"danger\",\r\n                        id: randomInteger(0, 10000),\r\n                        SummaryTime: \"00:00:00\"\r\n                    },\r\n                    Worklogs: [\r\n                        action.NewWorklog\r\n                    ]\r\n                })\r\n            return {\r\n                ...state,\r\n                WorkLogsBlocks: WorklogsBlocksCopy,\r\n                FavoritesWorklogs: FavoritesWorklogsCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddWorklog = (NewWorklog ?: TWorkLog, IsFavorites?: boolean) => {\r\n    return {type: ADD_WORKLOG, NewWorklog, IsFavorites} as const\r\n}\r\nexport type TAddWorklog = typeof AddWorklog\r\n\r\nexport const DeleteWorklog = (DelWorklogId: number, DelParentId: number | null = null) => {\r\n    return {type: DEL_WORKLOG, DelWorklogId, DelParentId} as const\r\n}\r\nexport type TDeleteWorklog = typeof DeleteWorklog\r\n\r\nexport const SetIsPlayingWorklogById = (IsPlaying: boolean, ElementId?: number, IsFavorites ?: boolean) => {\r\n    return {type: SET_IS_PLAYING_WORKLOG_BY_ID, IsPlaying, ElementId, IsFavorites} as const\r\n}\r\nexport type TSetIsPlayingWorklogById = typeof SetIsPlayingWorklogById\r\n\r\nexport const ChangeWorklog = (WorkLogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_WORKLOG, WorkLogId, NewWorklog} as const\r\n}\r\nexport type TChangeWorklog = typeof ChangeWorklog\r\n\r\nexport const SetWorklogToChange = (WorklogToChange: TWorkLog | undefined = undefined) => {\r\n    return {type: SET_WORKLOG_TO_CHANGE, WorklogToChange} as const\r\n}\r\nexport type TSetWorklogToChange = typeof SetWorklogToChange\r\n\r\nexport const AddToFavorite = (WorklogId: number) => {\r\n    return {type: ADD_TO_FAVORITE, WorklogId} as const\r\n}\r\nexport type TAddToFavorite = typeof AddToFavorite\r\n\r\n\r\nexport const SendWorklogBlockThunk = (WorklogBlockData: TSendWorklogsData): TWorklogsThunks => async (dispatch) => {\r\n    console.log(WorklogBlockData)\r\n    const SendNewMessageResult = await API.SendWorklogBlock(WorklogBlockData)\r\n    // if (SendNewMessageResult.resultCode === 0) {\r\n    //     dispatch(GetWorklogs(WorklogBlockId))\r\n    // }\r\n}\r\nexport type TSendWorklogBlockThunk = typeof SendWorklogBlockThunk\r\n\r\nexport const SetWorklogStatus = (options: {\r\n    target: \"worklog\" | \"worklogblock\",\r\n    id: number,\r\n    status: \"ok\" | \"danger\" | \"warning\"\r\n}) => {\r\n    return {type: SET_WORKLOG_STATUS, options} as const\r\n}\r\nexport type TSetWorklogStatus = typeof SetWorklogStatus\r\n\r\nexport const DeleteFromFavorites = (WorklogId: number) => {\r\n    return {type: DELETE_FROM_FAVORITES, WorklogId} as const\r\n}\r\n\r\nexport type TDeleteFromFavorites = typeof DeleteFromFavorites\r\n\r\nexport const ChangeFavoritesWorklog = (WorklogId: number, NewWorklog: TWorkLog) => {\r\n    return {type: CHANGE_FAVORITES_WORKLOG, WorklogId, NewWorklog} as const\r\n}\r\n\r\nexport type TChangeFavoritesWorklog = typeof ChangeFavoritesWorklog\r\n\r\nexport default WorklogsReducer","import {randomInteger} from \"./WorkLogsReducer\";\r\nimport {GetCurrentDate} from \"../assets/secondary/GetCurrentDate\";\r\n\r\n\r\nconst SET_CLICKED_MONTH_DAYS = 'CALENDAR/SET_CLICKED_MONTH_DAYS'\r\n\r\nconst RandomStatus = (arr: Array<any>) => {\r\n    if (arr.length <= 0) {\r\n        throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    let rand = Math.floor(Math.random() * arr.length)\r\n    return arr[rand]\r\n}\r\n\r\n\r\nconst RandomDaysCreate = (statuses: Array<string> = [], IntroDaysCount: number, OutroDaysCount: number, DaysCount: number) => {\r\n    let MaxDaysLength = 35\r\n    let OutArr: Array<TDay> = []\r\n    let IntroDaysArr: Array<TDay> = []\r\n    let OutroDaysArr: Array<TDay> = []\r\n    let DaysArr: Array<TDay> = []\r\n\r\n    if (IntroDaysCount + OutroDaysCount + DaysCount > MaxDaysLength) {\r\n        throw new RangeError(`getRandom: maximum of days it  a ${MaxDaysLength}, please, enter the correct all days counts `);\r\n    } else {\r\n\r\n        for (let j = 1; j <= IntroDaysCount; j++) {\r\n            IntroDaysArr.push({\r\n                Signature: \"intro\",\r\n                DayNumber: j,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let n = 1; n <= DaysCount; n++) {\r\n            DaysArr.push({\r\n                Signature: \"main\",\r\n                DayNumber: n,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        for (let p = 1; p <= OutroDaysCount; p++) {\r\n            OutroDaysArr.push({\r\n                Signature: \"outro\",\r\n                DayNumber: p,\r\n                DayStatus: RandomStatus(statuses),\r\n                id: randomInteger(0, 10000)\r\n            })\r\n        }\r\n        OutArr.push(...IntroDaysArr)\r\n        OutArr.push(...DaysArr)\r\n        OutArr.push(...OutroDaysArr)\r\n        return OutArr\r\n    }\r\n}\r\n\r\n\r\nexport type TDay = {\r\n    Signature: string\r\n    DayNumber: number\r\n    DayStatus: string\r\n    id: number\r\n}\r\n\r\nexport  type TCalendar = Array<TDay>\r\n\r\nexport type TCalendars = {\r\n    January: TCalendar\r\n    February: TCalendar\r\n    March: TCalendar\r\n    April: TCalendar\r\n    May: TCalendar\r\n    June: TCalendar\r\n    July: TCalendar\r\n    August: TCalendar\r\n    September: TCalendar\r\n    October: TCalendar\r\n    November: TCalendar\r\n    December: TCalendar\r\n}\r\nexport type TClickedDay = {\r\n    id: number,\r\n    DayNumber: string | number\r\n    MonthName: string\r\n} | null\r\n\r\nexport type TCurrentDate = {\r\n    DayName : string\r\n    CurrentYear: number | string\r\n    CurrentMonth: keyof typeof DefaultState.Calendars\r\n    CurrentDay: number | string\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    Calendars: {\r\n        January: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        February: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        March: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 4, 30),\r\n        April: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        May: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        June: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        July: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 4, 1, 30),\r\n        August: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        September: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 3, 2, 30),\r\n        October: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 1, 3, 31),\r\n        November: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 3, 30),\r\n        December: RandomDaysCreate([\"ok\", \"danger\", \"warning\"], 2, 2, 31)\r\n    } as TCalendars,\r\n    ClickedMonthDay: null as TClickedDay,\r\n    CurrentDate: GetCurrentDate() as TCurrentDate\r\n}\r\n\r\ntype  DefaultTilesState = typeof DefaultState\r\n\r\n\r\ntype TTilesReducerActions = ReturnType<TSetClickedMonthDay>\r\n\r\nconst CalendarReducer = (state = DefaultState, action: TTilesReducerActions): DefaultTilesState => {\r\n\r\n    switch (action.type) {\r\n        case SET_CLICKED_MONTH_DAYS : {\r\n            return {\r\n                ...state,\r\n                ClickedMonthDay: action.Day\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetClickedMonthDay = (Day: TClickedDay) => {\r\n    return {type: SET_CLICKED_MONTH_DAYS, Day} as const\r\n}\r\nexport type TSetClickedMonthDay = typeof SetClickedMonthDay\r\n\r\nexport default CalendarReducer","const ADD_ISSUE = \"ISSUES/ADD_ISSUE\"\r\nconst DELETE_ISSUE = \"ISSUES/DELETE_ISSUE\"\r\nconst CHANGE_ISSUE = \"ISSUES/CHANGE_ISSUE\"\r\n\r\n\r\nlet DefaultState = {\r\n    Issues: [\"Footer design\", \"Testing Components\", \"Timer\",\r\n        \"Logo design\", \"Worklogs\", \"Fix buttons events\", \"Worklog thunks\", \"Worklogs actions\"] as string[],\r\n    CompletedIssues: [\"Some Item 1 \",\"Some Item 2 \",\"Some Item 3 \",\"Some Item  4\",\"Some Item 5 \"] as  string[]\r\n}\r\n\r\ntype  DefaultIssuesState = typeof DefaultState\r\n\r\n\r\ntype TIssuesReducerActions = ReturnType<TAddIssue> | ReturnType<TDeleteIssue> | ReturnType<TChangeIssue>\r\n\r\nconst IssuesReducer = (state = DefaultState, action: TIssuesReducerActions): DefaultIssuesState => {\r\n\r\n    const GetIssuesCopy = (): Array<string> => {\r\n        return JSON.parse(JSON.stringify(state.Issues))\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ADD_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: [...state.Issues, action.Issue]\r\n            }\r\n        }\r\n        case DELETE_ISSUE : {\r\n            return {\r\n                ...state,\r\n                Issues: action.From === \"Issues\"\r\n                    ? state.Issues.filter(Issue => Issue !== action.Issue)\r\n                    : state.Issues\r\n                ,\r\n                CompletedIssues: action.From === \"CompletedIssues\"\r\n                    ? state.CompletedIssues.filter(CompletedIssue => CompletedIssue !== action.Issue)\r\n                    : state.CompletedIssues\r\n            }\r\n        }\r\n        case CHANGE_ISSUE : {\r\n            let IssuesCopy = GetIssuesCopy()\r\n            IssuesCopy[IssuesCopy.findIndex((value) => value === action.OldIssue)] = action.NewIssue\r\n            return {\r\n                ...state,\r\n                Issues: IssuesCopy\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddIssue = (Issue: string) => {\r\n    return {type: ADD_ISSUE, Issue} as const\r\n}\r\nexport type TAddIssue = typeof AddIssue\r\n\r\nexport const DeleteIssue = (Issue: string, From: \"Issues\" | \"CompletedIssues\") => {\r\n    return {type: DELETE_ISSUE, Issue, From} as const\r\n}\r\nexport type TDeleteIssue = typeof DeleteIssue\r\n\r\nexport const ChangeIssue = (OldIssue: string, NewIssue: string) => {\r\n    return {type: CHANGE_ISSUE, OldIssue, NewIssue} as const\r\n}\r\nexport type TChangeIssue = typeof ChangeIssue\r\n\r\nexport default IssuesReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport CalendarReducer from \"./CalendarReducer\";\r\nimport WorkLogsReducer from \"./WorkLogsReducer\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport IssuesReducer from \"./IssuesReducer\";\r\n\r\nlet reducers = combineReducers({\r\n form : formReducer,\r\n CalendarData : CalendarReducer,\r\n WorklogsData  : WorkLogsReducer,\r\n IssuesData : IssuesReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport HS from \"./NavBar.module.css\"\r\nimport settings from \"../../assets/imgs/settings.svg\"\r\nimport FAQ from \"../../assets/imgs/second_icon.svg\"\r\nimport LogOutIcon from \"../../assets/imgs/door.svg\"\r\nimport AvatarIcon from \"../../assets/imgs/avatar.svg\"\r\n\r\n\r\nexport type TNavBarProps = {}\r\n\r\nconst NavBar: React.FC<TNavBarProps> = (props) => {\r\n    return (<div className={HS.navContainer}>\r\n        <div className={HS.navLinksContainer}>\r\n            <div className={HS.NavLinksPosition}>\r\n                <div className={HS.NavLinks}>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Home/All\">\r\n                            Home\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Issues/\">\r\n                            Issues\r\n                        </NavLink>\r\n                    </div>\r\n                  {/*  <div className={HS.item}>\r\n                        <NavLink to=\"/Filter/\">\r\n                            Filter\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={HS.item}>\r\n                        <NavLink to=\"/Projects/\">\r\n                            Projects\r\n                        </NavLink>\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={HS.NavIconsContainer}>\r\n            <div className={HS.NavIcons}>\r\n                <div className={HS.SmallIcons}>\r\n                    <img src={settings} alt=\"settings\"/>\r\n                </div>\r\n             {/*   <div className={HS.SmallIcons}>\r\n                    <img src={FAQ} alt=\"info\"/>\r\n                </div>*/}\r\n                <div className={HS.SmallIcons}>\r\n                    <img src={LogOutIcon} alt=\"door1\"/>\r\n                </div>\r\n                <div className={HS.AvatarIcons}>\r\n                    <img className=\"\" src={AvatarIcon} alt=\"avatar_icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n\r\n}\r\n\r\n\r\nexport default NavBar","export const DifferenceInTime = (TimesArr = []) => {\r\n    let firstDate = TimesArr[0];\r\n    let secondDate = TimesArr[1];\r\n    let getDate = (string) => new Date(0, 0, 0, string.split(':')[0], string.split(':')[1]);\r\n    let different = (getDate(secondDate) - getDate(firstDate));\r\n    let differentRes, hours, minuts;\r\n    if (different > 0) {\r\n        differentRes = different;\r\n        hours = Math.floor((differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(((differentRes % 86400000) % 3600000) / 60000);\r\n    } else {\r\n        differentRes = Math.abs((getDate(firstDate) - getDate(secondDate)));\r\n        hours = Math.floor(24 - (differentRes % 86400000) / 3600000);\r\n        minuts = Math.round(60 - ((differentRes % 86400000) % 3600000) / 60000);\r\n    }\r\n    if(minuts < 10 ){\r\n        minuts =  minuts + \"0\"\r\n    }\r\n    if (hours < 10) {\r\n        return \"0\" + hours + ':' + minuts + \":00\";\r\n    } else {\r\n        return hours + ':' + minuts + \":00\";\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport LS from \"./LineStroke.module.css\"\r\n\r\nexport type TAllProps = {\r\n\r\n}\r\n\r\nconst LineStroke : React.FC<TAllProps> = (props) => {\r\n    return ( <div className={LS.lineStroke}> </div>)\r\n}\r\n\r\nexport default LineStroke","import React, {Dispatch} from \"react\";\r\nimport WLDD from \"./WorklogDropDown.module.css\"\r\nimport {\r\n    CurrentDate,\r\n    randomInteger,\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo,\r\n    TNestingItem,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"../WorkLogsContainer\";\r\n\r\nexport type TWorklogDropDownProps = {\r\n    onHideMenu : ()=> void\r\n    OnDeleteModalOpen : (e : React.MouseEvent<HTMLElement>)=> void\r\n    SetDeleteModalParams : Dispatch<any>\r\n    ParentId ? : number\r\n    PlayingWorklog: TWorkLog | null\r\n    AddToFavorite : TAddToFavorite\r\n    WorklogId : number\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    JiraCode: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    Issue?: string | null\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    NestingIsShowing: boolean\r\n    BlockInfo?: TBlockInfo\r\n}\r\n\r\nconst WorkLogDropDown: React.FC<TWorklogDropDownProps> = (props) => {\r\n\r\n    const OnDeleteModalOpenContainer = (e : React.MouseEvent<HTMLElement>)=>{\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog )\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate && !props.PlayingWorklog)){\r\n            props.SetDeleteModalParams({\r\n                WorkLogToDeleteId : props.WorklogId,\r\n                ParentId : props.ParentId\r\n            })\r\n\r\n            props.OnDeleteModalOpen(e)\r\n        }\r\n    }\r\n    const OnAddToFavorites = () =>{\r\n        if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\"){\r\n            if(props.ParentId)  props.AddToFavorite(props.WorklogId)\r\n            else props.AddToFavorite(props.WorklogId)\r\n        }\r\n\r\n    }\r\n\r\n    const OnDuplicateWorklog = () =>{\r\n   if(!props.PlayingWorklog?.id && props.ComponentToDraw === \"Worklogs\" ) {\r\n            let CurrentWorklog : TWorkLog = {\r\n                id: randomInteger(0, 10000),\r\n                TaskField: props.TaskField,\r\n                Issue: props.Issue,\r\n                StartTime: props.StartTime,\r\n                EndTime: props.EndTime,\r\n                NestingItems: props.NestingItems,\r\n                JiraCode: props.JiraCode,\r\n                IsNesting: props.IsNesting,\r\n                status: props.status,\r\n                TimerValue: \"00:00:00\",\r\n            }\r\n            props.AddWorklog(CurrentWorklog)\r\n        }\r\n    }\r\n\r\n\r\n    return (<div onMouseLeave={props.onHideMenu} className={WLDD.Container}>\r\n        <div onClick={props.onHideMenu} className={WLDD.ContentContainer}>\r\n\r\n            <div onClick={OnDuplicateWorklog} className={WLDD.ContainerEl}>\r\n                Duplicate\r\n            </div>\r\n            <div onClick={OnAddToFavorites} className={WLDD.ContainerEl}>\r\n                Add to Favorite\r\n            </div>\r\n            <div onClick={OnDeleteModalOpenContainer} className={WLDD.ContainerEl}>\r\n                Delete\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default WorkLogDropDown","import React from \"react\";\r\nimport DS from \"./DeleteConfirm.module.css\"\r\nimport ConfirmButton from \"../../assets/imgs/confirmButton.svg\"\r\nimport DeclineButton from \"../../assets/imgs/declineButton.svg\"\r\nimport MS from \"../ModalWindow/ModalWindow.module.css\";\r\nimport {TDeleteFromFavorites, TDeleteWorklog} from \"../../Data/WorkLogsReducer\";\r\nimport {TDeleteModalParams} from \"../WorkLogs/WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"../WorkLogs/WorkLogsContainer\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { green } from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\n\r\nexport type TDeleteWorklogConfirmModalProps = {\r\n    isOpen : boolean\r\n    onClose: ()=> void\r\n    WorkLogToDeleteId : number\r\n    DeleteWorklog : TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams : TDeleteModalParams | undefined\r\n    ComponentToDraw : TComponentToDraw\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\nconst DeleteWorklogConfirmModal : React.FC<TDeleteWorklogConfirmModalProps> = (props) => {\r\n    const OnModalSubmit = (e: React.MouseEvent<HTMLElement>) => {\r\n        if(props.DeleteModalParams){\r\n           props.ComponentToDraw === \"Worklogs\"\r\n               ? props.DeleteWorklog(props.DeleteModalParams.WorkLogToDeleteId,props.DeleteModalParams.ParentId)\r\n               : props.DeleteFromFavorites(props.DeleteModalParams.WorkLogToDeleteId)\r\n            props.onClose()\r\n        }\r\n    }\r\n        if (!props.isOpen) return null\r\n\r\n        return (\r\n            <div className=\"DeleteConfirmModal\">\r\n                <div className={DS.modal}>\r\n                    <div className={DS.ModalTextContainer}>\r\n                        Are you sure you want to delete the worklog?\r\n                    </div>\r\n                    <div className={DS.NewWorklogControlButtonsContainer}>\r\n                        <div className={DS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor : \"pointer\"}}  fontSize=\"large\" />\r\n                               {/* <img className={DS.NewWorklogSubmitButtonSize}\r\n                                     src={ConfirmButton} alt={\"submit\"}/>*/}\r\n                            </div>\r\n                            <div className=\"modal-close\">\r\n                                <ClearIcon onClick={props.onClose}  style={{cursor : \"pointer\", marginLeft : \"50px\"}}  fontSize=\"large\" color=\"action\" />\r\n                        {/*        <img onClick={props.onClose} className={DS.NewWorklogControlButton}\r\n                                     src={DeclineButton} alt={\"decline\"}/>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={MS.bg} onClick={e => props.onClose}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default DeleteWorklogConfirmModal\r\n\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog, TDeleteFromFavorites, TDeleteWorklog, TNestingItem,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange, TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\n\r\n\r\nexport type TNestingWorkLogProps = {\r\n    NestingItems?: Array<TNestingItem> | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    ParentId?: number\r\n    id : number\r\n    SetDeleteModalParams: any\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw : TComponentToDraw\r\n    AddWorklog : TAddWorklog\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst NestingWorkLog: React.FC<TNestingWorkLogProps> = (props) => {\r\n\r\n    return (<div className=\"NestedItem\">\r\n        {props.NestingItems?.map(NestingItem=>{\r\n            return(\r\n                <WorkLog {...props}\r\n                        key={NestingItem.id}\r\n                         StartTime={NestingItem.StartTime}\r\n                         EndTime={NestingItem.EndTime}\r\n                         JiraCode={NestingItem.JiraCode}\r\n                         TaskField={NestingItem.TaskField}\r\n                         TimerValue={NestingItem.TimerValue}\r\n                         status={NestingItem.status}\r\n                         id={NestingItem.id}\r\n                         IsNesting={false}\r\n                         ParentId={props.id}\r\n                         Issue={NestingItem.Issue}\r\n                         DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n            )})\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default NestingWorkLog","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport PlayButton from \"../../assets/imgs/play-button.svg\"\r\nimport LineStroke from \"../LineStroke/LineStroke\";\r\nimport WLMoreButtonBG from \"../../assets/imgs/worklogMoreButtonBG.svg\"\r\nimport WLMoreButtonVertical from \"../../assets/imgs/worklogMoreVertical.svg\"\r\nimport CP_danger from \"../../assets/imgs/danger_cp.svg\"\r\nimport CP_warning from \"../../assets/imgs/warning_cp.svg\"\r\nimport CP_ok from \"../../assets/imgs/ok_cp.svg\"\r\nimport {\r\n    TSetIsPlayingWorklogById,\r\n    TNestingItem,\r\n    TWorkLog,\r\n    TDeleteWorklog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TAddWorklog, TBlockInfo, TDeleteFromFavorites, CurrentDate\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport ArrowUp from \"../../assets/imgs/arrow-up.svg\"\r\nimport WorkLogDropDown from \"./DropDown/WorklogDropDown\";\r\nimport StopButton from \"../../assets/imgs/stop_button.svg\"\r\nimport DeleteWorklogConfirmModal from \"../DeleteConfirmModal/DeleteConfirmModal\";\r\nimport {TDeleteModalParams} from \"./WorkLogsBlock\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport NestingWorkLog from \"./NestingWorkLog\";\r\nimport WorklogActiveBG from \"../../assets/imgs/ActiveWorklogBG.svg\"\r\n\r\n\r\nexport type TWorklogProps = {\r\n    StartTime: string | null\r\n    EndTime: string | null\r\n    JiraCode: string | null\r\n    TaskField: string | null\r\n    TimerValue: string | null\r\n    IsNesting?: boolean\r\n    Issue?: string | null\r\n    id: number\r\n    IsFavorites? : boolean\r\n    NestingItems?: Array<TNestingItem> | null\r\n    status: \"ok\" | \"warning\" | \"danger\" | string\r\n    ParentId?: number\r\n\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    OnDeleteModalOpen: (e: React.MouseEvent<HTMLElement>) => void\r\n    OnDeleteModalClose: () => void\r\n    DeleteModalIsOpen: boolean\r\n    DeleteWorklog: TDeleteWorklog | TDeleteFromFavorites\r\n    SetDeleteModalParams: Dispatch<any>\r\n    DeleteModalParams: TDeleteModalParams | undefined\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    AddToFavorite: TAddToFavorite\r\n    ComponentToDraw: TComponentToDraw\r\n    AddWorklog: TAddWorklog\r\n    BlockInfo?: TBlockInfo\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nconst WorkLog: React.FC<TWorklogProps> = (props) => {\r\n\r\n    let [ShowMenu, SetShowMenu] = useState<boolean>()\r\n    let [NestingIsShowing, SetNestingIsShowing] = useState(false)\r\n\r\n    const OnShowNestingWorklogs = () => {\r\n        SetNestingIsShowing(true)\r\n    }\r\n\r\n    const OnHideNestingWorklogs = () => {\r\n        SetNestingIsShowing(false)\r\n    }\r\n    const OnShowMenu = () => {\r\n        SetShowMenu(true)\r\n    }\r\n    const OnHideMenu = () => {\r\n        SetShowMenu(false)\r\n    }\r\n\r\n    const onPlayButtonClicked = () => {\r\n    if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n        || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n        props.SetIsPlayingWorklogById(true, props.id,props.ComponentToDraw === \"FavoritesWorklogs\")\r\n    }\r\n\r\n    }\r\n    const onStopButtonClicked = () => {\r\n        props.SetIsPlayingWorklogById(false, props.id)\r\n    }\r\n\r\n    const OnSetWorklogToChange = () => {\r\n        if((props.ComponentToDraw === \"FavoritesWorklogs\" && !props.PlayingWorklog)\r\n            || (props.BlockInfo?.BlockCreatedDate === CurrentDate &&  !props.PlayingWorklog)) {\r\n            let keys = [\"id\", \"StartTime\", \"TaskField\", \"TimerValue\", \"EndTime\"\r\n                , \"status\", \"IsNesting\", \"JiraCode\", \"NestingItems\", \"Issue\", \"ParentId\"]\r\n            let WorklogToChange = {} as TWorkLog\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //@ts-ignore\r\n                WorklogToChange[`${(keys[i])}`] = props[keys[i]]\r\n            }\r\n            props.ComponentToDraw === \"Worklogs\"\r\n                ? WorklogToChange.IsFavorites = false\r\n                : WorklogToChange.IsFavorites = true\r\n\r\n            props.SetWorklogToChange(WorklogToChange)\r\n            props.openWorklogChangeModal()\r\n        }\r\n    }\r\n\r\n    return  (<div className={WLS.WorkLogs}>\r\n        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n            ? WLS.WorklogBlockContainerActive\r\n            : WLS.WorklogBlockContainer}>\r\n            <div className=\"WorklogBG\">\r\n\r\n                {\r\n                     <img className={props.PlayingWorklog?.id === props.id || ShowMenu? WLS.WorklogActiveBG :WLS.WorklogBG}\r\n                          src={WorklogActiveBG} alt=\"\"/>\r\n                }\r\n\r\n                <div className={WLS.WorklogActive}>\r\n                    <div className={WLS.WorklogBlock}>\r\n\r\n                        {props.IsNesting\r\n                            ? <div className={WLS.NestingButtonPose}>\r\n                                {NestingIsShowing\r\n                                    ? <div onClick={OnHideNestingWorklogs} className={WLS.NestingBG}><img\r\n                                        className={WLS.TwwContentImg} src={ArrowUp} alt=\"\"/>\r\n                                    </div>\r\n\r\n                                    : <div onClick={OnShowNestingWorklogs} className={WLS.NestingBG}> <span\r\n                                        className={WLS.TwwContentText}>\r\n                                {props.NestingItems?.length}\r\n                            </span>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            : props.StartTime && props.EndTime ? <div className={WLS.WorkTime}>\r\n                                    <div className={WLS.StartTime}>\r\n                                        {props.StartTime}\r\n                                    </div>\r\n                                    <div className={WLS.Minus}>\r\n                                        -\r\n                                    </div>\r\n                                    <div className={WLS.EndTime}>\r\n                                        {props.EndTime}\r\n                                    </div>\r\n                                </div>\r\n                                : <div> </div>}\r\n\r\n                        <div className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                            ? WLS.ColorPointPoseActive\r\n                            : WLS.ColorPointPose}>\r\n                            <img src={props.status === \"ok\"\r\n                                ? CP_ok : props.status === \"warning\"\r\n                                    ? CP_warning : props.status === \"danger\"\r\n                                        ? CP_danger : undefined} alt=\"\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div onClick={OnSetWorklogToChange} className={WLS.WorklogContentContainer}>\r\n                            <div className={WLS.JiraCode}>\r\n                                {props.JiraCode}\r\n                            </div>\r\n                            <div className={WLS.TaskField}>\r\n                                {props.TaskField}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className={WLS.TimerValueContainer}>\r\n                            <div className={WLS.TimerValue}>{props.TimerValue}</div>\r\n                        </div>\r\n\r\n                        {props.PlayingWorklog?.id === props.id\r\n\r\n                            ? <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onStopButtonClicked} className={WLS.StopButton}>\r\n                                    <img src={StopButton} alt=\"stop-button\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className={WLS.ControlButtonsContainer}>\r\n                                <div onClick={onPlayButtonClicked} className={WLS.PlayButton}>\r\n                                    <img src={PlayButton} alt=\"play-button\"/>\r\n                                </div>\r\n                            </div>}\r\n\r\n                        <div className=\"WLMoreContainer\">\r\n                            <div  className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreButtonActive\r\n                                : WLS.WorklogMoreButton}>\r\n                                <img src={WLMoreButtonBG} alt=\"\"/>\r\n                            </div>\r\n                            <div onMouseEnter={OnShowMenu} className={props.PlayingWorklog?.id === props.id || ShowMenu\r\n                                ? WLS.WorklogMoreVerticalActive\r\n                                :WLS.WorklogMoreVertical}>\r\n                                <img src={WLMoreButtonVertical} alt=\"more-vertical\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <DeleteWorklogConfirmModal DeleteModalParams={props.DeleteModalParams} DeleteWorklog={props.DeleteWorklog}\r\n                                       WorkLogToDeleteId={props.id} isOpen={props.DeleteModalIsOpen}\r\n                                       onClose={props.OnDeleteModalClose}\r\n                                       ComponentToDraw={props.ComponentToDraw}\r\n                                       DeleteFromFavorites={props.DeleteFromFavorites}\r\n            />\r\n\r\n            <div className={props.PlayingWorklog?.id === props.id\r\n                ? WLS.WLlinestrokeActive\r\n                : WLS.WLlinestroke}>\r\n                <LineStroke/>\r\n            </div>\r\n\r\n        </div>\r\n        {ShowMenu && <WorkLogDropDown {...props}\r\n                                      onHideMenu={OnHideMenu}\r\n                                      WorklogId={props.id}\r\n                                      NestingIsShowing={NestingIsShowing}\r\n\r\n        />}\r\n\r\n        {NestingIsShowing &&  <NestingWorkLog {...props} />\r\n\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default WorkLog","import React from \"react\";\r\n//@ts-ignore\r\nimport {Progress} from 'bootstrap-4-react';\r\n\r\nexport type TProgressBarProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | string\r\n}\r\n\r\nconst ProgressBar: React.FC<TProgressBarProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Progress  style={{ width: \"100px\", height: \"8px\", borderRadius : \"20px\"}} >\r\n                <Progress.Bar  min=\"0\" max=\"100\" now={props.status === \"ok\" ?\r\n                    \"90\" : props.status === \"warning\"\r\n                        ? \"50\" : props.status === \"danger\"\r\n                            ? \"25\" : null}\r\n\r\n                              bg={props.status === \"ok\" ?\r\n                                  \"success\" : props.status === \"warning\"\r\n                                      ? \"warning\" : props.status === \"danger\"\r\n                                          ? \"danger\" : null}/>\r\n            </Progress>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ProgressBar","import React from \"react\";\r\nimport FS from \"./WorklogInfo.module.css\"\r\n//import DownloadIcon from \"../../../assets/imgs/download.svg\"\r\nimport ProgressBar from \"../../ProgressBar/ProgressBar\";\r\nimport LineStroke from \"../../LineStroke/LineStroke\";\r\nimport {\r\n    CurrentDate,\r\n    TBlockInfo,\r\n    TSendWorklogBlockThunk,\r\n    TSendWorklogsData,\r\n    TSetWorklogStatus,\r\n    TWorkLog\r\n} from \"../../../Data/WorkLogsReducer\";\r\nimport {TShowTooltip} from \"../../../App\";\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\n\r\n\r\nexport type TWorklogInfoProps = {\r\n    DateOfCreation: string | null\r\n    SummaryTime: string | null\r\n    SummaryStatus: \"ok\" | \"danger\" | \"warning\" | string\r\n    BlockInfo: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    showTooltip: TShowTooltip\r\n    SetWorklogStatus: TSetWorklogStatus\r\n}\r\n\r\nconst WorklogInfo: React.FC<TWorklogInfoProps> = (props) => {\r\n\r\n    const OnSendWorklogData = () : void => {\r\n        props.Worklogs.map(Worklog => {\r\n            if (!Worklog.Issue || Worklog.Issue.length <= 0) {\r\n                props.showTooltip({\r\n                    text: \"Issue does not exist.\",\r\n                    status: \"danger\"\r\n                })\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"danger\", id: Worklog.id})\r\n            } else if (!Worklog.TaskField || Worklog.TaskField.length <= 0) {\r\n                props.showTooltip({\r\n                    text: \"Please, enter the worklog name.\",\r\n                    status: \"warning\"\r\n                })\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"warning\", id: Worklog.id})\r\n            } else if (!Worklog.TimerValue || !Worklog.StartTime || !Worklog.EndTime) {\r\n                props.showTooltip({text: \"Something goes wrong\", status: \"danger\"})\r\n            } else {\r\n                props.SetWorklogStatus({target: \"worklog\", status: \"ok\", id: Worklog.id})\r\n                props.showTooltip({text: \"your worklog successfully logged.\", status: \"ok\"})\r\n            }\r\n        })\r\n\r\n        if (props.Worklogs.every(Worklog => Worklog.EndTime && Worklog.StartTime && Worklog.TimerValue\r\n            && Worklog.TaskField && Worklog.Issue)) {\r\n            let ObjToSend: TSendWorklogsData = {\r\n                WorkLogsBlocks: {\r\n                    BlockInfo: props.BlockInfo,\r\n                    Worklogs: props.Worklogs\r\n                }\r\n            }\r\n            props.SendWorklogBlockThunk(ObjToSend)\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"ok\", id: props.BlockInfo.id})\r\n            props.showTooltip({text: \"your worklog successfully logged.\", status: \"ok\"})\r\n        }\r\n        else {\r\n            props.showTooltip({text: \"Issue does not exist.\", status: \"danger\"})\r\n            props.SetWorklogStatus({target: \"worklogblock\", status: \"danger\", id: props.BlockInfo.id})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={FS.SummaryWorklogInfo}>\r\n                <div className={FS.DateBlockContainer}>\r\n                    <div className={FS.DateBlockSize}>\r\n                        {props.DateOfCreation}\r\n                    </div>\r\n                </div>\r\n                <div className={FS.DateTime}>\r\n                    <div>\r\n                        {props.SummaryTime}\r\n                    </div>\r\n\r\n                    <div className={FS.Progress}>\r\n                        <ProgressBar status={props.SummaryStatus}/>\r\n                    </div>\r\n                </div>\r\n                {props.BlockInfo.BlockCreatedDate === CurrentDate\r\n                    ? <BackupIcon style={{cursor : \"pointer\"}} color={\"primary\"} fontSize={\"large\"}\r\n                                onClick={OnSendWorklogData}\r\n                                className={FS.DownloadIcon}>\r\n                    </BackupIcon>\r\n\r\n                    : <BackupIcon color={\"disabled\"} fontSize={\"large\"}\r\n                                         className={FS.DownloadIcon}>\r\n                     </BackupIcon>\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className={FS.WLlineStrokeContainer}>\r\n                <LineStroke/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorklogInfo","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {DifferenceInTime} from \"../../assets/secondary/DifferenceInTime\";\r\nimport WorkLog from \"./WorkLog\";\r\nimport WorklogInfo from \"./WorklogInfo/WorklogInfo\";\r\nimport WLS from \"./WorkLog.module.css\"\r\nimport {\r\n    TAddToFavorite,\r\n    TAddWorklog,\r\n    TBlockInfo, TDeleteFromFavorites,\r\n    TDeleteWorklog,\r\n    TSendWorklogBlockThunk,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogStatus,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {TComponentToDraw} from \"./WorkLogsContainer\";\r\nimport {TShowTooltip} from \"../../App\";\r\n//import WorkLogTimeLine from \"./TimePicker/WorkLogTimeLine\";\r\n\r\nexport type TWorklogsBlockProps = {\r\n    BlockInfo?: TBlockInfo\r\n    Worklogs: Array<TWorkLog>\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    AddToFavorite: TAddToFavorite\r\n    AddWorklog: TAddWorklog\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    showTooltip: TShowTooltip\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type TDeleteModalParams = {\r\n    ParentId?: number\r\n    WorkLogToDeleteId: number\r\n}\r\n\r\nconst WorkLogsBlock: React.FC<TWorklogsBlockProps> = (props) => {\r\n\r\n    let [DeleteModalIsOpen, SetDeleteModalIsOpen] = useState(false)\r\n    let [DeleteModalParams, SetDeleteModalParams] = useState<TDeleteModalParams>()\r\n\r\n    const OnDeleteModalOpen = (e: React.MouseEvent<HTMLElement>) => {\r\n        SetDeleteModalIsOpen(true)\r\n    }\r\n    const OnDeleteModalClose = () => {\r\n        SetDeleteModalIsOpen(false)\r\n    }\r\n\r\n    return (<>\r\n        {props.ComponentToDraw === \"Worklogs\" && props.BlockInfo &&\r\n        <div id={(props.BlockInfo?.id).toString()} className={WLS.WorklogInfoContainer}>\r\n            <WorklogInfo DateOfCreation={props.BlockInfo.BlockCreatedDate}\r\n                         SummaryTime={props.BlockInfo.SummaryTime}\r\n                         SummaryStatus={props.BlockInfo.SummaryStatus}\r\n                         Worklogs={props.Worklogs}\r\n                         SendWorklogBlockThunk={props.SendWorklogBlockThunk}\r\n                         BlockInfo={props.BlockInfo}\r\n                         showTooltip={props.showTooltip}\r\n                         SetWorklogStatus={props.SetWorklogStatus}\r\n            />\r\n        </div>\r\n        }\r\n\r\n        {\r\n                props[props.ComponentToDraw].map(el => {\r\n                    return <div key={el.id} className=\"worklog\">\r\n                        <WorkLog\r\n                            {...el}\r\n                            {...props}\r\n                            TimerValue={el.TimerValue\r\n                                ? el.TimerValue\r\n                                : el.StartTime && el.EndTime\r\n                                    ? DifferenceInTime([el.StartTime, el.EndTime])\r\n                                    : null}\r\n                            DeleteModalIsOpen={DeleteModalIsOpen}\r\n                            OnDeleteModalClose={OnDeleteModalClose}\r\n                            OnDeleteModalOpen={OnDeleteModalOpen}\r\n                            SetDeleteModalParams={SetDeleteModalParams}\r\n                            DeleteModalParams={DeleteModalParams}\r\n                            AddWorklog={props.AddWorklog}\r\n                            DeleteWorklog={props.DeleteWorklog }\r\n                            DeleteFromFavorites={props.DeleteFromFavorites}\r\n                        />\r\n                    </div>\r\n                })\r\n        }\r\n\r\n    </>)\r\n}\r\n\r\nexport default WorkLogsBlock","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TWorklogBlock,\r\n    AddWorklog,\r\n    SetIsPlayingWorklogById,\r\n    DeleteWorklog, SetWorklogToChange, AddToFavorite, SendWorklogBlockThunk,\r\n    SetWorklogStatus,DeleteFromFavorites,\r\n    TDeleteWorklog, TAddWorklog, TSetIsPlayingWorklogById, TWorkLog,\r\n    TSetWorklogToChange, TTimerData, TAddToFavorite, TSendWorklogBlockThunk, TSetWorklogStatus, TDeleteFromFavorites\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"./WorkLogsBlock\";\r\nimport {TShowTooltip} from \"../../App\";\r\n\r\nexport type TComponentToDraw = \"Worklogs\" | \"FavoritesWorklogs\"\r\nexport type TWorkLogsContainerOwnProps = {\r\n    openWorklogChangeModal: () => void\r\n    ComponentToDraw: TComponentToDraw\r\n    showTooltip: TShowTooltip\r\n\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n}\r\n\r\nexport type T_MSTP_WorkLogsContainer = {\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    PlayingWorklog: TWorkLog | null\r\n    FavoritesWorklogs : Array<TWorkLog>\r\n}\r\n\r\nexport type T_MDTP_WorkLogsContainer = {\r\n    AddWorklog: TAddWorklog\r\n    DeleteWorklog: TDeleteWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    AddToFavorite: TAddToFavorite\r\n    SendWorklogBlockThunk: TSendWorklogBlockThunk\r\n    SetWorklogStatus: TSetWorklogStatus\r\n    DeleteFromFavorites : TDeleteFromFavorites\r\n}\r\n\r\n\r\ntype TDialogsContainerProps = T_MDTP_WorkLogsContainer & T_MSTP_WorkLogsContainer & TWorkLogsContainerOwnProps\r\n\r\nclass WorkLogsContainer extends React.Component<TDialogsContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WorklogBlockWrapper\">\r\n                {this.props.ComponentToDraw === \"Worklogs\"\r\n                    ? this.props.WorklogsBlocks.map(el => {\r\n                        return <div key={el.BlockInfo.id} className=\"Worklogs\">\r\n                            <WorkLogsBlock BlockInfo={el.BlockInfo}\r\n                                           Worklogs={el.Worklogs}\r\n                                           {...this.props}\r\n                            />\r\n                        </div>\r\n                    })\r\n                    :\r\n                    <div style={{paddingTop: \"52px\"}} className=\"FavoritesWorklogsWrapper\">\r\n                        <WorkLogsBlock\r\n                            {...this.props}\r\n                            Worklogs={this.props.FavoritesWorklogs}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_WorkLogsContainer => ({\r\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    FavoritesWorklogs : state.WorklogsData.FavoritesWorklogs\r\n})\r\n\r\nexport default compose(connect<T_MSTP_WorkLogsContainer, T_MDTP_WorkLogsContainer, TWorkLogsContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, DeleteWorklog,\r\n    SetIsPlayingWorklogById, SetWorklogToChange, AddToFavorite,\r\n    SendWorklogBlockThunk,SetWorklogStatus,DeleteFromFavorites\r\n}))\r\n    //@ts-ignore\r\n    (WorkLogsContainer)","\r\n\r\nexport const ToFullTime = (value) =>{\r\n    if(typeof value === \"string\"){\r\n        let Numbered =  Number.parseInt(value)\r\n        if(Numbered < 10){\r\n            return \"0\" + Numbered\r\n        }\r\n        else return value\r\n    }\r\n    else if (typeof value === \"number\"){\r\n        if(value < 10){\r\n            return \"0\" + value\r\n        }\r\n        else return value\r\n    }\r\n}\r\n\r\nexport const CalculateNewStartTime = (CurrentTime,hours,minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let [CurrentHours,CurrentMinutes] = [...CurrentTime.split(\":\")]\r\n        CurrentHours = Number.parseInt(CurrentHours)\r\n        CurrentMinutes = Number.parseInt(CurrentMinutes)\r\n\r\n         if(CurrentHours <= 0 ) {\r\n             CurrentHours = CurrentHours + 24\r\n        }\r\n        if(CurrentMinutes < minutes) {\r\n            CurrentMinutes = CurrentMinutes + 60\r\n            CurrentHours = CurrentHours -1\r\n         }\r\n        let StartTime = ToFullTime(CurrentHours - hours) + \":\" + ToFullTime(CurrentMinutes - minutes)\r\n         return StartTime\r\n    }\r\n}\r\n\r\n\r\nexport const CalculateTime = (CurrentTime, hours, minutes)=>{\r\n    if(CurrentTime && hours && minutes){\r\n        let HoursAndMinutes = CurrentTime.split(\":\")\r\n        let Res = ToFullTime(Number.parseInt(hours) + Number.parseInt(HoursAndMinutes[0]) )\r\n            +\r\n            \":\"\r\n            + ToFullTime(Number.parseInt(minutes) + Number.parseInt(HoursAndMinutes[1]))\r\n\r\n        return Res\r\n    }\r\n }","import React, {useState, useEffect} from 'react';\r\nimport TS from \"./Timer.module.css\"\r\nimport TTStopButton from \"../../assets/imgs/TT-stop-button.svg\"\r\nimport TTPauseButton from \"../../assets/imgs/TT-pause-button.svg\"\r\nimport PlayButton from \"@material-ui/icons/PlayCircleFilled\"\r\nimport {ToFullTime} from \"../../assets/secondary/CalculateTime\"\r\n\r\n\r\nconst Timer = (props) => {\r\n    const [seconds, setSeconds] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(6, props.PlayingWorklog.TimerValue.length)))\r\n    const [minutes, setMinutes] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(3, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [hours, setHours] = useState(Number.parseInt(props.PlayingWorklog.TimerValue.substr(0, props.PlayingWorklog.TimerValue.length - 6)))\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [WorklogInputValue,SetWorklogInputValue] = useState()\r\n    const [IssueInputValue,SetIssueInputValue] = useState()\r\n\r\n    const OnWorklogInputValueChange = (e) =>{\r\n        SetWorklogInputValue(e.target.value)\r\n    }\r\n    const OnIssueInputValueChange = (e) =>{\r\n        SetIssueInputValue(e.target.value)\r\n    }\r\n\r\n\r\n    const  toggle = () => {\r\n        setIsActive(!isActive);\r\n    }\r\n    const OnStopTimer =() =>{\r\n        props.openWorklogChangeModal()\r\n        setIsActive(!isActive)\r\n        let TimerData = {\r\n            TimerValue : ToFullTime(hours) + \":\"+ ToFullTime(minutes) + \":\" +ToFullTime(seconds),\r\n            TimerIssue  : IssueInputValue ? IssueInputValue : props.PlayingWorklog?.Issue,\r\n            TimerTaskField: WorklogInputValue ? WorklogInputValue : props.PlayingWorklog?.TaskField,\r\n        }\r\n        props.SetTimerData(TimerData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (!isActive) {\r\n            interval = setInterval(() => {\r\n                setSeconds(seconds => seconds + 1);\r\n                if (seconds > 59) {\r\n                    setMinutes(minutes => minutes + 1)\r\n                    setSeconds(0)\r\n                }\r\n                if (minutes > 59) {\r\n                    setHours(hours => hours + 1)\r\n                    setMinutes(0)\r\n                }\r\n                if (hours > 23) {\r\n                    setHours(0)\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000);\r\n        } else if (isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, seconds, minutes, hours]);\r\n\r\n    return (\r\n\r\n        <div className={TS.TimeRContainer}>\r\n            <input className={TS.TimerWorklogName}\r\n                   placeholder={\"add worklog\"}\r\n                   defaultValue={props.PlayingWorklog.TaskField}\r\n                   value={WorklogInputValue}\r\n                   onChange={OnWorklogInputValueChange}\r\n                   type=\"text\"/>\r\n\r\n            <input className={TS.TimerIssueName}\r\n                   placeholder={\"add issue\"}\r\n                  defaultValue={props.PlayingWorklog.Issue && props.PlayingWorklog.Issue}\r\n                   value={IssueInputValue}\r\n                   onChange={OnIssueInputValueChange}\r\n                   type=\"text\"/>\r\n\r\n            <div className={TS.Timer}>\r\n                {ToFullTime(hours)}:{ToFullTime(minutes)}:{ToFullTime(seconds)}\r\n            </div>\r\n\r\n            <div className={TS.TimerControlButtonsContainer}>\r\n                <div className={TS.TimerControlButtons}>\r\n                    <div onClick={OnStopTimer}>\r\n                        <img src={TTStopButton} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"controlButtons\" onClick={toggle}>\r\n                        {!isActive ?\r\n                            <img src={TTPauseButton} alt=\"\"/>\r\n                            : <PlayButton style={{width: \"50px\", height: \"50px\"}} color={\"primary\"}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Timer","import React from \"react\";\r\nimport TTS from \"./TimeTracking.module.css\"\r\nimport StrokeVert from \"../../assets/imgs/stroke_vert.svg\"\r\nimport StrokeHoriz from \"../../assets/imgs/stroke_horiz.svg\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\"\r\nimport NewWorklogButtonShadowed from \"../../assets/imgs/new_worklog_button_shadowed.svg\"\r\n//import LongMenu from \"../DropDownMenu/DropDownMenu\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport {TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById, TTimerData, TWorkLog} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TTimeTrackingProps = {\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog: TWorkLog | null\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    FavoritesIsClicked: boolean\r\n    openWorklogChangeModal : ()=> void\r\n    SetTimerData : (TimerData : TTimerData) => void\r\n}\r\n\r\nconst TimeTracking: React.FC<TTimeTrackingProps> = (props) => {\r\n\r\n    const OnAddEmptyWorklog = () =>{\r\n        props.AddWorklog()\r\n    }\r\n\r\n    return (<div className={TTS.TTLayout}>\r\n            <div className={TTS.strokeVert}>\r\n                <img src={StrokeVert} alt=\"stroke-vert\"/>\r\n            </div>\r\n            <div className={TTS.TTContent}>\r\n\r\n\r\n                <div className={TTS.TimetrackingHeaderContainer}>\r\n                    <div className={TTS.TimetrackingHeader}>\r\n\r\n                        <div className={TTS.TimeTrackingLogo}>\r\n                            Time tracking\r\n                        </div>\r\n\r\n                        {/*{!props.PlayingWorklog.id && <LongMenu/>}*/}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {props.PlayingWorklog\r\n                    ? <Timer SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\r\n                             PlayingWorklog={props.PlayingWorklog}\r\n                             openWorklogChangeModal={props.openWorklogChangeModal}\r\n                             SetTimerData={props.SetTimerData}\r\n                             ChangeWorklog={props.ChangeWorklog}\r\n                    />\r\n                    : <div className={TTS.TTMainContentRoot}>\r\n                            <div className={TTS.NewWorklogContainer}>\r\n                                <div className={TTS.NewWorklog}>\r\n\r\n                                    <div onClick={!props.FavoritesIsClicked\r\n                                        ? OnAddEmptyWorklog\r\n                                        : undefined}\r\n                                         className={TTS.NewWorklogButtonPose}>\r\n\r\n                                        <img className={TTS.NewWorklogButtonSize}\r\n\r\n                                             src={props.FavoritesIsClicked\r\n                                                 ? NewWorklogButtonShadowed\r\n                                                 : NewWorklogButton\r\n                                             }\r\n                                             alt=\"new_worklog_button\"/>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n                                        <div className={TTS.NewWorklogButtonDescription}>\r\n                                            new worklog\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        <div className={TTS.TTHorizStrokePose}>\r\n                            <img src={StrokeHoriz} alt=\"\"/>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TimeTracking","import React from \"react\";\r\nimport TTS from \"../TimeTracking/TimeTracking.module.css\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport NewWorklogButton from \"../../assets/imgs/new_worklog_button.svg\";\r\nimport {TAddWorklog, TTimerData, TWorkLog, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsContainer from \"../WorkLogs/WorkLogsContainer\";\r\n\r\nexport type TFavoritesPageProps = {\r\n    FavoritesIsClicked: boolean\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n    TimerData: TTimerData | undefined\r\n    openWorklogChangeModal: () => void\r\n    AddWorklog : TAddWorklog\r\n    PlayingWorklog : TWorkLog | null\r\n    FavoritesWorklog : Array<TWorkLog>\r\n}\r\n\r\nconst FavoritesPage: React.FC<TFavoritesPageProps> = (props) => {\r\n    const AddNewFavoritesWorklog = () =>{\r\n       !props.PlayingWorklog &&  props.AddWorklog(undefined,true)\r\n    }\r\n    return (<div>\r\n        {\r\n            props.FavoritesWorklog.length > 0\r\n                    ? <div className=\"Favorites-Worklogs\">\r\n                        <WorkLogsContainer TimerData={props.TimerData}\r\n                                           openWorklogChangeModal={props.openWorklogChangeModal}\r\n                                           ComponentToDraw={\"FavoritesWorklogs\"}/>\r\n                    </div>\r\n\r\n                    : <div className={FS.NoFavoritesIssuesContainer}>\r\n\r\n                        <div className={FS.FavoritesText}>\r\n                            There is no favorites issues yet\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"60px\"}} className={TTS.NewWorklog}>\r\n                            <div  className={TTS.NewWorklogButtonPose}>\r\n                                <img onClick={AddNewFavoritesWorklog} className={TTS.NewWorklogButtonSize}\r\n                                     src={NewWorklogButton}\r\n                                     alt=\"new_worklog_button\"/>\r\n                            </div>\r\n\r\n                            <div className={TTS.NewWorklogButtonDescriptionContainer}>\r\n\r\n                                <div className={TTS.NewWorklogButtonDescription}>\r\n                                    new favorite\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n    </div>)\r\n}\r\n\r\nexport default FavoritesPage","import React, {useState} from \"react\";\r\nimport CDS from \"./Calendar.module.css\"\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\nimport {TClickedDay, TSetClickedMonthDay} from \"../../Data/CalendarReducer\";\r\nimport {randomInteger, SearchWorklogBlock, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport WorkLogsBlock from \"../WorkLogs/WorkLogsBlock\";\r\n\r\n\r\nexport type TCalendarDayProps = {\r\n    DayNumber: number\r\n    DayStatus: string\r\n    Signature: string\r\n    id: number\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    MonthName: string\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDay: number | string\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst CalendarDay: React.FC<TCalendarDayProps> = (props) => {\r\n    let [DayIsClicked, SetDayIsClicked] = useState(false)\r\n    let WrappedDay = {\r\n        id : props.id,\r\n        DayNumber : props.DayNumber,\r\n        MonthName : props.MonthName\r\n    }\r\n\r\n    const onDayClick = () => {\r\n        let WorklogsBlockToBeScroled = SearchWorklogBlock(WrappedDay.MonthName,WrappedDay.DayNumber)\r\n        SetDayIsClicked(!DayIsClicked)\r\n        props.SetClickedMonthDay(WrappedDay)\r\n        if(WorklogsBlockToBeScroled) WorklogsBlockToBeScroled.scrollIntoView({block :\"center\",inline : \"center\", behavior : \"smooth\" })\r\n    }\r\n\r\n    return (\r\n        <div className={props.ClickedMonthDay?.id === props.id\r\n        ? CDS.DayBgClicked\r\n        : props.DayNumber === props.CurrentDay\r\n            ? props.Signature === \"main\" ? CDS.DayBgCurrentDay : undefined\r\n            : CDS.DayBgDefault}>\r\n\r\n        <div onClick={onDayClick}\r\n             className={props.Signature !== \"main\"\r\n                 ? CDS.DropDownCalendarDayFaded : CDS.DropDownCalendarDay}>\r\n\r\n            <div className={props.ClickedMonthDay?.id === props.id\r\n            || props.DayNumber === props.CurrentDay\r\n                ? CDS.DropDownCalendarDayNumberClicked\r\n                : CDS.DropDownCalendarDayNumber}>\r\n\r\n                {props.DayNumber}\r\n\r\n            </div>\r\n            {   props.WorklogsBlocks.some(WBL=> WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] ===`${props.MonthName} ${props.DayNumber}`)\r\n                ? props.WorklogsBlocks.map(WBL=>{\r\n                if(WBL.BlockInfo.BlockCreatedDate.split(\",\")[1] === `${props.MonthName} ${props.DayNumber}` ) {\r\n                    return <img key={randomInteger(0,10000)}\r\n                                style={{paddingLeft: \"3px\"}}\r\n                                src={WBL.BlockInfo.SummaryStatus === \"ok\"\r\n                            ? OK\r\n                            : WBL.BlockInfo.SummaryStatus  === \"warning\"\r\n                                ? Warn\r\n                                : WBL.BlockInfo.SummaryStatus === \"danger\"\r\n                                    ? Danger\r\n                                    : undefined\r\n                    } alt=\"day status\"/>\r\n                }\r\n            })\r\n                : <div className={CDS.EmptyStatus}> </div>\r\n            }\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarDay","import React from \"react\";\r\nimport CS from \"./Calendar.module.css\";\r\n\r\nimport Danger from \"../../assets/imgs/CalendarDayStatusDanger.svg\"\r\nimport Warn from \"../../assets/imgs/CalendarDayStatusWarning.svg\"\r\nimport OK from \"../../assets/imgs/CalendarDayStatusOK.svg\"\r\n\r\nexport type TDropDownCalendarFooterElementProps = {\r\n    status: \"ok\" | \"danger\" | \"warning\" | \"empty\"\r\n    text: string\r\n}\r\nconst DropDownCalendarFooterElement: React.FC<TDropDownCalendarFooterElementProps> = (props) => {\r\n    return (<div className={CS.DropDownCalendarFooterElement}>\r\n            {\r\n                props.status !== \"empty\" ?\r\n                <img style={{marginTop: \"4px\"}} src={props.status === \"ok\"\r\n                    ? OK\r\n                    : props.status === \"warning\"\r\n                        ? Warn\r\n                        : props.status === \"danger\"\r\n                            ? Danger\r\n                            : undefined} alt={\"dropDOwnCAlendarFooterStatus\"}/>\r\n                            : <div style={{marginTop : \"4px\"}} className={CS.EmptyStatus}> </div>\r\n            }\r\n\r\n\r\n            <div  className={CS.DropDownProgressStatus}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownCalendarFooterElement","import React from \"react\";\r\nimport {\r\n    TCalendars, TClickedDay,\r\n    TCurrentDate,\r\n    TSetClickedMonthDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport {randomInteger, TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\nimport DropDownCalendarFooterElement from \"./DropDownCalendarFooterElement\";\r\n\r\nexport type TDropDownCalendarProps = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n    CurrentDate: TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nconst DropDownCalendar: React.FC<TDropDownCalendarProps> = (props) => {\r\n    let DaysNamesArr = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\r\n\r\n\r\n    return (<div className={CS.DropDownCalendar}>\r\n        <div className={CS.DropDownCalendarHeader}>\r\n            {props.CurrentDate.CurrentMonth}\r\n        </div>\r\n        <div className={CS.DropDOwnCalendarContentContainer}>\r\n            <div className={CS.DropDownCalendarContent}>\r\n\r\n                {DaysNamesArr.map(el => {\r\n                    return <div key={randomInteger(0, 10000)}\r\n                                className={CS.DropDownCalendarDayNames}>\r\n                        {el}\r\n\r\n                    </div>\r\n                })}\r\n\r\n                {props.Calendars[props.CurrentDate.CurrentMonth].map(day => {\r\n                    return <CalendarDay ClickedMonthDay={props.ClickedMonthDay}\r\n                                        CurrentDay={props.CurrentDate.CurrentDay}\r\n                                        MonthName={props.CurrentDate.CurrentMonth}\r\n                                        key={day.id}\r\n                                        SetClickedMonthDay={props.SetClickedMonthDay}\r\n                                        {...day}\r\n                                        WorklogsBlocks={props.WorklogsBlocks}\r\n                    />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n        <div className={CS.DropDownCalendarFooterContainer}>\r\n\r\n            <div className={CS.DropDownCalendarFooter}>\r\n                <DropDownCalendarFooterElement status={\"ok\"} text={\"Done\"}/>\r\n                <DropDownCalendarFooterElement status={\"warning\"} text={\"In progress\"}/>\r\n                <DropDownCalendarFooterElement status={\"danger\"} text={\"Missed\"}/>\r\n                <DropDownCalendarFooterElement status={\"empty\"} text={\"no activity\"}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DropDownCalendar","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {GlobalState} from \"../../Data/redux-store\"\r\nimport {\r\n    TCalendars,\r\n    TSetClickedMonthDay,\r\n    SetClickedMonthDay, TCurrentDate, TClickedDay,\r\n} from \"../../Data/CalendarReducer\";\r\nimport DropDownCalendar from \"./DropDownCalendar\";\r\nimport {TWorklogBlock} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TDropDownCalendarContainerOwnProps = {}\r\n\r\nexport type T_MSTP_DropDownCalendarContainer = {\r\n    Calendars: TCalendars\r\n    ClickedMonthDay: TClickedDay\r\n    CurrentDate : TCurrentDate\r\n    WorklogsBlocks: Array<TWorklogBlock>\r\n}\r\n\r\nexport type T_MDTP_DropDownCalendarContainer = {\r\n    SetClickedMonthDay: TSetClickedMonthDay\r\n}\r\n\r\n\r\ntype TDropDownCalendarContainerProps = T_MDTP_DropDownCalendarContainer\r\n    & T_MSTP_DropDownCalendarContainer & TDropDownCalendarContainerOwnProps\r\n\r\nclass DropDownCalendarContainer extends React.Component<TDropDownCalendarContainerProps> {\r\n    render() {\r\n        return <DropDownCalendar {...this.props} />\r\n    }\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DropDownCalendarContainer => ({\r\n    Calendars: state.CalendarData.Calendars,\r\n    ClickedMonthDay: state.CalendarData.ClickedMonthDay,\r\n    CurrentDate : state.CalendarData.CurrentDate,\r\n    WorklogsBlocks : state.WorklogsData.WorkLogsBlocks\r\n\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DropDownCalendarContainer,\r\n    T_MDTP_DropDownCalendarContainer,\r\n    TDropDownCalendarContainerOwnProps, GlobalState>\r\n(StateToProps, {SetClickedMonthDay}))(DropDownCalendarContainer)","import React, {useState} from \"react\";\r\nimport CS from \"./Calendar.module.css\"\r\nimport CalendarIcon from \"../../assets/imgs/calendar.svg\"\r\nimport DropDownCalendarContainer from \"./DropDownCalendarContainer\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\nexport type TCalendarProps = {\r\n    CurrentDate: TCurrentDate\r\n}\r\n\r\nconst Calendar: React.FC<TCalendarProps> = (props) => {\r\n    let [ShowDropDownCalendar, SetShowDropDownCalendar] = useState(false)\r\n\r\n    const onShowDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(true)\r\n    }\r\n    const onHideDropDownCalendar = () => {\r\n        SetShowDropDownCalendar(false)\r\n    }\r\n\r\n\r\n    return (<div className=\"Calendar\">\r\n        <div onClick={onShowDropDownCalendar} id=\"calendar-id\" className={CS.CalendarContainer}>\r\n            <div className={CS.CalendarContent}>\r\n                <div className={CS.CalendarDate}>\r\n                    {props.CurrentDate.CurrentDay} {props.CurrentDate.CurrentMonth} {props.CurrentDate.CurrentYear}\r\n                </div>\r\n                <div className={CS.CalendarIcon}>\r\n                    <img src={CalendarIcon} alt=\"calendar icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {ShowDropDownCalendar && <>\r\n            <div className={CS.bg}\r\n                 onClick={onHideDropDownCalendar}/>\r\n            <DropDownCalendarContainer/>\r\n        </>}\r\n\r\n    </div>)\r\n}\r\n\r\nexport default Calendar","import React from \"react\";\r\nimport AllS from \"./All.module.css\"\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type TAllProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnAllClicked: () => void\r\n}\r\n\r\nconst All: React.FC<TAllProps> = (props) => {\r\n    return (\r\n        <div className={props.FavoritesIsClicked\r\n            ? AllS.AllButtonBg\r\n            : AllS.AllButtonBgActive}>\r\n\r\n            <div  className={props.FavoritesIsClicked\r\n                ? AllS.item\r\n                : AllS.ActiveItem}>\r\n\r\n                <NavLink onClick={props.OnAllClicked}   to={\"/Home/All\"}> All </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All","import React from \"react\";\r\nimport FS from \"./Favorites.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { pink } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nexport type TFavoritesProps = {\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n\r\n}\r\n\r\nconst FavoritesButton: React.FC<TFavoritesProps> = (props) => {\r\n    return (\r\n        <div\r\n             className={props.FavoritesIsClicked\r\n            ? FS.FavoritesButtonBgActive\r\n            : FS.FavoritesButtonBg} onClick={props.OnFavoritesClick}>\r\n\r\n            <div className={!props.FavoritesIsClicked\r\n                ? FS.item\r\n                : FS.ActiveItem}>\r\n                <div className={FS.FavoritesTextContainer}>\r\n                    <div>\r\n                        <NavLink  to={\"/Home/Favorites\"}> Favorites </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        <FavoriteIcon fontSize=\"small\" style={{color : pink[500]}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesButton","import React from \"react\";\r\nimport AS from \"../../App.module.css\";\r\nimport Calendar from \"../Calendar/Calendar\";\r\nimport All from \"../All/All\";\r\nimport FavoritesButton from \"../Favorites/FavoritesButton\";\r\nimport {TCurrentDate} from \"../../Data/CalendarReducer\";\r\n\r\n\r\nexport type TCalendarAndControlButtonsProps = {\r\n    CurrentDate: TCurrentDate\r\n    FavoritesIsClicked: boolean\r\n    OnFavoritesClick: () => void\r\n    OnAllClicked: () => void\r\n\r\n}\r\n\r\nconst CalendarAndControlButtons: React.FC<TCalendarAndControlButtonsProps> = (props) => {\r\n\r\n    return (<div className={AS.CalendarAndButtons}>\r\n        <Calendar CurrentDate={props.CurrentDate}/>\r\n        <All FavoritesIsClicked={props.FavoritesIsClicked} OnAllClicked={props.OnAllClicked}/>\r\n        <FavoritesButton OnFavoritesClick={props.OnFavoritesClick}\r\n                         FavoritesIsClicked={props.FavoritesIsClicked}/>\r\n    </div>)\r\n}\r\n\r\nexport default CalendarAndControlButtons","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetLeft : number | undefined,\r\n}\r\n\r\nconst RightLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.LeftLabel}\r\n                style={{display : `${!props.value &&  !props.Position ? \"none\" : \"block\" }`,\r\n                    left : `${props.Position && props.offsetLeft \r\n                    && props.Position - props.offsetLeft +75 + \"px\"}` }}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.start && props.value.start } </div>\r\n    </div>\r\n}\r\n\r\nexport default RightLabel\r\n","import React from \"react\";\r\nimport LS from \"./TimeSlider.module.css\"\r\nexport type TLeftLabelProps = {\r\n    Position : number | undefined\r\n    value : {\r\n    end : string | null,\r\n    start : string | null\r\n    } | undefined\r\n    offsetRight : number | undefined\r\n}\r\n\r\nconst LeftLabel :React.FC<TLeftLabelProps> = (props) =>{\r\n\r\n    return <div className={LS.RightLabel}\r\n                style={{ display : `${!props.value && !props.Position ? \"none\" : \"block\" }`,\r\n                    right : `${props.Position && props.offsetRight &&   props.offsetRight - props.Position  +15 + \"px\" }`}}>\r\n            <div className={LS.LeftLabelImage} > </div>\r\n            <div className={LS.LabelValue}> {props.value && props.value.end && props.value.end } </div>\r\n    </div>\r\n}\r\n\r\nexport default LeftLabel\r\n","export const  findPosX =(obj  ) =>{\r\n    var curleft = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curleft+=obj.offsetLeft;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.x) {\r\n        curleft+=obj.x;\r\n    }\r\n    return curleft;\r\n}\r\n\r\nexport const  findPosY = (obj) => {\r\n    var curtop = 0;\r\n    if (obj.offsetParent) {\r\n        while (1) {\r\n            curtop+=obj.offsetTop;\r\n            if (!obj.offsetParent) {\r\n                break;\r\n            }\r\n            obj=obj.offsetParent;\r\n        }\r\n    } else if (obj.y) {\r\n        curtop+=obj.y;\r\n    }\r\n    return curtop;\r\n}","import React, {useState, useEffect, Dispatch} from 'react';\r\n//@ts-ignore\r\nimport TimeRangeSlider from 'react-time-range-slider';\r\nimport LeftLabel from \"./SliderValueLeftLabel\";\r\nimport RightLabel from \"./SliderValueRightLabel\";\r\nimport {findPosX} from \"../../../assets/secondary/FindElementPose\";\r\n\r\n\r\n\r\nexport type TTimeSliderProps = {\r\n    step: number\r\n    maxValue?: string\r\n    minValue?: string\r\n    format?: number\r\n    disabled: boolean\r\n    value?: {\r\n        start: string | null\r\n        end: string | null\r\n    }\r\n    SetTimerValue: Dispatch<any>\r\n}\r\n\r\n\r\nconst TimeSlider: React.FC<TTimeSliderProps> = (props) => {\r\n    let [value, SetValue] = useState({\r\n        start: props.value?.start ? props.value.start as string | null : \"08:00\",\r\n        end: props.value?.end ? props.value.end as string | null : \"22:00\"\r\n    })\r\n\r\n\r\n    let [LeftPose, SetLeftPose] = useState<number>()\r\n    let [RightPose, SetRightPose] = useState<number>()\r\n    let [LeftOffset, SetLeftOffset] = useState<number>()\r\n    let [RightOffset, SetRightOffset] = useState<number>()\r\n\r\n\r\n    const TimerButtonsInit = () => {\r\n        // get slider\r\n        let slider = document.querySelectorAll(\".input-range\")\r\n        //get slider  handlers\r\n        let el = document.querySelectorAll(\".input-range__slider\")\r\n    // SetLeftPose(el[0].getBoundingClientRect())\r\n    // SetRightPose(el[1].getBoundingClientRect())\r\n    let SliderWidth = getComputedStyle(slider[0], null).width\r\n    // slider start pose\r\n    let SliderPoseStart = findPosX(slider[0])\r\n    // get slider pose\r\n    let SliderPoseEnd = SliderPoseStart + Number.parseInt(SliderWidth.substr(0, SliderWidth.length - 2))\r\n    //get offsets  for left and right labels\r\n    let LeftMargin = findPosX(el[0])\r\n    let RightMargin = findPosX(el[1])\r\n    SetLeftOffset(SliderPoseStart)\r\n    SetRightOffset(SliderPoseEnd)\r\n    SetLeftPose(LeftMargin)\r\n    SetRightPose(RightMargin)\r\n}\r\n\r\n\r\n    const UpdateLabelsValue = () =>{\r\n        let LeftLabel = document.getElementById(\"LeftSliderLabel\")\r\n        let RightLabel = document.getElementById(\"RightSliderLabel\")\r\n        if(LeftLabel)   LeftLabel.innerHTML = `<div>${value.start}</div>`\r\n        if(RightLabel)  RightLabel.innerHTML = `<div>${value.end}</div>`\r\n    }\r\n\r\n    useEffect(() => {\r\n            props.value && SetValue(props.value)\r\n             TimerButtonsInit()\r\n        // UpdateLabelsValue()\r\n        }, [props.value && props.value]\r\n    );\r\n\r\n\r\n    const changeStartHandler = (time: any) => {\r\n        // console.log(\"Start Handler Called\", time);\r\n    }\r\n\r\n    const timeChangeHandler = (time: any) => {\r\n        TimerButtonsInit()\r\n        SetValue(time)\r\n        UpdateLabelsValue()\r\n\r\n    }\r\n\r\n    const changeCompleteHandler = (time : any) => {\r\n       TimerButtonsInit()\r\n        props.SetTimerValue(value)\r\n        SetValue(time)\r\n        /* console.log(\"Complete Handler Called\", time);*/\r\n    }\r\n\r\n    return (<>\r\n        <TimeRangeSlider\r\n            disabled={props.disabled}\r\n            format={props.format ? props.format : 24}\r\n            maxValue={props.maxValue ? props.maxValue : \"18:59\"}\r\n            minValue={props.minValue ? props.minValue : \"7:00\"}\r\n            name={\"time_range\"}\r\n            onChangeStart={changeStartHandler}\r\n            onChangeComplete={changeCompleteHandler}\r\n            onChange={timeChangeHandler}\r\n            step={props.step}\r\n            value={value}/>\r\n\r\n        <LeftLabel Position={LeftPose} offsetLeft={LeftOffset} value={value}/>\r\n        <RightLabel Position={RightPose} value={value} offsetRight={RightOffset}/>\r\n       {/* <SliderLabels  value={value}  SetValue={SetValue} UpdateLabelsValue={UpdateLabelsValue}/>*/}\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default TimeSlider","import React, {SyntheticEvent, useState, useEffect, Dispatch, SetStateAction} from \"react\";\r\nimport MS from \"./ModalWindow.module.css\"\r\nimport ConfirmButton from \"../../assets/imgs/confirmButton.svg\"\r\nimport DeclineButton from \"../../assets/imgs/declineButton.svg\"\r\nimport TimeSlider from \"./TimeSlider/TimeSlider\";\r\nimport {\r\n    TChangeFavoritesWorklog,\r\n    TChangeWorklog,\r\n    TSetIsPlayingWorklogById,\r\n    TSetWorklogToChange,\r\n    TTimerData,\r\n    TWorkLog\r\n} from \"../../Data/WorkLogsReducer\";\r\nimport {CalculateNewStartTime, ToFullTime} from \"../../assets/secondary/CalculateTime\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { green } from '@material-ui/core/colors';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\n\r\nexport type TModalWindowProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    PlayingWorklog: TWorkLog | null\r\n    TimerData: TTimerData | undefined\r\n    ChangeWorklog: TChangeWorklog\r\n    WorklogToChange: TWorkLog | null\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog: TChangeFavoritesWorklog\r\n}\r\ntype TTimerValue = {\r\n    start: string | null\r\n    end: string | null\r\n}\r\n\r\nconst ChangeWorklogModal: React.FC<TModalWindowProps> = (props) => {\r\n\r\n    let [ModalNewWorklogName, SetModalNewWorklogName] = useState(\"\")\r\n    let [ModalNewIssueName, SetModalNewIssueName] = useState(\"\")\r\n    let [ModalTimeLineValues, SetModalTimeLineValues] = useState<TTimerValue>()\r\n    let [NewWorklogNameIsFilled, SetNewWorklogNameIsFilled] = useState<boolean>(false)\r\n    let [NewIssueNameIsFilled, SetNewIssueNameIsFilled] = useState<boolean>(false)\r\n\r\n\r\n    let EmptyWorklogTimerMinutes = props.TimerData?.TimerValue.substr(3, props.TimerData?.TimerValue.length - 6)\r\n    let EmptyWorklogTimerEndHours = props.TimerData?.TimerValue.substr(0, props.TimerData?.TimerValue.length - 6)\r\n    let date = new Date()\r\n    let CurrentTime = ToFullTime(date.getHours()) + \":\" + ToFullTime(date.getMinutes())\r\n    let EmptyWorklogTimeValues = {\r\n        start: CalculateNewStartTime(CurrentTime, EmptyWorklogTimerEndHours, EmptyWorklogTimerMinutes) as string | null,\r\n        end: CurrentTime as string | null\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.TimerData) {\r\n            props.TimerData.TimerTaskField && SetModalNewWorklogName(props.TimerData.TimerTaskField)\r\n            props.TimerData.TimerIssue && SetModalNewIssueName(props.TimerData.TimerIssue)\r\n            if (props.PlayingWorklog && props.PlayingWorklog.StartTime && props.PlayingWorklog.EndTime) {\r\n                SetModalTimeLineValues({\r\n                    start: props.PlayingWorklog.StartTime,\r\n                    end: props.PlayingWorklog.EndTime\r\n                })\r\n            } else SetModalTimeLineValues(EmptyWorklogTimeValues)\r\n        } else if (props.WorklogToChange) {\r\n            props.WorklogToChange.TaskField && SetModalNewWorklogName(props.WorklogToChange.TaskField)\r\n            props.WorklogToChange.Issue && SetModalNewIssueName(props.WorklogToChange.Issue)\r\n            SetModalTimeLineValues({\r\n                start: props.WorklogToChange.StartTime,\r\n                end: props.WorklogToChange.EndTime\r\n            })\r\n        }\r\n    }, [props.TimerData?.TimerIssue, props.TimerData?.TimerTaskField, props.TimerData?.TimerValue,\r\n        props.WorklogToChange])\r\n\r\n    const OnModalSubmit = (e: SyntheticEvent) => {\r\n        {\r\n            ModalNewWorklogName.length > 0\r\n                ? SetNewWorklogNameIsFilled(false)\r\n                : SetNewWorklogNameIsFilled(true)\r\n        }\r\n        {\r\n            ModalNewIssueName.length > 0\r\n                ? SetNewIssueNameIsFilled(false)\r\n                : SetNewIssueNameIsFilled(true)\r\n        }\r\n\r\n        if (ModalNewWorklogName && ModalNewWorklogName.length > 0\r\n            && ModalNewIssueName\r\n            && ModalNewIssueName.length > 0\r\n            && ModalTimeLineValues) {\r\n\r\n            let Obj: string\r\n            if (props.TimerData) Obj = \"PlayingWorklog\"; else Obj = \"WorklogToChange\"\r\n            let NewWL = {\r\n                //@ts-ignore\r\n                ...props[Obj],\r\n                StartTime: ModalTimeLineValues.start,\r\n                EndTime: ModalTimeLineValues.end,\r\n                TaskField: ModalNewWorklogName,\r\n                Issue: ModalNewIssueName,\r\n                //@ts-ignore\r\n                status: props[Obj].status ? props[Obj].status : \"warning\",\r\n                //@ts-ignore\r\n                TimerValue: props.TimerData && props.TimerData.TimerValue ? props.TimerData.TimerValue\r\n                    //@ts-ignore\r\n                    : props[Obj].TimerValue ? props[Obj].TimerValue : \"00:00:00\"\r\n            }\r\n\r\n            if(NewWL.IsFavorites ){\r\n                //@ts-ignore\r\n                props.ChangeFavoritesWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                props.ChangeWorklog(props[Obj].id, NewWL)\r\n                //@ts-ignore\r\n                props.SetIsPlayingWorklogById(false, props[Obj].id)\r\n            }\r\n            SetModalNewWorklogName(\"\")\r\n            SetModalNewIssueName(\"\")\r\n            SetNewWorklogNameIsFilled(false)\r\n            SetNewIssueNameIsFilled(false)\r\n            close(e)\r\n        }\r\n    }\r\n\r\n    const OnNewWorklogNameType = (e: React.FormEvent<HTMLInputElement>) => {\r\n        SetModalNewWorklogName(e.currentTarget.value)\r\n    }\r\n    const OnNewIssueNameType = (e: React.FormEvent<HTMLInputElement>) => {\r\n        SetModalNewIssueName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const close = (e: SyntheticEvent) => {\r\n        e.preventDefault();\r\n        if (props.closeWorklogChangeModal) {\r\n            props.closeWorklogChangeModal();\r\n        }\r\n        props.SetTimerData(undefined)\r\n        props.SetWorklogToChange(undefined)\r\n        props.SetIsPlayingWorklogById(false)\r\n    }\r\n    if (!props.WorklogChangeModalIsOpen) return null;\r\n\r\n\r\n    return (\r\n        <div className=\"timer-modal\">\r\n            <div className={MS.modal}>\r\n                <div className={MS.ModalTitle}>New worklog</div>\r\n                <div className={MS.ModalSlider}>\r\n\r\n                    {ModalTimeLineValues?.start && ModalTimeLineValues?.end &&\r\n                    <TimeSlider value={ModalTimeLineValues}\r\n                                disabled={false}\r\n                                step={10}\r\n                                SetTimerValue={SetModalTimeLineValues}\r\n                    />\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                <form name=\"NewWorklogContent\" action=\"\">\r\n                    <div className={MS.ModalTextFields}>\r\n                        <div className={MS.NewWorklogContentContainer}>\r\n\r\n                            <div className={MS.NewWorklogContentTitle}>Worklog name</div>\r\n\r\n                            <div className={MS.marginCheck}>\r\n                                <input\r\n                                    onChange={OnNewWorklogNameType}\r\n                                    value={ModalNewWorklogName}\r\n                                    className={MS.NewWorklogContentInput}\r\n                                    placeholder=\"Enter the worklog name\"\r\n                                    type=\"text\"/>\r\n                            </div>\r\n\r\n                            {NewWorklogNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter worklog name</div>\r\n                            }\r\n\r\n                            <div style={{marginTop: \"37px\"}}>\r\n                                <div className={MS.NewWorklogContentTitle}>Issue</div>\r\n                                <div className={MS.marginCheck}>\r\n                                    <input\r\n                                        onChange={OnNewIssueNameType}\r\n                                        value={ModalNewIssueName}\r\n                                        className={MS.NewWorklogContentInput}\r\n                                        placeholder=\"Enter the issue name\"\r\n                                        type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n                            {NewIssueNameIsFilled &&\r\n                            <div id=\"new-issue-err\" className={MS.ModalInputError}> Please, enter issue name</div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={MS.NewWorklogControlButtonsContainer}>\r\n                        <div className={MS.NewWorklogControlButtons}>\r\n                            <div onClick={OnModalSubmit} className=\"modal-open\">\r\n                                <CheckOutlinedIcon style={{color: green[500], cursor : \"pointer\"}}  fontSize=\"large\" />\r\n                               {/* <img className={MS.NewWorklogSubmitButtonSize}\r\n                                     src={ConfirmButton} alt={\"submit\"}/>*/}\r\n                            </div>\r\n                            <div className={MS.CloseButtonMargin}>\r\n                                <ClearIcon  style={{cursor : \"pointer\"}}  fontSize=\"large\" onClick={close} color=\"action\" />\r\n                                {/*<img onClick={close} className={MS.NewWorklogControlButton}*/}\r\n                                {/*     src={DeclineButton} alt={\"decline\"}/>*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={MS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeWorklogModal\r\n\r\n","import React, {Dispatch, SetStateAction} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n// import {withRouter} from 'react-router-dom'\r\nimport ChangeWorklogModal from \"./ChangeWorklogModal\";\r\nimport {GlobalState} from \"../../Data/redux-store\";\r\nimport {\r\n    TAddWorklog, TChangeWorklog, TSetIsPlayingWorklogById,\r\n    TTimerData, TWorkLog, ChangeWorklog, TSetWorklogToChange,\r\n    SetWorklogToChange,ChangeFavoritesWorklog, TChangeFavoritesWorklog\r\n}\r\n    from \"../../Data/WorkLogsReducer\";\r\nimport {AddWorklog, SetIsPlayingWorklogById} from \"../../Data/WorkLogsReducer\";\r\n\r\nexport type TModalWindowContainerOwnProps = {\r\n    closeWorklogChangeModal: () => void\r\n    WorklogChangeModalIsOpen: boolean\r\n    TimerData: TTimerData | undefined\r\n    SetTimerData: Dispatch<SetStateAction<TTimerData | undefined>>\r\n\r\n}\r\n\r\nexport type T_MSTP_ModalWindowContainer = {\r\n    PlayingWorklog: TWorkLog | null\r\n    WorklogToChange: TWorkLog | null\r\n\r\n}\r\n\r\nexport type T_MDTP_ModalWindowContainer = {\r\n    AddWorklog: TAddWorklog\r\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\r\n    ChangeWorklog: TChangeWorklog\r\n    SetWorklogToChange: TSetWorklogToChange\r\n    ChangeFavoritesWorklog : TChangeFavoritesWorklog\r\n}\r\ntype TModalWindowContainerProps =\r\n    T_MDTP_ModalWindowContainer\r\n    & T_MSTP_ModalWindowContainer\r\n    & TModalWindowContainerOwnProps\r\n\r\nclass ChangeWorklogModalContainer extends React.Component<TModalWindowContainerProps> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ChangeWorklogModal closeWorklogChangeModal={this.props.closeWorklogChangeModal}\r\n                                WorklogChangeModalIsOpen={this.props.WorklogChangeModalIsOpen}\r\n                                SetIsPlayingWorklogById={this.props.SetIsPlayingWorklogById}\r\n                                PlayingWorklog={this.props.PlayingWorklog}\r\n                                TimerData={this.props.TimerData}\r\n                                WorklogToChange={this.props.WorklogToChange}\r\n                                ChangeWorklog={this.props.ChangeWorklog}\r\n                                SetTimerData={this.props.SetTimerData}\r\n                                SetWorklogToChange={this.props.SetWorklogToChange}\r\n                                ChangeFavoritesWorklog={this.props.ChangeFavoritesWorklog}\r\n\r\n            />\r\n            )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_ModalWindowContainer => ({\r\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\r\n    WorklogToChange: state.WorklogsData.WorklogToChange\r\n})\r\n\r\nexport default compose(connect<T_MSTP_ModalWindowContainer, T_MDTP_ModalWindowContainer, TModalWindowContainerOwnProps, GlobalState>\r\n(StateToProps, {\r\n    AddWorklog, SetIsPlayingWorklogById, SetWorklogToChange,\r\n    ChangeWorklog,ChangeFavoritesWorklog\r\n}))(ChangeWorklogModalContainer)","import React, {useState} from \"react\";\r\nimport LS from \"./LoginModal.module.css\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 300,\r\n        },\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst LoginModal = () => {\r\n    const classes = useStyles();\r\n    let [LoginFieldValue, SetLoginFieldValue] = useState(\"\")\r\n    let [PasswordFieldValue, SetPasswordFieldValue] = useState(\"\")\r\n    let [ErrorText,SetErrorText] = useState<string>()\r\n\r\n    const onLoginInputChange = (e: any) => {\r\n            SetLoginFieldValue(e.target.value)\r\n    }\r\n\r\n    const onPasswordInputChange = (e: any) => {\r\n            SetPasswordFieldValue(e.target.value)\r\n    }\r\n\r\n    const LoginHandler = () => {\r\n        if(LoginFieldValue === \"test\" && PasswordFieldValue === \"test\"){\r\n            localStorage.setItem(\"IsAuth\",\"true\")\r\n            SetErrorText(undefined)\r\n            SetLoginFieldValue(\"\")\r\n            SetPasswordFieldValue(\"\")\r\n            window.location.reload()\r\n        }\r\n        else {\r\n            SetErrorText(\"Incorrect login or password \")\r\n\r\n        }\r\n    }\r\n\r\n    return (<div className=\"login-modal\">\r\n            <div className={LS.modal}>\r\n                <form className={classes.root} autoComplete=\"off\">\r\n                    <div className={LS.InputsContainer}>\r\n                        <div className={LS.LoginContainer}>\r\n\r\n                            <TextField\r\n                                onChange={onLoginInputChange}\r\n                                error={!!ErrorText}\r\n                                id=\"standard-error-helper-text\"\r\n                                label=\"login\"\r\n                                value={LoginFieldValue}\r\n                                placeholder=\"Please, enter the login\"\r\n                                helperText={ErrorText}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <div className={LS.PasswordContainer}>\r\n\r\n                            <TextField\r\n                                onChange={onPasswordInputChange}\r\n                                error={!!ErrorText}\r\n                                type={\"password\"}\r\n                                id=\"standard-error-helper-text\"\r\n                                label=\"password\"\r\n                                value={PasswordFieldValue}\r\n                                placeholder=\"Please, enter the password\"\r\n                                helperText={ErrorText}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: \"45px\", paddingLeft: \"110px\"}}>\r\n                            <Button style={{width : \"120px\"}} onClick={LoginHandler} variant=\"outlined\" color=\"secondary\">\r\n                                Login\r\n                            </Button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={LS.bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginModal","import React from \"react\";\r\nimport TS from \"./Tooltip.module.css\"\r\n//import TooltipCloseButton from \"../../assets/imgs/Tooltip_Close_button.svg\"\r\nimport {TTooltipInfo} from \"../../App\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport type TTooltipProps = {\r\n    TooltipInfo : TTooltipInfo| undefined\r\n    hideTooltil : () => void\r\n    TooltipIsShowed : boolean\r\n}\r\n\r\nconst Tooltip: React.FC<TTooltipProps> = (props) => {\r\n\r\n    return <>\r\n        {props.TooltipIsShowed\r\n            ? <div className={TS.TooltipContainer}>\r\n                <div className={TS.TooltipContent}>\r\n                    <div className={TS.StatusAndCloseButtonContainer}>\r\n                        <div className={props.TooltipInfo?.status === \"ok\"\r\n                            ? TS.TooltipStatusOk\r\n                            : props.TooltipInfo?.status === \"warning\"\r\n                                ? TS.TooltipStatusWarning\r\n                                : props.TooltipInfo?.status === \"danger\"\r\n                                    ? TS.TooltipStatusDanger\r\n                                    : undefined}>\r\n\r\n                        </div>\r\n\r\n                        <div onClick={props.hideTooltil} className={TS.TooltipCloseButtonContainer}>\r\n                            <CloseIcon fontSize={\"inherit\"} color={\"inherit\"} > </CloseIcon>\r\n                            {/*<img src={TooltipCloseButton} alt=\"tooltip-close\"/>*/}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={TS.TooltipTextContainer}>\r\n                        {props.TooltipInfo?.text}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            : undefined\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Tooltip","import React,{useState} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingTop : \"4%\",\r\n            paddingLeft: \"6%\",\r\n            backgroundColor: \"#F9FAFC\"\r\n        },\r\n        cardHeader: {\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        list: {\r\n            width: 800,\r\n            height: 700,\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            margin: theme.spacing(0.5, 0),\r\n        },\r\n    }),\r\n);\r\n\r\nfunction not(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: string[], b: string[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a: string[], b: string[]) {\r\n    return [...a, ...not(b, a)];\r\n}\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues : Array<string>\r\n    AddIssue : TAddIssue\r\n    DeleteIssue : TDeleteIssue\r\n    ChangeIssue : TChangeIssue\r\n}\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState<string[]>([]);\r\n    const [left, setLeft] = useState<string[]>(props.Issues);\r\n    const [right, setRight] = useState<string[]>(props.CompletedIssues);\r\n\r\n    const leftChecked = intersection(checked, left);\r\n    const rightChecked = intersection(checked, right);\r\n\r\n    const handleToggle = (value: string) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    const numberOfChecked = (items: string[]) => intersection(checked, items).length;\r\n\r\n    const handleToggleAll = (items: string[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            setChecked(not(checked, items));\r\n        } else {\r\n            setChecked(union(checked, items));\r\n        }\r\n    };\r\n\r\n    const handleCheckedRight = () => {\r\n        setRight(right.concat(leftChecked));\r\n        setLeft(not(left, leftChecked));\r\n        setChecked(not(checked, leftChecked));\r\n    };\r\n\r\n    const handleCheckedLeft = () => {\r\n        setLeft(left.concat(rightChecked));\r\n        setRight(not(right, rightChecked));\r\n        setChecked(not(checked, rightChecked));\r\n    };\r\n\r\n    const customList = (title: React.ReactNode, items: string[]) => (\r\n        <Card>\r\n            <CardHeader\r\n                className={classes.cardHeader}\r\n                avatar={\r\n                    <Checkbox\r\n                        onClick={handleToggleAll(items)}\r\n                        checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n                        indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}\r\n                        disabled={items.length === 0}\r\n                        inputProps={{'aria-label': 'all items selected'}}\r\n                    />\r\n                }\r\n                title={title}\r\n                subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n            />\r\n            <Divider/>\r\n            <List className={classes.list} dense component=\"div\" role=\"list\">\r\n                {items.map((value: string) => {\r\n                    const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n                    return (\r\n                        <ListItem key={value} role=\"listitem\" button onClick={handleToggle(value)}>\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    checked={checked.indexOf(value) !== -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{'aria-labelledby': labelId}}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={ value }/>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n                <ListItem/>\r\n            </List>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n            <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n                <Grid item>{customList('Issues', left)}</Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedRight}\r\n                            disabled={leftChecked.length === 0}\r\n                            aria-label=\"move selected right\"\r\n                        >\r\n                            &gt;\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={handleCheckedLeft}\r\n                            disabled={rightChecked.length === 0}\r\n                            aria-label=\"move selected left\"\r\n                        >\r\n                            &lt;\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>{customList('Completed issues', right)}</Grid>\r\n            </Grid>\r\n    );\r\n}\r\n\r\nexport default Issues","import React, {useState} from 'react';\nimport AS from \"./App.module.css\"\nimport NavBar from \"./Components/NavBar/NavBar\";\nimport WorkLogsContainer from \"./Components/WorkLogs/WorkLogsContainer\";\nimport TimeTracking from \"./Components/TimeTracking/TimeTracking\";\nimport GoogleCalendar from \"./Components/GoogleCalendar/GoogleCalendar\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {GlobalState} from \"./Data/redux-store\";\nimport {\n    SetIsPlayingWorklogById, ChangeWorklog,\n    TWorkLog, TSetIsPlayingWorklogById, TChangeWorklog, TAddWorklog,\n    AddWorklog, TTimerData, TAddToFavorite, AddToFavorite, TWorklogBlock\n} from \"./Data/WorkLogsReducer\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport FavoritesPage from \"./Components/Favorites/FavoritesPage\";\nimport CalendarAndControlButtons from \"./Components/CalendarAndControllButtons/CalendarAndControlButtons\";\nimport {TCurrentDate} from \"./Data/CalendarReducer\";\nimport ChangeWorklogModalContainer from \"./Components/ModalWindow/ChangeWorklogModalContainer\";\nimport LoginModal from \"./Components/LoginPage/LoginModal\";\nimport Tooltip from \"./Components/Tooltip/Tooltip\";\nimport {ChangeIssue,AddIssue,DeleteIssue, TAddIssue, TChangeIssue, TDeleteIssue} from \"./Data/IssuesReducer\";\nimport Issues from \"./Components/Issues/Issues\";\n\n\nexport type TAppOwnProps = {}\n\nexport type T_MSTP_App = {\n    PlayingWorklog: TWorkLog | null\n    CurrentDate: TCurrentDate\n    WorklogsBlocks: Array<TWorklogBlock>\n    FavoritesWorklog: Array<TWorkLog>\n    Issues : Array<string>\n    CompletedIssues : Array<string>\n}\n\nexport type T_MDTP_App = {\n    SetIsPlayingWorklogById: TSetIsPlayingWorklogById\n    ChangeWorklog: TChangeWorklog\n    AddWorklog: TAddWorklog\n    AddToFavorite: TAddToFavorite\n    AddIssue : TAddIssue\n    DeleteIssue : TDeleteIssue\n    ChangeIssue : TChangeIssue\n}\n\nexport type TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\nexport type TTooltipInfo = {\n    text: string\n    status: \"ok\" | \"warning\" | \"danger\"\n}\nexport type TShowTooltip = (TooltipInfo: TTooltipInfo) => void\n\nconst App: React.FC<TAppProps> = (props) => {\n\n    let [WorklogChangeModalIsOpen, SetWorklogChangeModalIsOpen] = useState(false)\n    let [FavoritesIsClicked, SetFavoritesIsClicked] = useState(false)\n    let [TimerData, SetTimerData] = useState<TTimerData | undefined>(undefined)\n    let [TooltipIsShowed, SetTooltipIsShowed] = useState(false)\n    let [TooltipInfo, SetTooltipInfo] = useState<TTooltipInfo>()\n\n    const OnSetTimerData = (TimerData: TTimerData) => {\n        SetTimerData(TimerData)\n    }\n\n    const OnFavoritesClick = () => {\n        SetFavoritesIsClicked(true)\n    }\n    const OnAllClicked = () => {\n        SetFavoritesIsClicked(false)\n    }\n\n    const openWorklogChangeModal = () => {\n        SetWorklogChangeModalIsOpen(true)\n    }\n\n    const closeWorklogChangeModal = () => {\n        SetWorklogChangeModalIsOpen(false)\n    }\n\n    const showTooltip = (TooltipInfo: TTooltipInfo) => {\n        TooltipIsShowed && SetTooltipIsShowed(false)\n        SetTooltipInfo(TooltipInfo)\n        SetTooltipIsShowed(true)\n    }\n\n    const hideTooltip = () => [\n        SetTooltipIsShowed(false)\n    ]\n\n    return (<div className=\"AppWrapper\">\n\n            {localStorage.getItem(\"IsAuth\") === \"true\"\n                ? <>\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"/Home/All\"}/>}/>\n\n                    <div className=\"MainAppWrapper\">\n                        <NavBar/>\n\n                        <Route exact path='/Issues'\n                               render={() => <Issues Issues={props.Issues}\n                                                     AddIssue={props.AddIssue}\n                                                     ChangeIssue={props.ChangeIssue}\n                                                     DeleteIssue={props.DeleteIssue}\n                                                     CompletedIssues={props.CompletedIssues}\n                               />}/>\n\n                        <Route  path='/Home'\n                               render={() => <div className={AS.CalendarAndButtonsContainer}>\n                                   <CalendarAndControlButtons FavoritesIsClicked={FavoritesIsClicked}\n                                                              OnAllClicked={OnAllClicked}\n                                                              OnFavoritesClick={OnFavoritesClick}\n                                                              CurrentDate={props.CurrentDate}\n                                   />\n                               </div>}/>\n\n\n                        <div className={AS.MainWrapper}>\n                            <div className=\"WorklogsLayout\">\n\n                                <Route exact path='/Home/All'\n                                       render={() => <div className=\"WorkLogBlock\">\n                                           <div className=\"Worklogs\">\n                                               <WorkLogsContainer TimerData={TimerData}\n                                                                  openWorklogChangeModal={openWorklogChangeModal}\n                                                                  ComponentToDraw={\"Worklogs\"}\n                                                                  showTooltip={showTooltip}\n                                                                  closeWorklogChangeModal={closeWorklogChangeModal}\n                                                                  SetTimerData={SetTimerData}\n                                                                  WorklogChangeModalIsOpen={WorklogChangeModalIsOpen}\n                                               />\n                                           </div>\n                                       </div>\n                                       }/>\n\n                                <Route exact path='/Home/Favorites'\n                                       render={() => <FavoritesPage FavoritesIsClicked={FavoritesIsClicked}\n                                                                    WorklogsBlocks={props.WorklogsBlocks}\n                                                                    openWorklogChangeModal={openWorklogChangeModal}\n                                                                    TimerData={TimerData}\n                                                                    AddWorklog={props.AddWorklog}\n                                                                    PlayingWorklog={props.PlayingWorklog}\n                                                                    FavoritesWorklog={props.FavoritesWorklog}\n                                       />}/>\n\n                            </div>\n                            <Route  path='/Home'\n                                   render={() => <div className={AS.TImeTracking_and_Calendar}>\n                                       <TimeTracking PlayingWorklog={props.PlayingWorklog}\n                                                     FavoritesIsClicked={FavoritesIsClicked}\n                                                     SetIsPlayingWorklogById={props.SetIsPlayingWorklogById}\n                                                     AddWorklog={props.AddWorklog}\n                                                     SetTimerData={OnSetTimerData}\n                                                     openWorklogChangeModal={openWorklogChangeModal}\n                                                     ChangeWorklog={props.ChangeWorklog}/>\n                                       {/*   <div className=\"GoogleCalendar\">\n                                    <GoogleCalendar/>\n                                </div>*/}\n                                   </div>}/>\n                        </div>\n                        <ChangeWorklogModalContainer\n                            SetTimerData={SetTimerData}\n                            WorklogChangeModalIsOpen={WorklogChangeModalIsOpen}\n                            closeWorklogChangeModal={() => closeWorklogChangeModal()}\n                            TimerData={TimerData}\n                        />\n\n                        <Tooltip TooltipIsShowed={TooltipIsShowed} hideTooltil={hideTooltip} TooltipInfo={TooltipInfo}/>\n                    </div>\n\n                </>\n\n                : <LoginModal/>\n\n            }\n        </div>\n    );\n}\n\n\nconst MapStateToProps = (state: GlobalState): T_MSTP_App => ({\n    PlayingWorklog: state.WorklogsData.PlayingWorklog,\n    CurrentDate: state.CalendarData.CurrentDate,\n    WorklogsBlocks: state.WorklogsData.WorkLogsBlocks,\n    FavoritesWorklog: state.WorklogsData.FavoritesWorklogs,\n    Issues : state.IssuesData.Issues,\n    CompletedIssues : state.IssuesData.CompletedIssues\n})\n\nexport default compose(\n    connect<T_MSTP_App, T_MDTP_App, TAppOwnProps, GlobalState>(MapStateToProps, {\n        SetIsPlayingWorklogById,\n        ChangeWorklog, AddWorklog, AddToFavorite, ChangeIssue,AddIssue,DeleteIssue\n    }))(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AS from \"./App.module.css\"\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Data/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <div className={AS.AppContainer}>\n                    <App/>\n            </div>\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRContainer\":\"Timer_TimeRContainer__16lLU\",\"TimerWorklogName\":\"Timer_TimerWorklogName__2BtW8\",\"TimerIssueName\":\"Timer_TimerIssueName__i_DiT\",\"TimerControlButtonsContainer\":\"Timer_TimerControlButtonsContainer__2RF33\",\"TimerControlButtons\":\"Timer_TimerControlButtons__3NEwd\",\"Timer\":\"Timer_Timer__ji3V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"WorklogDropDown_Container__3cI-Y\",\"ContentContainer\":\"WorklogDropDown_ContentContainer__o5kDH\",\"ContainerEl\":\"WorklogDropDown_ContainerEl__2dtp_\",\"ContainerFirstEl\":\"WorklogDropDown_ContainerFirstEl__1skhJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"LoginModal_modal__xh2O6\",\"bg\":\"LoginModal_bg__2rem_\",\"InputsContainer\":\"LoginModal_InputsContainer__BSJ44\",\"LoginContainer\":\"LoginModal_LoginContainer__3G6Hk\",\"PasswordContainer\":\"LoginModal_PasswordContainer__2mRxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"DeleteConfirm_modal__NP0te\",\"bg\":\"DeleteConfirm_bg__2icmH\",\"ModalTextContainer\":\"DeleteConfirm_ModalTextContainer__2-EVO\",\"NewWorklogControlButtonsContainer\":\"DeleteConfirm_NewWorklogControlButtonsContainer__2Rt5s\",\"NewWorklogControlButtons\":\"DeleteConfirm_NewWorklogControlButtons__2JHii\",\"NewWorklogSubmitButtonSize\":\"DeleteConfirm_NewWorklogSubmitButtonSize__1d3dd\",\"NewWorklogControlButton\":\"DeleteConfirm_NewWorklogControlButton__3JXRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllButtonBgActive\":\"All_AllButtonBgActive__2raAa\",\"AllButtonBg\":\"All_AllButtonBg__18uYw\",\"item\":\"All_item__2aEna\",\"ActiveItem\":\"All_ActiveItem__129Oh\"};","module.exports = __webpack_public_path__ + \"static/media/new_worklog_button.ee54e2c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusDanger.168fb5a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusWarning.ccaa2bfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/CalendarDayStatusOK.b4118d29.svg\";"],"sourceRoot":""}