{"version":3,"sources":["Components/Issues/CustomListInput.tsx","Components/Issues/IssuesLists/ListHeader.tsx","Components/Issues/IssueListItem.tsx","Components/Issues/IssuesLists/ListContent.tsx","Components/Issues/IssuesLists/IssuesList.tsx","Components/Issues/Issues.tsx"],"names":["useStyles","makeStyles","theme","createStyles","AddIssueInput","margin","spacing","paddingBottom","CustomListInput","props","classes","className","Grid","container","justify","alignItems","direction","item","TextField","id","label","multiline","value","onChange","placeholder","style","paddingTop","Button","onClick","onSubmit","color","size","variant","SubmitButtonText","onCancel","marginLeft","CancelButtonText","cardHeader","padding","maxWidth","paddingLeft","ListHeader","items","useState","AddIssueOpened","SetAddIssueOpened","AddNewIssueInput","useInput","numberOfChecked","intersection","checked","length","a","b","filter","indexOf","not","union","avatar","setChecked","indeterminate","disabled","inputProps","title","subheader","paddingRight","el","CustomizedButton","fontColor","bgColor","fontSize","startIcon","text","bind","AddIssue","clear","IssueListItem","EditInputIsShowing","SetEditInputIsShowing","EditInputValue","labelId","Issue","ChangeIssue","key","width","ListItem","role","button","handleToggle","ListItemIcon","tabIndex","disableRipple","ListItemText","primary","Tooltip","arrow","placement","blue","cursor","DeleteIssue","blueGrey","ListContent","currentIndex","newChecked","push","splice","List","dense","component","map","IssuesList","Card","height","Divider","root","position","top","left","bottom","list","backgroundColor","palette","background","paper","boxShadow","Issues","IssuesChecked","CompletedIssuesChecked","CompletedIssues","SetCompletedIssues","concat","SetIssues","aria-label"],"mappings":"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","file":"static/js/7.84a05bca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport  type TCustonListInputProps = {\r\n    value: string\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    onCancel: () => void\r\n    SubmitButtonText: string\r\n    CancelButtonText: string\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        AddIssueInput: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n            },\r\n            paddingBottom: \"10px\"\r\n        }\r\n    })\r\n)\r\n\r\nconst CustomListInput: React.FC<TCustonListInputProps> = (props) => {\r\n    const classes = useStyles()\r\n    return <div className={classes.AddIssueInput}>\r\n        <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n\r\n            <Grid item>\r\n                <TextField\r\n                    id=\"filled-multiline-flexible\"\r\n                    label=\"New issue\"\r\n                    multiline\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                    placeholder=\"Please enter the new issue\"\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item style={{paddingTop:\"1rem\"}}>\r\n                <Grid container justify=\"space-around\" alignItems=\"center\">\r\n                    <Grid item>\r\n                        <Button onClick={props.onSubmit} color={\"primary\"} size={\"small\"} variant={\"contained\"}>\r\n                            {props.SubmitButtonText}\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Button onClick={props.onCancel} style={{marginLeft: \"20%\"}} color={\"inherit\"} size={\"small\"}\r\n                                variant={\"contained\"}>\r\n                            {props.CancelButtonText}\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default CustomListInput","import React, {Dispatch, useState} from \"react\"\nimport Grid from \"@material-ui/core/Grid\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport CardHeader from \"@material-ui/core/CardHeader/CardHeader\"\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport CustomListInput from \"../CustomListInput\";\nimport {useInput} from \"../../hooks/useInput\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {TAddIssue} from \"../../../Data/IssuesReducer\";\nimport CustomizedButton from \"../../CustomizedButton/CustomizedButton\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        cardHeader: {\n            padding: theme.spacing(1, 2),\n        },\n\n        AddIssueInput: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(0),\n                maxWidth: \"30rem\"\n            },\n            paddingLeft: \"30%\",\n            paddingBottom: \"10px\"\n        }\n    })\n)\n\ntype TCardHeaderProps = {\n    checked: string[]\n    setChecked: Dispatch<string[]>\n    AddIssue: TAddIssue\n    items: string[]\n    el: \"Issue\" | \"CompletedIssue\"\n    title: React.ReactNode\n}\nconst ListHeader: React.FC<TCardHeaderProps> = (props) => {\n    const classes = useStyles()\n    const [AddIssueOpened, SetAddIssueOpened] = useState(false)\n    const AddNewIssueInput = useInput('')\n\n    const numberOfChecked = (items: string[]) => intersection(props.checked, items).length\n\n    const intersection = (a: string[], b: string[]) => {\n        return a.filter((value) => b.indexOf(value) !== -1);\n    }\n\n    const handleToggleAll = (items: string[]) => () => {\n        if (numberOfChecked(items) === items.length) props.setChecked(not(props.checked, items))\n        else props.setChecked(union(props.checked, items))\n    }\n\n    const onShowAddIssueInput = () => {\n        SetAddIssueOpened(true)\n    }\n\n    const not = (a: string[], b: string[]) => {\n        return a.filter((value) => b.indexOf(value) === -1);\n    }\n\n    const union = (a: string[], b: string[]) => {\n        return [...a, ...not(b, a)];\n    }\n\n\n    const OnConfirmAddNewIssue = () => {\n        props.AddIssue(AddNewIssueInput.value)\n        AddNewIssueInput.clear()\n        SetAddIssueOpened(false)\n    }\n    const OnCancelAddNewIssue = () => {\n        AddNewIssueInput.clear()\n        SetAddIssueOpened(false)\n    }\n\n    return <div className=\"CardHeaderContainer\">\n        <Grid container justify=\"space-between\" alignItems=\"center\">\n\n            <Grid item>\n                <CardHeader className={classes.cardHeader}\n                            avatar={\n                                <Checkbox\n                                    onClick={handleToggleAll(props.items)}\n                                    checked={numberOfChecked(props.items) === props.items.length && props.items.length !== 0}\n                                    indeterminate={numberOfChecked(props.items) !== props.items.length && numberOfChecked(props.items) !== 0}\n                                    disabled={props.items.length === 0}\n                                    inputProps={{'aria-label': 'all items selected'}}\n                                />\n                            }\n                            title={props.title}\n                            subheader={`${numberOfChecked(props.items)}/${props.items.length} selected`}\n                />\n            </Grid>\n\n            <Grid item style={{paddingRight: \"0.5rem\"}}>\n                {\n                    props.el === \"Issue\" &&\n                        <CustomizedButton onClick={onShowAddIssueInput} fontColor=\"teal\" bgColor=\"white\"\n                                          fontSize=\"0.8rem\"\n                                          variant={\"outlined\"} startIcon={<AddBoxIcon/>} text=\"add issue\"/>\n                }\n            </Grid>\n\n        </Grid>\n        {\n            AddIssueOpened && props.el === \"Issue\" && <CustomListInput {...AddNewIssueInput.bind}\n                                                                       onSubmit={OnConfirmAddNewIssue}\n                                                                       onCancel={OnCancelAddNewIssue}\n                                                                       SubmitButtonText={\"Add\"}\n                                                                       CancelButtonText={\"cancel\"}/>\n        }\n    </div>\n}\nexport default ListHeader","import React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {blue, blueGrey} from \"@material-ui/core/colors\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TChangeIssue, TDeleteIssue} from \"../../Data/IssuesReducer\";\r\nimport CustomListInput from \"./CustomListInput\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nexport type TIssueListItemProps = {\r\n    Issue: string\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    handleToggle: (value: string) => void\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\nconst IssueListItem: React.FC<TIssueListItemProps> = (props) => {\r\n    const [EditInputIsShowing, SetEditInputIsShowing] = useState(false)\r\n    const EditInputValue = useInput('')\r\n\r\n    const OnSaveNewValue = () => {\r\n        props.ChangeIssue(props.Issue, EditInputValue.value)\r\n        SetEditInputIsShowing(false)\r\n        EditInputValue.clear()\r\n    }\r\n    const onCancelInput = () =>{\r\n        SetEditInputIsShowing(false)\r\n    }\r\n\r\n\r\n\r\n\r\n    const labelId = `transfer-list-all-item-${props.Issue}-label`\r\n\r\n    return (<div className=\"IssueListItem\">\r\n            {\r\n                EditInputIsShowing\r\n                    ? <CustomListInput onSubmit={OnSaveNewValue}\r\n                             {...EditInputValue.bind} onCancel={onCancelInput} SubmitButtonText={\"Save\"}\r\n                                       CancelButtonText={\"cancel\"}\r\n                                             />\r\n                    : <Grid key={props.Issue} container alignItems=\"center\" justify=\"space-around\">\r\n\r\n                        <Grid item  style={{width:\"85%\"}}>\r\n\r\n                            <ListItem role=\"listitem\" button\r\n                                      //@ts-ignore\r\n                                      onClick={props.handleToggle(props.Issue)}>\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        checked={props.checked.indexOf(props.Issue) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{'aria-labelledby': labelId}}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={props.Issue}/>\r\n                            </ListItem>\r\n                        </Grid>\r\n\r\n                        <Grid item  >\r\n\r\n                            <Grid container justify=\"space-between\" alignItems=\"center\" style={{paddingRight : \"1rem\"}}>\r\n\r\n                                {\r\n                                    props.el === \"Issue\" && <Grid item style={{paddingRight : \".5rem\"}}>\r\n                                        <Tooltip title=\"Edit\" arrow placement=\"top\">\r\n                                            <EditIcon onClick={() => SetEditInputIsShowing(true)}\r\n                                                      style={{color: blue[400], cursor: \"pointer\"}}\r\n                                                      fontSize=\"default\"/>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                }\r\n\r\n\r\n                                <Grid item >\r\n                                    <Tooltip title=\"Delete\" arrow placement=\"top\">\r\n                                        <DeleteIcon\r\n                                            onClick={() => props.DeleteIssue(props.Issue, props.el)}\r\n                                            style={props.el === \"Issue\"\r\n                                                ? {color: blueGrey[600], cursor: \"pointer\"}\r\n                                                : {color: blueGrey[600], cursor: \"pointer\"}}\r\n                                            fontSize=\"default\"/>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IssueListItem","import React, {Dispatch} from \"react\"\nimport List from \"@material-ui/core/List\";\nimport IssueListItem from \"../IssueListItem\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { TChangeIssue, TDeleteIssue} from \"../../../Data/IssuesReducer\";\n\n\ntype TListContentProps={\n    checked: string[]\n    items: string[]\n    el: \"Issue\" | \"CompletedIssue\"\n    DeleteIssue: TDeleteIssue\n    ChangeIssue: TChangeIssue\n    setChecked: Dispatch<string[]>\n}\n\nconst ListContent :React.FC<TListContentProps> = props=> {\n\n    const handleToggle = (value: string) => () => {\n        const currentIndex = props.checked.indexOf(value)\n        const newChecked = [...props.checked]\n        if (currentIndex === -1) newChecked.push(value)\n        else newChecked.splice(currentIndex, 1)\n        props.setChecked(newChecked)\n    }\n\n    return <div className=\"CardContentContainer\">\n        <List dense component=\"div\" role=\"list\">\n            {props.items.map((value: string) => {\n                return (<IssueListItem key={value} Issue={value} el={props.el} checked={props.checked}\n                                       handleToggle={handleToggle} DeleteIssue={props.DeleteIssue}\n                                       ChangeIssue={props.ChangeIssue}/>)\n\n            })}\n            <ListItem/>\n        </List>\n    </div>\n}\nexport default ListContent","import React, {Dispatch} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue} from \"../../../Data/IssuesReducer\";\r\nimport ListHeader from \"./ListHeader\";\r\nimport ListContent from \"./ListContent\";\r\n\r\n\r\nexport type TIssuesListProps = {\r\n    title: React.ReactNode\r\n    items: string[]\r\n    el: \"Issue\" | \"CompletedIssue\"\r\n    checked: string[]\r\n    setChecked: Dispatch<string[]>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n}\r\n\r\n\r\nconst IssuesList: React.FC<TIssuesListProps> = (props) => {\r\n\r\n\r\n    return <Card style={{width: \"100%\", height: \"100%\"}}>\r\n\r\n        <ListHeader checked={props.checked} setChecked={props.setChecked}\r\n                    AddIssue={props.AddIssue} items={props.items}\r\n                    el={props.el} title={props.title}/>\r\n\r\n        <Divider/>\r\n\r\n        <div style={{paddingTop :\"1rem\"}}>\r\n            <ListContent checked={props.checked} items={props.items} el={props.el} DeleteIssue={props.DeleteIssue}\r\n                         ChangeIssue={props.ChangeIssue} setChecked={props.setChecked}/>\r\n        </div>\r\n\r\n\r\n    </Card>\r\n}\r\n\r\nexport default IssuesList","import React, { useState} from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport {TAddIssue, TChangeIssue, TDeleteIssue, TSetCompletedIssues, TSetIssues} from \"../../Data/IssuesReducer\"\r\nimport IssuesList from \"./IssuesLists/IssuesList\"\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            position: \"absolute\",\r\n            top : \"4rem\",\r\n            left: 0,\r\n            bottom : \"4rem\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        },\r\n        list: {\r\n            width: \"40%\",\r\n            height : \"80%\",\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow : \"0px 2px 10px rgba(0,0,0,0.5)\"\r\n        },\r\n        button: {\r\n            color: \"#fdfffb\",\r\n            margin: theme.spacing(0.5, 0),\r\n        }\r\n    })\r\n)\r\n\r\nconst not = (a: string[], b: string[]) => {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nconst intersection = (a: string[], b: string[]) => {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\n\r\nexport type TIssuesProps = {\r\n    Issues: Array<string>\r\n    CompletedIssues: Array<string>\r\n    AddIssue: TAddIssue\r\n    DeleteIssue: TDeleteIssue\r\n    ChangeIssue: TChangeIssue\r\n    SetIssues: TSetIssues\r\n    SetCompletedIssues: TSetCompletedIssues\r\n}\r\n\r\n\r\nconst Issues: React.FC<TIssuesProps> = (props) => {\r\n    const classes = useStyles()\r\n    const [checked, setChecked] = useState<string[]>([])\r\n\r\n\r\n    const IssuesChecked = intersection(checked, props.Issues);\r\n    const CompletedIssuesChecked = intersection(checked, props.CompletedIssues);\r\n\r\n\r\n    const handleCheckedIssues = () => {\r\n        props.SetCompletedIssues(props.CompletedIssues.concat(IssuesChecked))\r\n        props.SetIssues(not(props.Issues, IssuesChecked))\r\n        setChecked(not(checked, IssuesChecked))\r\n    }\r\n\r\n    const handleCheckedCompletedIssues = () => {\r\n        props.SetIssues(props.Issues.concat(CompletedIssuesChecked))\r\n        props.SetCompletedIssues(not(props.CompletedIssues, CompletedIssuesChecked))\r\n        setChecked(not(checked, CompletedIssuesChecked))\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} alignItems=\"center\" justify=\"center\" className={classes.root} >\r\n\r\n            <Grid style={{maxWidth : \"40rem\"}} item className={classes.list}>\r\n                <IssuesList title={\"Issues\"} items={props.Issues}\r\n                            el={\"Issue\"}\r\n                            DeleteIssue={props.DeleteIssue} AddIssue={props.AddIssue}\r\n                            checked={checked} setChecked={setChecked}\r\n                            ChangeIssue={props.ChangeIssue}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <Grid container direction=\"column\" alignItems=\"center\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        className={classes.button}\r\n                        onClick={handleCheckedIssues}\r\n                        disabled={IssuesChecked.length === 0}\r\n                        aria-label=\"move selected right\"\r\n                        color={\"secondary\"}\r\n                    >\r\n                        &gt;\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        className={classes.button}\r\n                        onClick={handleCheckedCompletedIssues}\r\n                        disabled={CompletedIssuesChecked.length === 0}\r\n                        aria-label=\"move selected left\"\r\n                        color={\"primary\"}\r\n                    >\r\n                        &lt;\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item className={classes.list}>\r\n                <IssuesList title={\"Completed Issues\"} items={props.CompletedIssues}\r\n                            el={\"CompletedIssue\"} setChecked={setChecked}\r\n                            checked={checked} AddIssue={props.AddIssue}\r\n                            DeleteIssue={props.DeleteIssue}\r\n                            ChangeIssue={props.ChangeIssue}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Issues"],"sourceRoot":""}